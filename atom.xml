<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>madcoding’s blog</title>
  
  <subtitle>学习，沉淀，分享，交流</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.mad-coding.cn/"/>
  <updated>2019-08-18T05:24:52.139Z</updated>
  <id>https://www.mad-coding.cn/</id>
  
  <author>
    <name>madcoding</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo蝴蝶主题的一些小功能(跟新中)</title>
    <link href="https://www.mad-coding.cn/2019/08/18/hexo%E8%9D%B4%E8%9D%B6%E4%B8%BB%E9%A2%98%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%8A%9F%E8%83%BD-%E8%B7%9F%E6%96%B0%E4%B8%AD/"/>
    <id>https://www.mad-coding.cn/2019/08/18/hexo蝴蝶主题的一些小功能-跟新中/</id>
    <published>2019-08-18T04:43:57.000Z</published>
    <updated>2019-08-18T05:24:52.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>在从使用next主题后，因为博客的加载缓慢问题，让我再次放弃的这个主题，而偶然的看到同事使用的<strong>蝴蝶</strong>主题，让我欢喜不已。因为这个主题真的太好看了，一下子吸引了我，而且整个博客加载的速度也是非常的快。不过由图床使用的是GitHub的图床，所有在图片加载这个方面还是有点慢。不过整理影响不是很大。这篇文章来给大家介绍一下，换了<strong>蝴蝶</strong> 主题后的一些小功能细节问题。</p><a id="more"></a><h1 id="0x01-导航栏图标问题"><a href="#0x01-导航栏图标问题" class="headerlink" title="0x01 导航栏图标问题"></a>0x01 导航栏图标问题</h1><p>导航栏栏图片，就是在导航栏的文字前面都有对应的小图标，不知道有没有人和我一样，因为增加了导航栏的功能菜单，但是苦苦的找不到对应的图标，让博客看起来不是很好看。</p><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63qoc398xj20ht01u0u0.jpg" class="lozad"></p><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><p>访问<a href="https://www.thinkcmf.com/font/font_awesome/icon/hdd-o" target="_blank" rel="noopener">font_awesome网站</a>，主页如下</p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63qq0evbtj215m0gzn4a.jpg" class="lozad"></p><p>搜索想要的图标，比如电影</p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63qqib2pfj20nw091t94.jpg" class="lozad"></p><p>复制电影的代码</p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63qque80wj20uq0fagmw.jpg" class="lozad"></p><p>在主题的配置文件下替换掉后面的标识</p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63qr9wcc5j20h30980ta.jpg" class="lozad"></p><p>然后刷新一下浏览器就能看到了</p><h2 id="效果查看"><a href="#效果查看" class="headerlink" title="效果查看"></a>效果查看</h2><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63qro4d03j207z01ygm1.jpg" class="lozad"></p><h1 id="0x02-分类目录二级目录"><a href="#0x02-分类目录二级目录" class="headerlink" title="0x02 分类目录二级目录"></a>0x02 分类目录二级目录</h1><p>不知道大家有没有这样的苦恼，就是在写文章的时候，把很多文章都归类到一个大类中，到最后自己找文章的时候都不太好找，但是如果我们将文章都归类到一个二级分类，然后二级分类在归类到一级分类，这样的话是不是找起来更方便一点尼。</p><h2 id="效果预览-1"><a href="#效果预览-1" class="headerlink" title="效果预览"></a>效果预览</h2><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63qw2e8n0j209s030a9v.jpg" class="lozad"></p><h2 id="实现步骤-1"><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a>实现步骤</h2><p>在每次写文章的时候，categories按照如下格式书写。第一个为一级，第二个为二级。理论上来说，还可以添加3级，4级分类目录，这个根据自己的喜好和实际需求了。</p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63qwdq77ej20cw028a9w.jpg" class="lozad"></p><p>在每次写文章的时候，categories按照如下格式书写。第一个为一级，第二个为二级。</p><h2 id="效果查看-1"><a href="#效果查看-1" class="headerlink" title="效果查看"></a>效果查看</h2><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63qxl8rb0j209s030a9v.jpg" class="lozad"></p><h1 id="0x03-hexo-部署出现问题"><a href="#0x03-hexo-部署出现问题" class="headerlink" title="0x03 hexo 部署出现问题"></a>0x03 hexo 部署出现问题</h1><p>在使用hexo d或者hexo deploy Mingling 时，发现不能部署。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63qzf8mn5j20ge02a3ye.jpg" class="lozad"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>在博客根目录下，输入<code>npm install --save hexo-deployer-git</code>命令，</p><p>安装完成以后再次之行hexo deploy 一切正常</p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63r100eetj20k30b5dh6.jpg" class="lozad"></p><h1 id="0x04-关闭page页面或者特定文章的评论"><a href="#0x04-关闭page页面或者特定文章的评论" class="headerlink" title="0x04 关闭page页面或者特定文章的评论"></a>0x04 关闭page页面或者特定文章的评论</h1><p>我们在写文章的时候，经常可能会碰到有些文章不需要增加评论的功能，那怎么去实现尼，其实hexo早就想到这点了，实现很简单，一条命令即可。</p><h2 id="实现步骤-2"><a href="#实现步骤-2" class="headerlink" title="实现步骤"></a>实现步骤</h2><p>只要在文章的md或者page的md文件头中加入comments: false即可</p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63r3jxytrj20by045747.jpg" class="lozad"></p><p>注意：是comments 不是comment，单词别写错，第二个，false前面有一个<strong>空格</strong></p><h1 id="0x05-给Hexo正确添加RSS订阅"><a href="#0x05-给Hexo正确添加RSS订阅" class="headerlink" title="0x05 给Hexo正确添加RSS订阅"></a>0x05 给Hexo正确添加RSS订阅</h1><h2 id="安装feed插件"><a href="#安装feed插件" class="headerlink" title="安装feed插件"></a>安装feed插件</h2><p>在博客的根目录下输入<code>npm install hexo-generator-feed</code>命令安装，然后等待安装完成</p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63r4x7a0oj20jy07aaan.jpg" class="lozad"></p><h2 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h2><p>打开站点配置文件_config.yml，末尾添加以下配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: http://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">#RSS订阅</span></span><br><span class="line">plugin:</span><br><span class="line">- hexo-generator-feed</span><br><span class="line"><span class="comment">#Feed Atom</span></span><br><span class="line">feed:</span><br><span class="line">type: atom</span><br><span class="line">path: atom.xml</span><br><span class="line">limit: <span class="number">20</span></span><br></pre></td></tr></table></figure><p>打开主题配置文件_config.yml，按Ctrl+F 搜索rss，添加配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p>输入一下命令，然后刷新一下浏览器即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63rariqimj209603ta9v.jpg" class="lozad"></p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63r98bfavj21gn0nbads.jpg" class="lozad"></p><h1 id="0x06-修改阅读时长，文章热度"><a href="#0x06-修改阅读时长，文章热度" class="headerlink" title="0x06 修改阅读时长，文章热度"></a>0x06 修改阅读时长，文章热度</h1><h2 id="实现步骤-3"><a href="#实现步骤-3" class="headerlink" title="实现步骤"></a>实现步骤</h2><p>Butterfly/languages/zh-CN.yml 下，搜索post，然后按照下图修改即可</p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63rcef3a7j20lc07pwf1.jpg" class="lozad"></p><h2 id="效果显示"><a href="#效果显示" class="headerlink" title="效果显示"></a>效果显示</h2><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63rcr76vcj20gv02ogmd.jpg" class="lozad"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;在从使用next主题后，因为博客的加载缓慢问题，让我再次放弃的这个主题，而偶然的看到同事使用的&lt;strong&gt;蝴蝶&lt;/strong&gt;主题，让我欢喜不已。因为这个主题真的太好看了，一下子吸引了我，而且整个博客加载的速度也是非常的快。不过由图床使用的是GitHub的图床，所有在图片加载这个方面还是有点慢。不过整理影响不是很大。这篇文章来给大家介绍一下，换了&lt;strong&gt;蝴蝶&lt;/strong&gt; 主题后的一些小功能细节问题。&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://www.mad-coding.cn/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://www.mad-coding.cn/tags/hexo/"/>
    
      <category term="主题功能" scheme="https://www.mad-coding.cn/tags/%E4%B8%BB%E9%A2%98%E5%8A%9F%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>oneindex后续</title>
    <link href="https://www.mad-coding.cn/2019/08/16/oneindex%E5%90%8E%E7%BB%AD/"/>
    <id>https://www.mad-coding.cn/2019/08/16/oneindex后续/</id>
    <published>2019-08-16T01:45:37.000Z</published>
    <updated>2019-08-18T03:57:28.930Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>​    在前一篇文章《<a href="[https://www.mad-coding.cn/2019/08/09/onedrive-oneindex%E6%89%93%E9%80%A0%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%9B%98/#more](https://www.mad-coding.cn/2019/08/09/onedrive-oneindex打造属于自己的个人网盘/#more)">使用onedrive+oneindex打造一个专属个人网盘</a>》中，我们已经成功的搭建好了一个网盘了，但是这还不算完美，还需要增加一些小细节，比如文件夹加密，文件夹描述，云盘底部介绍等等，下面就来给大家讲讲如何实现。</p><a id="more"></a><h1 id="0x01-实现文件夹加密功能"><a href="#0x01-实现文件夹加密功能" class="headerlink" title="0x01 实现文件夹加密功能"></a>0x01 实现文件夹加密功能</h1><p>实现文件夹加密的功能非常简单，原理就是在需要加密的文件夹中创建一个.password的文件，然后在该文件中输入自己需要设置的密码即可。但是，问题来了，我们正常情况下，Windows是不允许创建一个没有名称的文件的，提示如下。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816095402.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816095232.png" class="lozad"></p><p>那么，该如何解决这个问题尼？ 其实还是有方法的。比如在cmd中使用命令来直接创建该文件，就不会出现这种情况了，具体操作如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd Desktop <span class="comment">#切换到桌面</span></span><br><span class="line">echo <span class="number">123456</span> &gt; .password   <span class="comment">#创建.password文件，并将123456写入该文件</span></span><br><span class="line"><span class="comment">#123456就是加密的文章夹密码</span></span><br></pre></td></tr></table></figure><p>.password文件创建好后，可以上传到你想加密的文件夹，当然这个文件也可以复制到其他文件夹，这样就不需要每次重复创建了。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816095923.png" class="lozad"></p><p>如果想立马看到效果的话，去oneindex后台重新刷新一下缓存，</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816100042.png" class="lozad"></p><p>再次访问发现成功加密文件夹，需要输入密码才能访问</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816100119.png" class="lozad"></p><p>ps1：这里输入密码访问成功访问后，发现后面就不用再次输入密码了，原因是浏览器记录了缓存信息，再次使用一个新的浏览器打开还是需要密码的，所以不用担心。</p><p>ps2：如果需要实现在加密的文件夹中再加密文件夹，原理还是一样的，也是在需要加密的文件夹中放入.password文件即可，这样的话，就可以给每个不同的私人文件夹放置不同的密码，即使一个文件夹的密码被猜解出来，其他文件夹也还是安全的。</p><h1 id="0x02-网盘底部创建介绍信息"><a href="#0x02-网盘底部创建介绍信息" class="headerlink" title="0x02 网盘底部创建介绍信息"></a>0x02 网盘底部创建介绍信息</h1><p>这个功能实现过程非常的简单，只需要在网盘根目录中新建一个README.md文件即可，然后在该文件中写入自己需要介绍的信息。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816102157.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816102124.png" class="lozad"></p><h1 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h1><p>如果还有新功能，会在跟新。皮卡皮卡^v^</p><p>### </p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;​    在前一篇文章《&lt;a href=&quot;[https://www.mad-coding.cn/2019/08/09/onedrive-oneindex%E6%89%93%E9%80%A0%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%9B%98/#more](https://www.mad-coding.cn/2019/08/09/onedrive-oneindex打造属于自己的个人网盘/#more)&quot;&gt;使用onedrive+oneindex打造一个专属个人网盘&lt;/a&gt;》中，我们已经成功的搭建好了一个网盘了，但是这还不算完美，还需要增加一些小细节，比如文件夹加密，文件夹描述，云盘底部介绍等等，下面就来给大家讲讲如何实现。&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="https://www.mad-coding.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="好玩" scheme="https://www.mad-coding.cn/categories/%E6%95%99%E7%A8%8B/%E5%A5%BD%E7%8E%A9/"/>
    
    
      <category term="oneindex;onedrive" scheme="https://www.mad-coding.cn/tags/oneindex-onedrive/"/>
    
  </entry>
  
  <entry>
    <title>如何将*.frm，*.MYD和*.MYI格式的文件导入MySQL中</title>
    <link href="https://www.mad-coding.cn/2019/08/14/%E5%A6%82%E4%BD%95%E5%B0%86-frm%EF%BC%8C-MYD%E5%92%8C-MYI%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%96%87%E4%BB%B6%E5%AF%BC%E5%85%A5MySQL%E4%B8%AD/"/>
    <id>https://www.mad-coding.cn/2019/08/14/如何将-frm，-MYD和-MYI格式的文件导入MySQL中/</id>
    <published>2019-08-14T10:16:59.000Z</published>
    <updated>2019-08-18T03:53:47.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>​        在学mysql数据库的时候，可能有小伙伴经常碰到.frm, .MYD，.MYI 的文件，但是却不知道如何还原其中的数据，今天博客也是碰到了一样的问题，经过在晚上一番搜索后，成功还原了，在这里记录一下，然后分享给大家。</p><a id="more"></a><h1 id="0x01-操作步骤"><a href="#0x01-操作步骤" class="headerlink" title="0x01 操作步骤"></a>0x01 操作步骤</h1><p>创建数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE test2</span><br></pre></td></tr></table></figure><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190814181929.png" class="lozad"></p><p>执行成功</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190814182045.png" class="lozad"></p><p>刷新数据库</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190814182133.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190814182154.png" class="lozad"></p><p>利用PHPstudy找到mysql数据库的安装路径，然后找到data文件夹</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190814182207.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190814182239.png" class="lozad"></p><p>将<em>.frm，</em>.MYD和*.MYI的文件都复制到刚刚创建的数据库文件夹中</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190814182249.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190814182408.png" class="lozad"></p><p>再次回到小海豚中刷新数据库，发现表已经出现了</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190814182443.png" class="lozad"></p><p>然后，然后就能看到数据库。哇卡卡。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190814182458.png" class="lozad"></p><h1 id="0x02-踩坑说明"><a href="#0x02-踩坑说明" class="headerlink" title="0x02 踩坑说明"></a>0x02 踩坑说明</h1><p> 我自己在虚拟机中单独安装了mysql5.5的数据库，然后使用小海豚进行连接，但是发现，创建数据库的时候，在mysql的数据库安装文件夹的data中没有出现最新创建的数据库文件夹，。。。。郁闷，为啥每次这些坑都会被我碰到。。。，</p><p>解决方法：我想起来PHPstudy中集成了mysql，于是，我直接卸载了mysql，直接安装了PHPstudy，然后成功还原了数据库。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;​        在学mysql数据库的时候，可能有小伙伴经常碰到.frm, .MYD，.MYI 的文件，但是却不知道如何还原其中的数据，今天博客也是碰到了一样的问题，经过在晚上一番搜索后，成功还原了，在这里记录一下，然后分享给大家。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://www.mad-coding.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="mysql" scheme="https://www.mad-coding.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/"/>
    
    
      <category term="mysql" scheme="https://www.mad-coding.cn/tags/mysql/"/>
    
      <category term="数据库" scheme="https://www.mad-coding.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>onedrive+oneindex打造属于自己的个人网盘</title>
    <link href="https://www.mad-coding.cn/2019/08/09/onedrive-oneindex%E6%89%93%E9%80%A0%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%9B%98/"/>
    <id>https://www.mad-coding.cn/2019/08/09/onedrive-oneindex打造属于自己的个人网盘/</id>
    <published>2019-08-09T14:50:35.000Z</published>
    <updated>2019-08-18T03:58:14.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>​    前几天在别人的博客中看到有自己搭建的个人专属网盘，看起来还不错的样子，然后了解到是用<code>onedrive+oneindex</code>来实现的，所以自己也通过在网上学习一些相关的文章，并且搭建成功了，所以在这里分享一下搭建的流程，一来是给自己的总结，二来是分享给需要的朋友。</p><a id="more"></a><h1 id="0x01-环境准备"><a href="#0x01-环境准备" class="headerlink" title="0x01 环境准备"></a>0x01 环境准备</h1><blockquote><p>环境需求：</p><p>1.vps一个</p><p>2.宝塔面板环境，Nginx，PHP需要5.6以上版本</p><p>3.onedrive 5T空间</p><p>4.oneindex</p><p>5.域名一个</p></blockquote><h2 id="1-1-vps购买"><a href="#1-1-vps购买" class="headerlink" title="1.1 vps购买"></a>1.1 vps购买</h2><p>访问<a href="https://virmach.com/" target="_blank" rel="noopener">vps购买地址</a>选择经济实惠的Linux VPS</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812094415.png" class="lozad"></p><p>然后拉到最底下，选择kvm的vps，当然选择openVZ的也可以。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812000710.png" class="lozad"></p><p>选择第一个2.5刀的</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812095701.png" class="lozad"></p><p>选择操作系统和带宽</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812095822.png" class="lozad"></p><p>选择vps的位置，然后加入购物车</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812095912.png" class="lozad"></p><p>结账</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812095953.png" class="lozad"></p><p>填写相关信息，然后选择支付宝付款</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812100027.png" class="lozad"></p><h2 id="1-2-宝塔面板的安装"><a href="#1-2-宝塔面板的安装" class="headerlink" title="1.2 宝塔面板的安装"></a>1.2 宝塔面板的安装</h2><p><strong>entos</strong>安装命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install      -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure><p><strong>Ubuntu/Deepin</strong> 安装命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash      install.sh</span><br></pre></td></tr></table></figure><p><strong>Debian</strong>安装命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; bash install.sh</span><br></pre></td></tr></table></figure><p><strong>Fedora</strong>安装命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O  install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; bash install.sh</span><br></pre></td></tr></table></figure><h2 id="1-3-Nginx和PHP的安装"><a href="#1-3-Nginx和PHP的安装" class="headerlink" title="1.3 Nginx和PHP的安装"></a>1.3 Nginx和PHP的安装</h2><p>​    安装完宝塔面板后，在浏览器中输入<code>vpsip:8888</code>进入宝塔面板，登陆的账号密码在成功安装宝塔后会有提示，根据提示输入登陆就好了，一般情况下第一次登陆宝塔会提示让你安装<code>LNMP</code>环境或者<code>LAMP</code>环境，我们选择安装<code>Nginx+PHP5.6</code>就好了，<code>mysql</code>和<code>phpmyadmin</code>不需要安装</p><p>安装的进度如下，耐心等待安装完成即可。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812000917.png" class="lozad"></p><h1 id="0x02-注册365邮箱"><a href="#0x02-注册365邮箱" class="headerlink" title="0x02 注册365邮箱"></a>0x02 注册365邮箱</h1><p>​        临时邮箱网址：<a href="https://t.odmail.cn/" target="_blank" rel="noopener">https://t.odmail.cn/</a> </p><p>复制网页中的邮箱然后选择 <a href="https://signup.microsoft.com/signup?sku=student" target="_blank" rel="noopener"><strong>学生版</strong></a> or <a href="https://signup.microsoft.com/signup?sku=faculty" target="_blank" rel="noopener"><strong>教师版</strong></a> 在注册,记住，页面不要关闭，待会需要接收验证码</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812001044.png" class="lozad"></p><p>输入刚刚的邮箱</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812002410.png" class="lozad"></p><p>返回刚刚临时邮箱的页面，接收到验证码了</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812002444.png" class="lozad"></p><p>输入验证码</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812002515.png" class="lozad"></p><p>输入相关信息完成注册</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812002515.png" class="lozad"></p><p>需要用手机号验证一下</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812002550.png" class="lozad"></p><p>注册完成</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812002609.png" class="lozad"></p><h1 id="0x03-安装oneindex"><a href="#0x03-安装oneindex" class="headerlink" title="0x03 安装oneindex"></a>0x03 安装oneindex</h1><h2 id="3-1-注册域名"><a href="#3-1-注册域名" class="headerlink" title="3.1 注册域名"></a>3.1 注册域名</h2><p><a href="https://wanwang.aliyun.com/?spm=5176.12825654.eofdhaal5.69.3dbd2c4aV1flhF" target="_blank" rel="noopener">域名注册地址</a>直接购买，不懂的，出门右拐百度</p><h2 id="3-2-设置域名解析"><a href="#3-2-设置域名解析" class="headerlink" title="3.2 设置域名解析"></a>3.2 设置域名解析</h2><p>在域名管理中设置域名解析</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812105215.png" class="lozad"></p><p>A记录指向是自己的vps ip地址pan是域名的二级域名，也就是pan.xxx.com</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812105318.png" class="lozad"></p><h2 id="3-3-安装oneindex"><a href="#3-3-安装oneindex" class="headerlink" title="3.3 安装oneindex"></a>3.3 安装oneindex</h2><p>注册好了onedrive以后，我们现在有5T的空间了，具体有没有5T，会在后面上传的部分介绍如何查看</p><p>首先需要下载oneindex的源码，GitHub下载地址：<a href="https://github.com/donwa/oneindex.git" target="_blank" rel="noopener">onindex</a></p><p>然后登陆宝塔面板，配置一下</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812103644.png" class="lozad"></p><p>填写自己注册的域名</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812103725.png" class="lozad"></p><p>点击进入网站目录</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812103811.png" class="lozad"></p><p>然后刚刚下载的oneindex源码上传上去，也可以使用远程下载直接远程下载oneindex的源码，如果是自己上传的，需要解压缩一下，解压完以后如下图：</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812003319.png" class="lozad"></p><p>然后访问自己的域名直接安装，必须全部都是√才行，如果3,4的权限不够需要在宝塔面板中赋予该文件夹可读可写的权限</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812003403.png" class="lozad"></p><p>都是√的可以跳过不看这个</p><p>重新回到宝塔面板给需要赋予权限的两个文件夹赋权</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812105648.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812105826.png" class="lozad"></p><p>再次刷新，OK，都是√了，</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190806084911.gif" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812003517.png" class="lozad"></p><h1 id="0x04-oneindex的基本设置"><a href="#0x04-oneindex的基本设置" class="headerlink" title="0x04 oneindex的基本设置"></a>0x04 oneindex的基本设置</h1><p>输入<code>域名/?/admin</code>进入oneindex后台管理系统，初始密码是oneindex</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812121805.png" class="lozad"></p><p>修改网盘的名称</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812110510.png" class="lozad"></p><p>在宝塔中设置定时刷新缓存计划</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812110822.png" class="lozad"></p><p>在宝塔面板中添加计划任务</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812110735.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812003537.png" class="lozad"></p><h1 id="0x05-文件上传"><a href="#0x05-文件上传" class="headerlink" title="0x05 文件上传"></a>0x05 文件上传</h1><p>​    为了方便我们上传文件到网盘中，我们需要用到RaiDrive将网盘映射到本地计算机中，当做本地磁盘来使用，具体操作如下：<br>RaiDrive下载:<a href="https://www.raidrive.com/" target="_blank" rel="noopener">官网地址</a>,<a href="http://t.cn/EZKRDHl" target="_blank" rel="noopener">蓝奏云盘</a></p><p>下载完以后就是一步步安装了，傻瓜式操作，下面主要讲一下安装完以后如何将网盘映射到本地</p><p>首先，安装好的RAIDrive是英文的，不习惯得话可以设置成中文，如图</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812085628.png" class="lozad"></p><p>然后将网盘映射到本地，操作如下</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812004552.png" class="lozad"></p><p>点击接受</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812004605.png" class="lozad"></p><p>耐心等待一会以后</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812004624.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812004637.png" class="lozad"></p><h1 id="0x06-碰到的问题"><a href="#0x06-碰到的问题" class="headerlink" title="0x06 碰到的问题"></a>0x06 碰到的问题</h1><h2 id="3-4-授权5T空间的时候碰到错误"><a href="#3-4-授权5T空间的时候碰到错误" class="headerlink" title="3.4 授权5T空间的时候碰到错误"></a>3.4 授权5T空间的时候碰到错误</h2><p><strong>问题描述：</strong></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812003656.png" class="lozad"></p><p><strong>问题原因：</strong></p><p>没有使用开通5T onedrive空间的账号登陆</p><p><strong>解决方法：</strong></p><p>如果有5T 的onedrive空间的账号，直接使用该账号登陆即可，如果没有的话，需要自己重新注册一个即可。</p><h2 id="3-5-网盘文章打开404"><a href="#3-5-网盘文章打开404" class="headerlink" title="3.5 网盘文章打开404"></a>3.5 网盘文章打开404</h2><p><strong>问题描述：</strong></p><p>上传到网盘的文件，点击打开以后显示404</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812003902.png" class="lozad"></p><p>问题原因：</p><p>没有设置伪静态，导致访问文件时找不到资源文件。</p><p>解决方法：</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812004008.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812004032.png" class="lozad"></p><p>设置好以后再次访问域名，发现里面的文件夹和文件都可以直接点击查看</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812004050.png" class="lozad"></p><h2 id="3-6-解决图片打开是404问题"><a href="#3-6-解决图片打开是404问题" class="headerlink" title="3.6 解决图片打开是404问题"></a>3.6 解决图片打开是404问题</h2><p>将伪静态替换成下面</p> <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^./files/(.)</span> /wp-includes/ms-files.php?file=<span class="number">1</span> <span class="literal">last</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">if</span> (!-e <span class="variable">$request_filename</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^.+?(/wp-.*)</span> <span class="variable">$1</span> <span class="literal">last</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^.+?(/.*.php)$</span> <span class="variable">$1</span> <span class="literal">last</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^</span> /index.php <span class="literal">last</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功访问</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190812111011.png" class="lozad"></p><p><strong>参考链接：</strong></p><p><a href="https://www.52pojie.cn/thread-847650-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-847650-1-1.html</a></p><p> <a href="https://github.com/donwa/oneindex" target="_blank" rel="noopener">https://github.com/donwa/oneindex</a></p><p> <a href="https://blog.csdn.net/github_39533414/article/details/83687260" target="_blank" rel="noopener">https://blog.csdn.net/github_39533414/article/details/83687260</a></p><p> <a href="https://www.moerats.com/archives/592/" target="_blank" rel="noopener">https://www.moerats.com/archives/592/</a></p><p> <a href="http://www.sumbk.com/339.html" target="_blank" rel="noopener">http://www.sumbk.com/339.html</a></p><p> <a href="http://blog.jialezi.net/?post=120" target="_blank" rel="noopener">http://blog.jialezi.net/?post=120</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;​    前几天在别人的博客中看到有自己搭建的个人专属网盘，看起来还不错的样子，然后了解到是用&lt;code&gt;onedrive+oneindex&lt;/code&gt;来实现的，所以自己也通过在网上学习一些相关的文章，并且搭建成功了，所以在这里分享一下搭建的流程，一来是给自己的总结，二来是分享给需要的朋友。&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="https://www.mad-coding.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="好玩" scheme="https://www.mad-coding.cn/categories/%E6%95%99%E7%A8%8B/%E5%A5%BD%E7%8E%A9/"/>
    
    
      <category term="oneindex" scheme="https://www.mad-coding.cn/tags/oneindex/"/>
    
      <category term="onedrive" scheme="https://www.mad-coding.cn/tags/onedrive/"/>
    
      <category term="个人网盘" scheme="https://www.mad-coding.cn/tags/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>给博客添加豆瓣书架功能</title>
    <link href="https://www.mad-coding.cn/2019/08/09/%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%B1%86%E7%93%A3%E4%B9%A6%E6%9E%B6%E5%8A%9F%E8%83%BD/"/>
    <id>https://www.mad-coding.cn/2019/08/09/给博客添加豆瓣书架功能/</id>
    <published>2019-08-09T14:37:05.000Z</published>
    <updated>2019-08-18T03:58:24.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>在一次浏览个人博客网站的过程中，返现有个网站有豆瓣读书的功能，可以在页面展示自己读了哪些书，想看哪些书等，我觉得这个功能特别的好，可以记录自己的读书，还可以在读完以后写上自己的书评。下面来给大家讲讲怎么在自己的博客中实现这个功能。</p><a id="more"></a><p>#0x01 成品展示</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190809230631.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190809230647.png" class="lozad"></p><p>#0x02 需求配置</p><p>##2.1 安装插件</p><p>在博客的根目录下输入命令安装</p><p><code>npm install hexo-douban --save</code></p><p>##2.2 站点配置文件中添加配置</p><p>在<code>Hexo</code>站点根目录配置文件<code>_config.xml</code>中的末尾添加如下配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">douban:</span><br><span class="line">   user: mythsman</span><br><span class="line">   builtin: false</span><br><span class="line">   book:</span><br><span class="line">     title: <span class="string">'This is my book title'</span></span><br><span class="line">     quote: <span class="string">'This is my book quote'</span></span><br><span class="line">   movie:</span><br><span class="line">     title: <span class="string">'This is my movie title'</span></span><br><span class="line">     quote: <span class="string">'This is my movie quote'</span></span><br><span class="line">   game:</span><br><span class="line">     title: <span class="string">'This is my game title'</span></span><br><span class="line">     quote: <span class="string">'This is my game quote'</span></span><br><span class="line">   timeout: <span class="number">10000</span></span><br></pre></td></tr></table></figure><blockquote><p>上面参数说明：</p><ul><li><strong>user</strong>: 你的豆瓣ID.打开豆瓣，登入账户，然后在右上角点击      “个人主页” ，这时候地址栏的URL大概是这样：”<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.douban.com%2Fpeople%2Fxxxxxx%2F" target="_blank" rel="noopener">https://www.douban.com/people/xxxxxx/</a>“      ，其中的”xxxxxx”就是你的个人ID了。</li><li><strong>builtin</strong>: 是否将生成页面的功能嵌入hexo s和hexo      g中，默认是false,另一可选项为true(1.x.x版本新增配置项)。</li><li><strong>title</strong>: 该页面的标题.</li><li><strong>quote</strong>: 写在页面开头的一段话,支持html语法.</li><li><strong>timeout</strong>: 爬取数据的超时时间，默认是 10000ms      ,如果在使用时发现报了超时的错(ETIMEOUT)可以把这个数据设置的大一点。</li></ul></blockquote><p>由于<code>hexo-douban</code>是默认抓取豆瓣读书、豆瓣电影以及豆瓣游戏的，如果只想要其中一部分，可以把其它部分在上述配置文件中去掉即可。</p><h1 id="0x03-启用使用"><a href="#0x03-启用使用" class="headerlink" title="0x03 启用使用"></a>0x03 启用使用</h1><p>插件安装好了，需要配置的也配置好了，下面就需要生成我们的豆瓣书架、电影页面了。</p><p>##3.1 生成页面</p><p>在GitBash下输入命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  <span class="comment">#清除之前生成的文件</span></span><br><span class="line">hexo douban -bmg   <span class="comment">#生成豆瓣书籍、电影、游戏页面</span></span><br><span class="line">hexo g             <span class="comment">#生成文章</span></span><br><span class="line">hexo s           <span class="comment">#启动本地服务器</span></span><br><span class="line">hexo deploy        <span class="comment">#上传部署</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-bgm代表的是book、game、movie三个参数，如果只需要其中的一部分就只带你想要的那些参数。</span></span><br></pre></td></tr></table></figure><blockquote><p>注：由于<code>hexo douban</code>的简写也是hexo d，与hexo deploy的简写指令hexo d冲突，因此在进行二者部署的时候，只能都打全名而不能打简写形式</p></blockquote><p>##3.2 测试</p><p>如果在<code>hexo douban -bmg</code>这步没有问题的话，会出现如下信息</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190809233452.png" class="lozad"></p><p>然后我们只需要在站点目录下测试<a href="http://localhost:4000/books" target="_blank" rel="noopener">http://localhost:4000/books</a> 或者 <a href="http://localhost:4000/movies等，如果看到页面了就说明成功了。" target="_blank" rel="noopener">http://localhost:4000/movies等，如果看到页面了就说明成功了。</a></p><p>##3.3 配置</p><p>如果上述都没有问题，我们就可以在菜单栏中添加按钮了，打开主题配置文件<code>_config.xml</code>，找到菜单按钮，可以选择性的添加下面内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  archives: /archives</span><br><span class="line">  books: /books     <span class="comment"># 这是链接到books页面</span></span><br><span class="line">  movies: /movies   <span class="comment">#  这是链接到movies页面</span></span><br><span class="line">  games: /games   <span class="comment"># 这是链接到games页面</span></span><br></pre></td></tr></table></figure><p>注意添加完成之后按钮并不是中文的，这是由于在languages文件夹下面的<code>zh-CN</code>（中文语言配置文件）没有添加上述对应的中文参数信息，所以我们需要主动添加,语言文件夹在你的主题配置文件夹下面，如下图</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190809235531.png" class="lozad"></p><p>在<code>menu</code>菜单下添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  books: 阅读</span><br><span class="line">  movies: 电影</span><br><span class="line">  games: 游戏</span><br></pre></td></tr></table></figure><p>#0x04 碰到的问题</p><p>输入<code>hexo douban -bg</code>以后，发现没有按照教程一样产生相关的页面</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190809234000.png" class="lozad"></p><p>在网上百度，<code>Google</code>了好久都没有相关的问题，只有相关的教程，也重装了无数次，还是不成功，但是这个插件明明是支持next主题的，所以我就在虚拟机里面重新搭建了一个干干净净的博客，然后安装上这个插件后，发现可以正常产生页面的。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190809234028.png" class="lozad"></p><p>所以断定，肯定是我的博客配置出现了问题而不是插件的问题了，在精确定位一下问题：要么是主题的配置的问题，要么的<code>hexo</code>的配置问题，要么是可能去之前安装的功能插件冲突。</p><p>通过将原始的配置复制到我的博客中，发现产生，同构将我博客中的配置文件复制到原始的配置中，发现不能产生，从而断定了问题是出在<code>hexo</code>的站点配置文件中，因为我直接将新的站点配置文件复制进去是可以正常产生页面的。所以在进一步排查到底是站点配置文件中的什么配置出了问题。</p><p>最后查出，原来是<code>douban:</code>前面多了空格，必须要顶格才行。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190809234203.png" class="lozad"></p><p>再次运行<code>hexo douban -bmg</code>成功生成<code>books</code>和<code>games</code>页面。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190809234225.png" class="lozad"></p><p>#0x05 参考链接</p><p><a href="https://github.com/mythsman/hexo-douban" target="_blank" rel="noopener">https://github.com/mythsman/hexo-douban</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;在一次浏览个人博客网站的过程中，返现有个网站有豆瓣读书的功能，可以在页面展示自己读了哪些书，想看哪些书等，我觉得这个功能特别的好，可以记录自己的读书，还可以在读完以后写上自己的书评。下面来给大家讲讲怎么在自己的博客中实现这个功能。&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://www.mad-coding.cn/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://www.mad-coding.cn/tags/hexo/"/>
    
      <category term="豆瓣书架" scheme="https://www.mad-coding.cn/tags/%E8%B1%86%E7%93%A3%E4%B9%A6%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>github+hexo+域名搭建一个自己的网站</title>
    <link href="https://www.mad-coding.cn/2019/08/09/github-hexo-%E5%9F%9F%E5%90%8D%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BD%91%E7%AB%99/"/>
    <id>https://www.mad-coding.cn/2019/08/09/github-hexo-域名搭建一个自己的网站/</id>
    <published>2019-08-09T14:36:44.000Z</published>
    <updated>2019-08-18T06:22:03.818Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>​        在一次无意的搜索文章中，看到了一个特别好的网站，不管是前端还是网站的内容都做的非常吸引人。我一开始以为是WordPress搭建的个人博客，后台得知使用hexo+GitHub来搭建的，顿时心中的博客火又燃了起来。<code>$_$</code>因为我之前也用WordPress搭建过自己的博客，但是由于需要购买阿里云的服务器，这对于我这个穷人来说是一笔开销，所以在服务器到期以后就没有在续费了，而hexo+GitHub搭建的是完全免费的，利用的是GitHub page，然后hexo将我们写的博客渲染成静态页面在部署到GitHub中去，最后在前端展现出来。下面就给大家介绍一个搭建的过程。</p><a id="more"></a><p>#0x01 环境准备</p><blockquote><p>需要的东西：</p><ol><li>node.js</li><li>git</li><li>hexo</li><li>GitHub账号</li><li>域名</li></ol></blockquote><p>##1.1 node和git的安装</p><p>Node.js下载](<a href="http://nodejs.org/" target="_blank" rel="noopener">http://nodejs.org/</a>) ，<a href="http://git-scm.com/" target="_blank" rel="noopener">Git下载</a> ，下载完成以后，直接傻瓜式下一步安装即可。</p><p>按win+R 输入<code>cmd</code>命令来检查是否安装成功</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v <span class="comment">#查看node版本</span></span><br><span class="line">git -v <span class="comment">#查看git版本</span></span><br></pre></td></tr></table></figure><p>出现下图说明安装成功</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816134834.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816134852.png" class="lozad"></p><p>##1.2 hexo的安装</p><p>首先需要新建一个空的Blog文件夹，可以在任意盘符右击新建个文件夹，也可以通过cmd命令来完成</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816135215.png" class="lozad"></p><p>输入Blog文件夹下输入<code>npm install hexo -g</code>安装<code>hexo</code>（速度根据你的实时网速）</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816135313.png" class="lozad"></p><p>输入<code>hexo -v</code>，检查<code>hexo</code>是否安装成功</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816135359.png" class="lozad"></p><p>输入<code>hexo init</code>，初始化该文件夹（需要等待一会）</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816135420.png" class="lozad"></p><p>输入<code>npm install</code>，安装所需要的组件</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816135440.png" class="lozad"></p><p>输入<code>hexo g</code>（=hexo generate），生成静态页面</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816135513.png" class="lozad"></p><p>输入<code>hexo s</code>（=hexo server），开启服务器，访问该网址，正式体验<code>Hexo</code></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816135538.png" class="lozad"></p><p>访问<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 出现下图，说明本地搭建成功</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816135627.png" class="lozad"></p><p>命令总结：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo -v <span class="comment">#查看hexo版本</span></span><br><span class="line">hexo init<span class="comment">#初始化hexo</span></span><br><span class="line">hexo install <span class="comment">#安装hexo</span></span><br><span class="line">hexo g<span class="comment">#将文章渲染成静态页面</span></span><br><span class="line">hexo s<span class="comment">#启动本地hexo服务器</span></span><br><span class="line">hexo d  <span class="comment">#部署到GitHub（后面介绍）</span></span><br></pre></td></tr></table></figure><h2 id="1-3-注册GitHub账号"><a href="#1-3-注册GitHub账号" class="headerlink" title="1.3 注册GitHub账号"></a>1.3 注册GitHub账号</h2><p>注册地址：<a href="https://github.com/" target="_blank" rel="noopener">github</a></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816155627.png" class="lozad"></p><p>输入用户名，邮箱和账号密码后点击注册，进入第二步</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816155949.png" class="lozad"></p><p>选择免费个人版</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816160249.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816160355.png" class="lozad"></p><p>去刚刚注册的邮箱验证一下即可</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816160431.png" class="lozad"></p><h2 id="1-4-购买域名"><a href="#1-4-购买域名" class="headerlink" title="1.4 购买域名"></a>1.4 购买域名</h2><p>购买域名是为了将GitHub的默认域名解析到自己的域名下，这样以后就可以直接访问自己的域名了，不需要在输入GitHub的默认域名了。</p><p><a href="https://dnspod.cloud.tencent.com/" target="_blank" rel="noopener">腾讯注册域名传送门</a>  <a href="https://wanwang.aliyun.com" target="_blank" rel="noopener">阿里云注册域名传送门</a></p><h1 id="0x02-搭建hexo博客"><a href="#0x02-搭建hexo博客" class="headerlink" title="0x02 搭建hexo博客"></a>0x02 搭建hexo博客</h1><h2 id="2-1-配置GitHub"><a href="#2-1-配置GitHub" class="headerlink" title="2.1 配置GitHub"></a>2.1 配置GitHub</h2><p>首先需要创建一个新的repository仓库，</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816162045.png" class="lozad"></p><p>​    <img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816162135.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816162258.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816162500.png" class="lozad"></p><p>一直往下拉，找到GitHub pages</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816162646.png" class="lozad"></p><p>访问链接效果如下：</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816163028.png" class="lozad"></p><p>将Hexo与Github page联系起来，设置Git的user name和email（如果是第一次的话）</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816163105.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816163122.png" class="lozad"></p><p>分别输入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="keyword">global</span> user.name <span class="string">"madcoding"</span></span><br><span class="line">git config --<span class="keyword">global</span> user.email <span class="string">"madcoding@163.com"</span></span><br></pre></td></tr></table></figure><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816163217.png" class="lozad"></p><p><strong>注：这里“madcoding”可以替换成自己的用户名，邮箱可以替换成自己的邮箱</strong></p><p>输入<code>ssh-keygen -t rsa -C “madcoding163.com”</code>连续三个回车，生成密钥，最后得到了两个文件：<code>id_rsa</code>和<code>id_rsa.pub</code>（默认存储路径是：C:\Users\Administrator.ssh）。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816163333.png" class="lozad"></p><p>输入<code>eval &quot;$(ssh-agent -s)&quot;</code>，添加密钥到<code>ssh-agent</code></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816163601.png" class="lozad"></p><p> 再输入ssh-add ~/.ssh/id_rsa，添加生成的SSH key到ssh-agent</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816163652.png" class="lozad"></p><p>在目录C:\Users\Administrator.ssh下载，找到下面两文件</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816163711.png" class="lozad"></p><p>用记事本打开id_rsa.pub，复制里面的内容</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816163730.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816163742.png" class="lozad"></p><p>添加成功</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816163759.png" class="lozad"></p><p>继续在Git bash中输入ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a> 然后输入两次yes，返回下图说明连接成功</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816163840.png" class="lozad"></p><h2 id="2-2-自定义域名设置"><a href="#2-2-自定义域名设置" class="headerlink" title="2.2 自定义域名设置"></a>2.2 自定义域名设置</h2><p>在Blog的source目录下，新建一个CANME文件，具体操作如下</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816164007.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816164044.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816164727.png" class="lozad"></p><p>在cmd窗口中输入ping 用户名.github.io 得到GitHub分配的一个公网ip地址，记下这个地址</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816164454.png" class="lozad"></p><p>##2.3 设置域名解析</p><p>然后到阿里云购买好的域名中心，设置域名解析，下面是设置好的结果</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816164642.png" class="lozad"></p><p>设置步骤：</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816164925.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816164942.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816165010.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816165027.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816165046.png" class="lozad"></p><p>##2.4 配置部署</p><p>在Blog的根目录下，找到_config.yml文件，修改repo值（在末尾）</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816165607.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816165450.png" class="lozad"></p><p>在Git bash中输入hexo new post “test”</p><p>这时，可以在source文件下的_posts文件夹中看到刚刚新建的test文件，写文章可以直接在该文档中去写</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816165733.png" class="lozad"></p><p>在生成以及部署文章之前，需要安装一个扩展：</p><blockquote><p>npm install hexo-deployer-git –save</p></blockquote><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816165849.png" class="lozad"></p><p>使用编辑器编好文章，那么就可以使用命令：hexo g 来生成静态的文档</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816165925.png" class="lozad"></p><p>然后使用hexo d 来部署到GitHub中</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816165951.png" class="lozad"></p><p>如果点击login后dos界面没有反应，按一下enter键就好了</p><p>出现下图，部署成功</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816170119.png" class="lozad"></p><h1 id="0x03-美化博客"><a href="#0x03-美化博客" class="headerlink" title="0x03 美化博客"></a>0x03 美化博客</h1><h2 id="3-1-跟换主题"><a href="#3-1-跟换主题" class="headerlink" title="3.1 跟换主题"></a>3.1 跟换主题</h2><p>1.可以直接去hexo官方主题库中去找一个自己喜欢的主题去下载，然后下载完成后复制到themes文件夹下。<a href="https://hexo.io/themes/" target="_blank" rel="noopener">传送门</a></p><p>2.在Blog目录下，右击，点击Git bash here，然后输入</p><p>git clone <a href="https://github.com/shenliyang/hexo-theme-snippet.git" target="_blank" rel="noopener">https://github.com/shenliyang/hexo-theme-snippet.git</a> </p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190816173519.png" class="lozad"></p><h2 id="3-2-博客导航栏设置"><a href="#3-2-博客导航栏设置" class="headerlink" title="3.2 博客导航栏设置"></a>3.2 博客导航栏设置</h2><p>直接在博客主题目录下设置即可，在zh-CN中设置也可以。</p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63rxz6chbj20dz06y74j.jpg" class="lozad"></p><p>​    效果显示</p><p><img alt data-src="G:%5CBlog%5Csource_posts%5C78bb2039ly1g63rz389x9j20v2027q5y.jpg" class="lozad"></p><h2 id="3-3-分类设置"><a href="#3-3-分类设置" class="headerlink" title="3.3 分类设置"></a>3.3 分类设置</h2><p>虽然我们在主题中设置了导航栏，但是却没有给导航栏设置对应的页面，所以点击的时候是不能正常显示的。</p><h3 id="3-3-1-添加分类列表"><a href="#3-3-1-添加分类列表" class="headerlink" title="3.3.1 添加分类列表"></a>3.3.1 添加分类列表</h3><p>在项目根目录下，执行下面的命令行，新建分类页面，然后会在项目根目录下的 <strong>source</strong> 文件夹中新建一个 <strong>categories</strong> 文件夹。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63s2yji4qj20gy0aoq3e.jpg" class="lozad"></p><p>打开 <strong>categories</strong> 文件夹中的 <strong>index.md</strong> 文件，添加 <strong>type</strong> 字段，设置为 <strong>“categories”</strong>。如下图所示。</p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63s3sxxtuj20bt04g745.jpg" class="lozad"></p><p>接着到主题文件夹下的 _config.yml 配置文件下，找到 <strong>menu</strong> 模块，把 <strong>categories</strong> 的注释给去掉。如下图所示。</p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63s4q4qq9j20ek06bwep.jpg" class="lozad"></p><p>刷新页面（如果刷新没效果，可以重启服务），可以在页面左侧栏上看到多了一个“分类”列表。</p><h3 id="3-3-2-如何将文章添加到对应分类？"><a href="#3-3-2-如何将文章添加到对应分类？" class="headerlink" title="3.3.2 如何将文章添加到对应分类？"></a>3.3.2 如何将文章添加到对应分类？</h3><p>文章发布前，在 front-matter 部分，多写一个 <strong>categories</strong> 字段，然后参数写上类别的名称，保存后重启服务，在网页上点击“分类”，可以看到分类下已经生成了刚刚设置的类别，并把刚刚发布的文章归类在此类别下。如下图所示。</p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63s656g6xj20em091glo.jpg" class="lozad"></p><h2 id="3-4-标签设置"><a href="#3-4-标签设置" class="headerlink" title="3.4 标签设置"></a>3.4 标签设置</h2><p>方法跟分类设置原理一样，这里就不在重复介绍了，需要注意一点的是格式问题。</p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63s81nzjlj20d705cjra.jpg" class="lozad"></p><h2 id="3-5-Hexo-博客添加站内搜索"><a href="#3-5-Hexo-博客添加站内搜索" class="headerlink" title="3.5 Hexo 博客添加站内搜索"></a>3.5 Hexo 博客添加站内搜索</h2><p>蝴蝶主题支持Algolia，Local Search，这就给大家介绍一些Local Search，因为这个配置简单，-&gt; -&gt;。注意：安装的时候要是项目根目录下安装。</p><p>安装 hexo-generator-search</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>安装 hexo-generator-searchdb</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>在项目根目录下的 _config.yml 配置文件的文末添加下面这段代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><p>编辑主题文件夹的 _config.yml 配置文件，设置 Local searchenable 为 <strong>ture</strong>。</p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63siez3j3j20la068mxd.jpg" class="lozad"></p><p>效果图</p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63sixkh8fj20l20c9wi4.jpg" class="lozad"></p><h1 id="0x04-其他功能"><a href="#0x04-其他功能" class="headerlink" title="0x04 其他功能"></a>0x04 其他功能</h1><h1 id="0x05-采坑指南"><a href="#0x05-采坑指南" class="headerlink" title="0x05 采坑指南"></a>0x05 采坑指南</h1><h2 id="5-1-端口占用问题"><a href="#5-1-端口占用问题" class="headerlink" title="5.1 端口占用问题"></a>5.1 端口占用问题</h2><p>假如页面一直无法跳转，那么可能端口被占用了。此时我们<code>ctrl+c</code>停止服务器，接着输入<code>“hexo server -p 端口号”</code>来改变端口号</p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63sltc3yfj20g0045mx1.jpg" class="lozad"></p><h2 id="5-2-npm-install-hexo-g出现问题"><a href="#5-2-npm-install-hexo-g出现问题" class="headerlink" title="5.2 npm install hexo -g出现问题"></a>5.2 npm install hexo -g出现问题</h2><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63sm9gnpfj20k004mt8u.jpg" class="lozad"></p><p>解决方法：</p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63smjyd3bj20iq03oq31.jpg" class="lozad"></p><p>然后再次执行<code>npm install hexo  -g</code></p><h2 id="5-3-ssh-key配置失败"><a href="#5-3-ssh-key配置失败" class="headerlink" title="5.3 ssh-key配置失败"></a>5.3 ssh-key配置失败</h2><p>首先，清除所有的<code>key-pair</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-add -D</span><br><span class="line">rm -r ~/.ssh</span><br></pre></td></tr></table></figure><p>删除你在<code>github</code>中的<code>public-key</code>,重新生成<code>ssh</code>密钥对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxx@xxx.com&quot;</span><br></pre></td></tr></table></figure><p>接下来正常操作</p><p>在<code>github</code>上添加公钥<code>public-key</code>:</p><p>1、首先在你的终端运行<code>xclip -sel c ~/.ssh/id_rsa.pub</code>将公钥内容复制到剪切板</p><p>2、在<code>github</code>上添加公钥时，直接复制即可</p><p>3、保存</p><p>删除你在<code>github</code>中的<code>public-key</code></p><p>重新生成<code>ssh</code>密钥对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxx@xxx.com&quot;</span><br></pre></td></tr></table></figure><p>测试：</p><p>在终端 <code>ssh -T git@github.com</code></p><h2 id="5-4-发布文章时出现问题"><a href="#5-4-发布文章时出现问题" class="headerlink" title="5.4 发布文章时出现问题"></a>5.4 发布文章时出现问题</h2><p>###5.4.1 问题描述</p><p>使用<code>hexo d -g</code>命令发布文章使，出现如下问题</p><p>YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 4, column 1:</p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63sqhgmawj20mq0a03yu.jpg" class="lozad"></p><h3 id="5-4-2-问题原因"><a href="#5-4-2-问题原因" class="headerlink" title="5.4.2 问题原因"></a>5.4.2 问题原因</h3><p>在发布文章的<code>md</code>文件里面开头的文件头没有加空格如下：</p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63sr6vxpbj20ho052t8v.jpg" class="lozad"></p><h3 id="5-4-3-解决方法"><a href="#5-4-3-解决方法" class="headerlink" title="5.4.3 解决方法"></a>5.4.3 解决方法</h3><p>加上空格后，重新编译，没有出错（记得保存）</p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63srtnqhrj20cl05h74a.jpg" class="lozad"></p><p>重新编译，完成部署</p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63ss3rwp9j20f1073q2z.jpg" class="lozad"></p><h2 id="5-5-输入hexo-generate或者其他hexo的命令时出现下面的问题"><a href="#5-5-输入hexo-generate或者其他hexo的命令时出现下面的问题" class="headerlink" title="5.5 输入hexo generate或者其他hexo的命令时出现下面的问题"></a>5.5 输入hexo generate或者其他hexo的命令时出现下面的问题</h2><h3 id="5-5-1-问题描述"><a href="#5-5-1-问题描述" class="headerlink" title="5.5.1 问题描述"></a>5.5.1 问题描述</h3><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63ssmzdxej20jy0dlwfq.jpg" class="lozad"></p><h3 id="5-5-2-问题原因"><a href="#5-5-2-问题原因" class="headerlink" title="5.5.2 问题原因"></a>5.5.2 问题原因</h3><p>yml的配置文件中国，冒号后面需要有空格，如下：</p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63stb003fj20ly03edfu.jpg" class="lozad"></p><h3 id="5-5-3-解决方法"><a href="#5-5-3-解决方法" class="headerlink" title="5.5.3 解决方法"></a>5.5.3 解决方法</h3><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63stxxxr9j20n1034wee.jpg" class="lozad"></p><p>保存后重新运行，没报错，空格真的是大坑。</p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63sudywlzj20cw02pjr8.jpg" class="lozad"></p><h2 id="5-6-部署博客没有CSS"><a href="#5-6-部署博客没有CSS" class="headerlink" title="5.6 部署博客没有CSS"></a>5.6 部署博客没有CSS</h2><h3 id="5-6-1-问题描述"><a href="#5-6-1-问题描述" class="headerlink" title="5.6.1 问题描述"></a>5.6.1 问题描述</h3><p>在本地server成功，显示没有问题</p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63szsvf18j20it0aztcu.jpg" class="lozad"></p><p>但是部署到github上之后，就无法显示主题和图片了</p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63sz41tkij20zi0r6go5.jpg" class="lozad"></p><h3 id="5-6-2-解决方法"><a href="#5-6-2-解决方法" class="headerlink" title="5.6.2 解决方法"></a>5.6.2 解决方法</h3><p>更改一下_config.yml文件，其中的url和root属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ur: http://www.nideyuming.com/blog/</span><br><span class="line">root: /blog</span><br></pre></td></tr></table></figure><p>root 下面应该设置成 /你的项目名 而不是/</p><p>然后重新部署一下就成功了。</p><h2 id="5-7-GitHub配置个人域名出现问题"><a href="#5-7-GitHub配置个人域名出现问题" class="headerlink" title="5.7 GitHub配置个人域名出现问题"></a>5.7 GitHub配置个人域名出现问题</h2><h3 id="5-7-1-问题描述"><a href="#5-7-1-问题描述" class="headerlink" title="5.7.1 问题描述"></a>5.7.1 问题描述</h3><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63sy0dtlxj20tr0kvq4a.jpg" class="lozad"></p><h3 id="5-7-2-解决方法"><a href="#5-7-2-解决方法" class="headerlink" title="5.7.2  解决方法"></a>5.7.2  解决方法</h3><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63t0ljwbpj20sz0lk76b.jpg" class="lozad"></p><h2 id="5-8-npm-install安装依赖出现问题"><a href="#5-8-npm-install安装依赖出现问题" class="headerlink" title="5.8 npm install安装依赖出现问题"></a>5.8 npm install安装依赖出现问题</h2><h3 id="5-8-1-问题描述"><a href="#5-8-1-问题描述" class="headerlink" title="5.8.1 问题描述"></a>5.8.1 问题描述</h3><p>npm WARN <a href="mailto:babel-eslint@10.0.1" target="_blank" rel="noopener">babel-eslint@10.0.1</a> requires a peer of eslint@&gt;= 4.12.1 but none is installed. You must install peer dependencies yourself.</p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63t1gkedpj20k206sjrx.jpg" class="lozad"></p><h3 id="5-8-2-解决方法"><a href="#5-8-2-解决方法" class="headerlink" title="5.8.2 解决方法"></a>5.8.2 解决方法</h3><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63t24qb2hj20mx0cpae4.jpg" class="lozad"></p><p>##5.9 输入自己后买的域名后访问是404</p><h3 id="5-9-1-问题描述"><a href="#5-9-1-问题描述" class="headerlink" title="5.9.1 问题描述"></a>5.9.1 问题描述</h3><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63t30fnfkj20r20dv3yx.jpg" class="lozad"></p><p>但是使用github的默认域名可以正常访问，所以问题出在了域名解析和站点配置的问题上了</p><p>先考虑重置设置一下域名解析的记录，将</p><p>重新设置好了域名解析，但是还是出现404，我TM。。。。</p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63t3frgu7j20p60ht0t5.jpg" class="lozad"></p><p>行，那就是站点配置上面的错误了，在<code>hexo</code>生成的博客的<code>source</code>目录下新建一个 <code>CNAME</code> 文件，然后在这个文件中填入你的域名，这样就不会每次发布之后，<code>gitpage</code>里的 <code>customdomain</code>都被重置掉啦。</p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63t3yrcdxj20hx08ht8z.jpg" class="lozad"></p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63t47u135j20ff03mgle.jpg" class="lozad"></p><p>重新部署后，在<code>GitHub</code>中会出现<code>CNAME</code>，说明设置成功了</p><p><img alt data-src="https://ws1.sinaimg.cn/large/78bb2039ly1g63t4g3nx8j211s0453yo.jpg" class="lozad"></p><h1 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h1><p><a href="https://www.cnblogs.com/fengxiongZz/p/7707219.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengxiongZz/p/7707219.html</a></p><p><a href="https://www.simon96.online/2018/10/12/hexo-tutorial/" target="_blank" rel="noopener">https://www.simon96.online/2018/10/12/hexo-tutorial/</a></p><p><a href="https://blog.csdn.net/liuyongshun2/article/details/54629087" target="_blank" rel="noopener">https://blog.csdn.net/liuyongshun2/article/details/54629087</a></p><p><a href="https://jerryc.me/posts/21cfbf15/#快速開始" target="_blank" rel="noopener">https://jerryc.me/posts/21cfbf15/#%E5%BF%AB%E9%80%9F%E9%96%8B%E5%A7%8B</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;​        在一次无意的搜索文章中，看到了一个特别好的网站，不管是前端还是网站的内容都做的非常吸引人。我一开始以为是WordPress搭建的个人博客，后台得知使用hexo+GitHub来搭建的，顿时心中的博客火又燃了起来。&lt;code&gt;$_$&lt;/code&gt;因为我之前也用WordPress搭建过自己的博客，但是由于需要购买阿里云的服务器，这对于我这个穷人来说是一笔开销，所以在服务器到期以后就没有在续费了，而hexo+GitHub搭建的是完全免费的，利用的是GitHub page，然后hexo将我们写的博客渲染成静态页面在部署到GitHub中去，最后在前端展现出来。下面就给大家介绍一个搭建的过程。&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://www.mad-coding.cn/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://www.mad-coding.cn/tags/hexo/"/>
    
      <category term="github" scheme="https://www.mad-coding.cn/tags/github/"/>
    
      <category term="博客" scheme="https://www.mad-coding.cn/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>自定义hexo创建文章的模板</title>
    <link href="https://www.mad-coding.cn/2019/08/02/%E8%87%AA%E5%AE%9A%E4%B9%89hexo%E5%88%9B%E5%BB%BA%E6%96%87%E7%AB%A0%E7%9A%84%E6%A8%A1%E6%9D%BF/"/>
    <id>https://www.mad-coding.cn/2019/08/02/自定义hexo创建文章的模板/</id>
    <published>2019-08-02T03:44:51.000Z</published>
    <updated>2019-08-18T03:55:48.613Z</updated>
    
    <content type="html"><![CDATA[<p>#0x00 前言</p><p>在众多的博客中，我选择了<code>hexo</code>，最大的优势就是可以结合<code>GitHub page</code>来搭建一个免费的个人博客系统，将文章都托管到<code>GitHub</code>上，在也不用担心服务器过期的问题了，而且可以自己买一个域名，解析了<code>GitHub</code>上就可以直接使域名访问了。很多小伙伴给自己个博客添加了很多其他的功能，但是每次写文章的时候都需要在文章的开头去写一遍，这简直就是重复造轮子。其实，你可以自己在<code>scaffolds</code>中去修改属于你自己的模板</p><a id="more"></a><p>#0x01 目录了解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">hexo-install-directory</span><br><span class="line">├── CNAME</span><br><span class="line">├── _config.yml  //Hexo的配置文件，可以配置主题、语言等</span><br><span class="line">├── avatar.jpg</span><br><span class="line">├── db.json</span><br><span class="line">├── debug.log</span><br><span class="line">├── node_modules</span><br><span class="line">├── public     //执行hexo g命令后，生成的内容会在这里，包括所有的文章、页面、分类、tag等.</span><br><span class="line">├── scaffolds    //保存着默认模板，自定义模板就是修改该目录下的文件</span><br><span class="line">│   ├── draft.md //默认的草稿模板</span><br><span class="line">│   ├── page.md  //默认的页面模板</span><br><span class="line">│   └── post.md  //默认的文章模板</span><br><span class="line">├── source  //Hexo存放编辑页面的地方，可以使用vim或其他编辑器编辑这里的内容</span><br><span class="line">│   ├── 404.html //自定义404页面，可以使用腾讯公益404页面</span><br><span class="line">│   ├── Staticfile </span><br><span class="line">│   ├── _drafts  //存放所有的草稿文件的目录</span><br><span class="line">│   ├── _posts //存放所有的文章文件的目录，用的最多，比如执行hexo n "post_name"之后，post_name这篇文章就存放在这个目录下</span><br><span class="line">│   ├── categories</span><br><span class="line">└── themes //Hexo的所有主题</span><br><span class="line">    ├── landscape //原始hexo主题</span><br><span class="line">    ├── next     //这是我目前用的主题</span><br></pre></td></tr></table></figure><h1 id="0x02-修改步骤"><a href="#0x02-修改步骤" class="headerlink" title="0x02 修改步骤"></a>0x02 修改步骤</h1><p>在博客的<code>scaffolds</code>目录下有三个<code>md</code>文档，只需要改<code>post.md</code>即可。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190802145835.png" class="lozad"></p><p>我的模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">----</span><br><span class="line">title: &#123;&#123; title &#125;&#125;  //文章标题</span><br><span class="line">date: &#123;&#123; date &#125;&#125;    //文章创建时间</span><br><span class="line">permalink:          //文章显示连接</span><br><span class="line">categories:         //文章匪类目录</span><br><span class="line">tags: []            //文章标签，可多个，用，隔开</span><br><span class="line">description:        //文章描述</span><br><span class="line">image:              //自定义的文章摘要图片，只在页面展示，文章内消失</span><br><span class="line">copyright: true     //增加底部的版权信息（需要配置）</span><br><span class="line">-----</span><br><span class="line">//首页文章展示缩略图</span><br><span class="line">&lt;img src=&quot;https://&quot; alt=&quot;&quot; style=&quot;width:100%&quot; /&gt;  </span><br><span class="line"></span><br><span class="line">0x00 前言</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br><span class="line">## 0x01 </span><br><span class="line"></span><br><span class="line">## 0x02</span><br><span class="line"></span><br><span class="line">## 0x03</span><br><span class="line"></span><br><span class="line">## 0x04</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;hr /&gt;</span><br><span class="line">版权信息</span><br></pre></td></tr></table></figure><p>模板图片如下:</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190802145338.png" class="lozad"></p><p>#0x03 效果展示</p><p>首页预览</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190802160051.png" class="lozad"></p><p>文章详情</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190802160001.png" class="lozad"></p><p>版权信息</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190802160239.png" class="lozad"></p><p>## </p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#0x00 前言&lt;/p&gt;
&lt;p&gt;在众多的博客中，我选择了&lt;code&gt;hexo&lt;/code&gt;，最大的优势就是可以结合&lt;code&gt;GitHub page&lt;/code&gt;来搭建一个免费的个人博客系统，将文章都托管到&lt;code&gt;GitHub&lt;/code&gt;上，在也不用担心服务器过期的问题了，而且可以自己买一个域名，解析了&lt;code&gt;GitHub&lt;/code&gt;上就可以直接使域名访问了。很多小伙伴给自己个博客添加了很多其他的功能，但是每次写文章的时候都需要在文章的开头去写一遍，这简直就是重复造轮子。其实，你可以自己在&lt;code&gt;scaffolds&lt;/code&gt;中去修改属于你自己的模板&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://www.mad-coding.cn/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://www.mad-coding.cn/tags/hexo/"/>
    
      <category term="文章模板" scheme="https://www.mad-coding.cn/tags/%E6%96%87%E7%AB%A0%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>我的大学生活</title>
    <link href="https://www.mad-coding.cn/2019/07/01/%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B4%BB/"/>
    <id>https://www.mad-coding.cn/2019/07/01/我的大学生活/</id>
    <published>2019-06-30T16:16:58.000Z</published>
    <updated>2019-08-18T03:56:22.503Z</updated>
    
    <content type="html"><![CDATA[<p>#0x00 前言</p><p>​    我大学读的是计算机科学与技术专业，说实话，这个专业真的太大了，囊括了整个计算机的大类，所以学校的课程中，什么都学，什么计算机导论，离散数学，<code>Java</code>，<code>C</code>，<code>C#</code>，数据库，<code>JSP</code>等等，但是教的都是一些基本的皮毛知识，有些连入门都不算，所以要想在某个知识有所突破，基本上都是靠自己去图书馆借书回来学习。</p><a id="more"></a><p>​    在大学中，如果按照学习来分类的话，有这么几个人。第一类人——学神，听过这类人特别牛X，不光学习好，年年拿国家励志奖学金，而且还有这种职位，比如学社会主席，某某大赛领队人….；第二类人——学霸，他们是上课认真听讲，课下不用复习，靠前突击复习。期末稳稳优秀，我宿舍就有几个，哈哈哈，我们宿舍在班上也算是男生中的学霸宿舍了；第三类人——学渣，他们是上课玩手机，下课打游戏，吃饭叫外卖，考试靠小抄。</p><h1 id="0x01-大一"><a href="#0x01-大一" class="headerlink" title="0x01 大一"></a>0x01 大一</h1><p>​    大一小萌新，充满着对大学的憧憬，然后大一也是最惨的，学生会中部长对大一干部喝来喝去，一副官腔样，贼恶心。除了这些大一小萌新还会在志愿者协会参加各种户外和校内的志愿者活动，只为了志愿者证书上的那60小时志愿工时，不过我在大一的时候为了多见见世面，参加了不少志愿活动，大大小小的积累下来有100多个工时。不过最后被我弄丢了╮(╯▽╰)╭然后就是我在大学还参加一个社团叫剪纸协会（非物质文化遗产奥），不过我在里面也是混日子，没有学到多少技能，到是吧脸皮练厚了，哈哈哈。这就样大一结束。</p><p>#0x02 大二</p><p>​    大二，学习上的事就暂且不谈了，都一样，周一周五上课，周六周日放假。不过不同的人大二的生活就开始不一样了。要是说很多人在大一的时候都差不多，一起参加了学生会，社团什么的，到了大二以后，换届的换届，退会的退会，有幸的是，我当上了剪纸协会的副会长，一般一个社会会有4个负责人，1个会长，两个副会长，还有一个理事长。反正都是管事的，每次社团需要举办什么活动，我们几个负责人都要讨论一下活动的举办等等一系列问题，话说，举办活动还是挺有意思的，不过举办活动前后事情也是挺多的。需要外联部去拉赞助，需要组织部写策划案，需要剪纸部和纸艺创作部出作品展览，协调活动现场人员情况等等。就这样，大二我除了每天上课以外，其余的时光都是在协会中度过了，不过我喜欢去图书馆借点书在协会里面看书，一个人安静的看书，还有空调，也是一种享受！皮卡皮卡^v^ 。</p><p>​    在一次偶然的机遇中，我碰到了学校计算机协会的会长，在于他交流的过程中，他和我讲了一些有关黑客的东西，其中就涉及到了各种技术，什么<code>ip</code>定位（小皮毛），渗透测试、<code>kali Linux</code>等，当时的我是第一次接触到渗透测试这个词，也没有听过<code>kali Linux</code>，只知道有软件测试和<code>Linux</code>系统这么一回事。当我从百度中搜索了有关这些词的信息后，开启了我新世界的大门。为了学习渗透，我在虚拟机中装上了<code>kali Linux</code>，这个过程在我摸索的过程了还是碰到了不少坑的，这里就不说了，装上<code>kali Linux</code>以后，第一个想法就是，我该怎么用，怎么去和电影里面的一样去黑别人的电脑？等等，于是在网上搜索了一些相关的资料和视频，开始学习<code>kali Linux</code>，其中，我研究最多的模块就是内网了，其实实际上就是局域网环境内的攻击，这些我是先拿我宿舍的室友和路由器开的刀，先是研究如何破解<code>WiFi</code>密码，然后破击成功后使用<code>nmap</code>扫描内网存活主机，使用<code>arp</code>欺骗局域网的主机，窃取局域网中用户的数据流量等等（这些其实不懂，就是跟着视频操作一遍，照葫芦画瓢，不懂原理），再去使用<code>nessus</code>扫描主机存在的漏洞，最后利用漏洞攻击系统等等（未成功过。:( ），在无线网破解这部分我曾经还在<code>freebuf</code>上发表一篇文章——如何使用<code>Airgeddon</code>找回<code>WiFi</code>密码 ，这篇文章从技术研究，文章的撰写发布花了我好几天的时间，在写文章的那天弄到3点在写完成，不过最后发表了，很开心。大二就说这么多吧，其他的大三再说。</p><p>#0x03 大三</p><p>​    时间很快，我到了大三，大三上学期不知道怎么回事，课少的可怜，所以我就有更多的时间来研究渗透测试的东西了，这段时间我研究了<code>msf</code>中的木马，具体技术也不是很懂，就是利用命令来生成木马，然后将木马发送给受害者，只要受害者点击了以后，我这边就可以反弹回来一个会话，俗称<code>shell</code>，在这里，我可以查看该用户主机中的所有信息（管理员权限），当初就是将这个给我的一个室友演示的，成功让他上船。然后两个人一起研究渗透测试，免杀，<code>Android</code>马等等，只是当初思维比较局限，不知道<code>web</code>层面的渗透，只知道有日战这么一说，但是具体的也不知道怎么日。。。。</p><p>​    大三下学期的课与上学期的课形成了鲜明的对比，基本上天天满课，有的时候晚上还要上课，这，让我在渗透测试方面的研究方面的研究时间大大减少，而且我在大三还萌生了考研的想法，所以，学习任务繁重啊。╮(╯▽╰)╭，不过幸运的是，我在大三过了六级，低分飘过，过了三级网络技术，还拿到了国家励志，也算是我的幸运之年了。皮卡皮卡(<em>^__^</em>) </p><p>#0x04 大四</p><p>​    考研，考研失败，经历就不分享了，免得误导小朋友。不过给出建议就是坚持，很多人在考研的后期都奔溃了，时间不够用，没有复习完，考场心态爆（我在考数学的时候心态崩过，然后出去洗把脸换个位置调整过来了），所以，一定要坚持，怎么也得熬到考研结束。说不定，你就成功了。哇咔咔！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#0x00 前言&lt;/p&gt;
&lt;p&gt;​    我大学读的是计算机科学与技术专业，说实话，这个专业真的太大了，囊括了整个计算机的大类，所以学校的课程中，什么都学，什么计算机导论，离散数学，&lt;code&gt;Java&lt;/code&gt;，&lt;code&gt;C&lt;/code&gt;，&lt;code&gt;C#&lt;/code&gt;，数据库，&lt;code&gt;JSP&lt;/code&gt;等等，但是教的都是一些基本的皮毛知识，有些连入门都不算，所以要想在某个知识有所突破，基本上都是靠自己去图书馆借书回来学习。&lt;/p&gt;
    
    </summary>
    
      <category term="记录生活" scheme="https://www.mad-coding.cn/categories/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="https://www.mad-coding.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
